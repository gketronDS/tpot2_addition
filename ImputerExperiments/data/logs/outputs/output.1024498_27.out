Run: 27
/cm/local/apps/slurm/var/spool/job1024498/slurm_script: line 26: 
pip install -e tpot2
pip install -r tpot2/ImputerExperiments/requirements_.txt
: No such file or directory
RunStart
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
starting loops
../data/c/737/737.pkl
working on 
../data/c/737/class_full_MCAR_0.3_2
1.7940342426300049
running experiment 1/3 - Does large hyperparameter space improve reconstruction accuracy over simple
[I 2024-10-25 23:15:09,284] A new study created in memory with name: no-name-080706cc-4323-44b3-a987-261d4ee05daf
running
running
running
running
running
running
running
running
running
running
running
running
running
running
running
running
[I 2024-10-25 23:15:09,999] Trial 12 finished with value: 0.16543925427855544 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'mean'}. Best is trial 12 with value: 0.16543925427855544.
running
[I 2024-10-25 23:15:10,109] Trial 7 finished with value: 0.16543925427855544 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'mean'}. Best is trial 12 with value: 0.16543925427855544.
[I 2024-10-25 23:15:10,205] Trial 0 finished with value: 0.4575693587888946 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'most_frequent'}. Best is trial 12 with value: 0.16543925427855544.
running
running
[I 2024-10-25 23:15:10,519] Trial 10 finished with value: 0.4575693587888946 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'most_frequent'}. Best is trial 12 with value: 0.16543925427855544.
running
[I 2024-10-25 23:15:10,714] Trial 18 finished with value: 0.16543925427855544 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'mean'}. Best is trial 12 with value: 0.16543925427855544.
running
[I 2024-10-25 23:15:11,144] Trial 15 finished with value: 0.1688052636299587 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 1645, 'weights': 'distance'}. Best is trial 12 with value: 0.16543925427855544.
running
[I 2024-10-25 23:15:11,361] Trial 4 finished with value: 0.16892055694204805 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 1577, 'weights': 'distance'}. Best is trial 12 with value: 0.16543925427855544.
running
[I 2024-10-25 23:15:11,539] Trial 22 finished with value: 0.16543925427855544 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'mean'}. Best is trial 12 with value: 0.16543925427855544.
[I 2024-10-25 23:15:11,646] Trial 8 finished with value: 0.16748489751940027 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 1110, 'weights': 'uniform'}. Best is trial 12 with value: 0.16543925427855544.
running
running
[I 2024-10-25 23:15:11,766] Trial 9 finished with value: 0.16715158719998868 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 1480, 'weights': 'uniform'}. Best is trial 12 with value: 0.16543925427855544.
[I 2024-10-25 23:15:11,863] Trial 1 finished with value: 0.16940189490722005 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 913, 'weights': 'distance'}. Best is trial 12 with value: 0.16543925427855544.
running
running
[I 2024-10-25 23:15:12,345] Trial 20 finished with value: 0.16909367092802635 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 1390, 'weights': 'distance'}. Best is trial 12 with value: 0.16543925427855544.
running
[I 2024-10-25 23:15:12,883] Trial 23 finished with value: 0.16926040991533492 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 1000, 'weights': 'distance'}. Best is trial 12 with value: 0.16543925427855544.
running
[I 2024-10-25 23:15:14,755] Trial 2 finished with value: 0.16385166415150043 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Bayesian', 'initial_strategy': 'mean', 'n_nearest_features': 2, 'imputation_order': 'random', 'sample_posterior': False}. Best is trial 2 with value: 0.16385166415150043.
running
[I 2024-10-25 23:15:15,173] Trial 28 finished with value: 0.1617428621269777 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Bayesian', 'initial_strategy': 'mean', 'n_nearest_features': 6, 'imputation_order': 'ascending', 'sample_posterior': False}. Best is trial 28 with value: 0.1617428621269777.
running
[I 2024-10-25 23:15:15,655] Trial 27 finished with value: 0.161619877867376 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Ridge', 'initial_strategy': 'mean', 'n_nearest_features': 4, 'imputation_order': 'descending'}. Best is trial 27 with value: 0.161619877867376.
running
[I 2024-10-25 23:15:16,155] Trial 11 finished with value: 0.1807875412740349 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'mean', 'n_nearest_features': 1, 'imputation_order': 'arabic'}. Best is trial 27 with value: 0.161619877867376.
running
[I 2024-10-25 23:15:16,687] Trial 16 finished with value: 0.18209680397805195 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'median', 'n_nearest_features': 2, 'imputation_order': 'ascending'}. Best is trial 27 with value: 0.161619877867376.
running
[I 2024-10-25 23:15:17,080] Trial 31 finished with value: 0.16179675120233877 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Ridge', 'initial_strategy': 'mean', 'n_nearest_features': 6, 'imputation_order': 'ascending'}. Best is trial 27 with value: 0.161619877867376.
running
[I 2024-10-25 23:15:17,216] Trial 26 finished with value: 0.17527795247903083 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'median', 'n_nearest_features': 2, 'imputation_order': 'random'}. Best is trial 27 with value: 0.161619877867376.
running
[I 2024-10-25 23:15:17,839] Trial 29 finished with value: 0.16385166415150043 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Bayesian', 'initial_strategy': 'mean', 'n_nearest_features': 2, 'imputation_order': 'random', 'sample_posterior': False}. Best is trial 27 with value: 0.161619877867376.
running
[I 2024-10-25 23:15:18,004] Trial 30 finished with value: 0.1633810657547096 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Bayesian', 'initial_strategy': 'mean', 'n_nearest_features': 2, 'imputation_order': 'ascending', 'sample_posterior': False}. Best is trial 27 with value: 0.161619877867376.
running
[I 2024-10-25 23:15:52,620] Trial 6 finished with value: 0.15742213822577322 and parameters: {'model_name': 'VAE', 'batch_size': 552, 'iterations': 1, 'learning_rate': 0.00023308744754021405, 'p_miss': 0.19085854758591736}. Best is trial 6 with value: 0.15742213822577322.
running
[I 2024-10-25 23:15:55,994] Trial 25 finished with value: inf and parameters: {'model_name': 'GAIN', 'batch_size': 5, 'hint_rate': 0.8157468711241003, 'alpha': 38, 'iterations': 27, 'learning_rate': 0.08916003853777575, 'p_miss': 0.10601948140562809}. Best is trial 6 with value: 0.15742213822577322.
running
[I 2024-10-25 23:15:58,150] Trial 38 finished with value: 0.1529981051770624 and parameters: {'model_name': 'VAE', 'batch_size': 698, 'iterations': 1, 'learning_rate': 0.00014971947422886032, 'p_miss': 0.20295035861259392}. Best is trial 38 with value: 0.1529981051770624.
running
[I 2024-10-25 23:16:02,360] Trial 39 finished with value: 0.15183403226985853 and parameters: {'model_name': 'VAE', 'batch_size': 650, 'iterations': 1, 'learning_rate': 0.00010271178250651572, 'p_miss': 0.2757430605353921}. Best is trial 39 with value: 0.15183403226985853.
running
[I 2024-10-25 23:16:03,095] Trial 40 finished with value: 0.15198072452124506 and parameters: {'model_name': 'VAE', 'batch_size': 995, 'iterations': 1, 'learning_rate': 0.00010868099606093748, 'p_miss': 0.2555252018659495}. Best is trial 39 with value: 0.15183403226985853.
running
[I 2024-10-25 23:16:04,630] Trial 34 finished with value: 0.15479761737119513 and parameters: {'model_name': 'VAE', 'batch_size': 125, 'iterations': 2, 'learning_rate': 0.007290523525154815, 'p_miss': 0.11924573476611204}. Best is trial 39 with value: 0.15183403226985853.
running
[I 2024-10-25 23:16:07,804] Trial 41 finished with value: 0.15751176259231867 and parameters: {'model_name': 'VAE', 'batch_size': 829, 'iterations': 1, 'learning_rate': 0.00010340697745023782, 'p_miss': 0.2595068554751811}. Best is trial 39 with value: 0.15183403226985853.
running
[I 2024-10-25 23:16:08,502] Trial 35 finished with value: 0.38849621951239877 and parameters: {'model_name': 'GAIN', 'batch_size': 50, 'hint_rate': 0.53205474025267, 'alpha': 69, 'iterations': 12, 'learning_rate': 0.003793375732384371, 'p_miss': 0.1589909549276816}. Best is trial 39 with value: 0.15183403226985853.
running
[I 2024-10-25 23:16:09,144] Trial 42 finished with value: 0.15571395634200497 and parameters: {'model_name': 'VAE', 'batch_size': 941, 'iterations': 1, 'learning_rate': 0.00011715059800177653, 'p_miss': 0.2915243207835836}. Best is trial 39 with value: 0.15183403226985853.
running
[I 2024-10-25 23:16:10,182] Trial 43 finished with value: 0.15766885167302822 and parameters: {'model_name': 'VAE', 'batch_size': 994, 'iterations': 1, 'learning_rate': 0.00011210852230807933, 'p_miss': 0.2934063073964874}. Best is trial 39 with value: 0.15183403226985853.
running
[I 2024-10-25 23:16:14,181] Trial 19 finished with value: 0.20238108826737208 and parameters: {'model_name': 'VAE', 'batch_size': 2, 'iterations': 7, 'learning_rate': 0.06874886719133032, 'p_miss': 0.20038860885723145}. Best is trial 39 with value: 0.15183403226985853.
running
[I 2024-10-25 23:16:21,700] Trial 46 finished with value: 0.14790182206674102 and parameters: {'model_name': 'VAE', 'batch_size': 142, 'iterations': 1, 'learning_rate': 0.007023583139269328, 'p_miss': 0.22352646198959478}. Best is trial 46 with value: 0.14790182206674102.
running
[I 2024-10-25 23:18:07,135] Trial 14 finished with value: 0.16599481968246604 and parameters: {'model_name': 'VAE', 'batch_size': 749, 'iterations': 28, 'learning_rate': 0.004240218025848345, 'p_miss': 0.051041007568254304}. Best is trial 46 with value: 0.14790182206674102.
running
[I 2024-10-25 23:18:15,970] Trial 37 finished with value: 0.174815816145896 and parameters: {'model_name': 'VAE', 'batch_size': 268, 'iterations': 31, 'learning_rate': 0.005718899073789728, 'p_miss': 0.014430918406063503}. Best is trial 46 with value: 0.14790182206674102.
running
[I 2024-10-25 23:20:48,791] Trial 33 finished with value: 0.18190319056655233 and parameters: {'model_name': 'VAE', 'batch_size': 82, 'iterations': 64, 'learning_rate': 0.034953622549181516, 'p_miss': 0.2952621809353584}. Best is trial 46 with value: 0.14790182206674102.
running
[I 2024-10-25 23:21:05,658] Trial 32 finished with value: 0.18028379946263798 and parameters: {'model_name': 'VAE', 'batch_size': 121, 'iterations': 69, 'learning_rate': 0.005566665830075842, 'p_miss': 0.23540113448606625}. Best is trial 46 with value: 0.14790182206674102.
running
[I 2024-10-25 23:21:10,734] Trial 52 finished with value: 0.15837967179688867 and parameters: {'model_name': 'VAE', 'batch_size': 202, 'iterations': 4, 'learning_rate': 0.00046211247334551966, 'p_miss': 0.23424966290785407}. Best is trial 46 with value: 0.14790182206674102.
running
[I 2024-10-25 23:26:56,015] Trial 5 finished with value: 0.1749679021793586 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 6, 'imputation_order': 'random'}. Best is trial 46 with value: 0.14790182206674102.
running
[I 2024-10-25 23:36:38,875] Trial 24 finished with value: 0.1763135539120956 and parameters: {'model_name': 'VAE', 'batch_size': 713, 'iterations': 306, 'learning_rate': 0.018950910483615947, 'p_miss': 0.026894684237859026}. Best is trial 46 with value: 0.14790182206674102.
running
[I 2024-10-25 23:36:50,911] Trial 56 finished with value: 0.15606709681106873 and parameters: {'model_name': 'VAE', 'batch_size': 20, 'iterations': 3, 'learning_rate': 0.0007288998544104077, 'p_miss': 0.11378402210171085}. Best is trial 46 with value: 0.14790182206674102.
running
[I 2024-10-26 00:09:31,353] Trial 36 finished with value: 0.17809356075986923 and parameters: {'model_name': 'VAE', 'batch_size': 140, 'iterations': 868, 'learning_rate': 0.030752440259136433, 'p_miss': 0.09409290541704207}. Best is trial 46 with value: 0.14790182206674102.
running
[I 2024-10-26 00:09:48,070] Trial 58 finished with value: 0.14972638269785604 and parameters: {'model_name': 'VAE', 'batch_size': 324, 'iterations': 2, 'learning_rate': 0.011613932773759732, 'p_miss': 0.2462624573755617}. Best is trial 46 with value: 0.14790182206674102.
running
[I 2024-10-26 00:10:00,706] Trial 59 finished with value: 0.15101289598195147 and parameters: {'model_name': 'VAE', 'batch_size': 331, 'iterations': 2, 'learning_rate': 0.00027401777211179213, 'p_miss': 0.2547849704411806}. Best is trial 46 with value: 0.14790182206674102.
running
[I 2024-10-26 00:10:18,173] Trial 60 finished with value: 0.15768805689879337 and parameters: {'model_name': 'VAE', 'batch_size': 293, 'iterations': 3, 'learning_rate': 0.0018330124297192916, 'p_miss': 0.2554616604235561}. Best is trial 46 with value: 0.14790182206674102.
running
[I 2024-10-26 00:11:53,582] Trial 13 finished with value: 0.2180242886213252 and parameters: {'model_name': 'VAE', 'batch_size': 3, 'iterations': 1071, 'learning_rate': 0.0809638107102376, 'p_miss': 0.22891692418199686}. Best is trial 46 with value: 0.14790182206674102.
running
[I 2024-10-26 00:11:57,602] Trial 62 finished with value: 0.36929983979533854 and parameters: {'model_name': 'GAIN', 'batch_size': 357, 'hint_rate': 0.11865621712854457, 'alpha': 5, 'iterations': 2, 'learning_rate': 0.013496813462981884, 'p_miss': 0.26647842338409095}. Best is trial 46 with value: 0.14790182206674102.
running
[I 2024-10-26 00:58:54,786] Trial 50 finished with value: 0.17704635001141433 and parameters: {'model_name': 'VAE', 'batch_size': 167, 'iterations': 1570, 'learning_rate': 0.0007354801052065611, 'p_miss': 0.2427206536818699}. Best is trial 46 with value: 0.14790182206674102.
running
[I 2024-10-26 00:59:08,449] Trial 54 finished with value: 0.17629342234608547 and parameters: {'model_name': 'VAE', 'batch_size': 299, 'iterations': 1324, 'learning_rate': 0.0007918064542289299, 'p_miss': 0.23868873467016521}. Best is trial 46 with value: 0.14790182206674102.
running
[I 2024-10-26 00:59:18,747] Trial 64 finished with value: 0.15007857563760302 and parameters: {'model_name': 'VAE', 'batch_size': 479, 'iterations': 6, 'learning_rate': 0.00029524310821306806, 'p_miss': 0.2738586693173543}. Best is trial 46 with value: 0.14790182206674102.
running
[I 2024-10-26 00:59:37,759] Trial 66 finished with value: 0.15436707987846673 and parameters: {'model_name': 'VAE', 'batch_size': 420, 'iterations': 5, 'learning_rate': 0.00021882932569619785, 'p_miss': 0.2744072875536024}. Best is trial 46 with value: 0.14790182206674102.
running
[I 2024-10-26 00:59:38,087] Trial 65 finished with value: 0.15206812058743474 and parameters: {'model_name': 'VAE', 'batch_size': 421, 'iterations': 7, 'learning_rate': 0.00029638304914448617, 'p_miss': 0.27418577559196655}. Best is trial 46 with value: 0.14790182206674102.
running
[I 2024-10-26 00:59:46,707] Trial 67 finished with value: 0.15707730536291498 and parameters: {'model_name': 'VAE', 'batch_size': 420, 'iterations': 2, 'learning_rate': 0.00029587526845663563, 'p_miss': 0.26823163756934726}. Best is trial 46 with value: 0.14790182206674102.
running
[I 2024-10-26 00:59:55,862] Trial 69 finished with value: 0.14851437435722512 and parameters: {'model_name': 'VAE', 'batch_size': 29, 'iterations': 2, 'learning_rate': 0.010585786087311375, 'p_miss': 0.21647336869256736}. Best is trial 46 with value: 0.14790182206674102.
running
[I 2024-10-26 01:00:04,795] Trial 70 finished with value: 0.15299262811165887 and parameters: {'model_name': 'VAE', 'batch_size': 20, 'iterations': 2, 'learning_rate': 0.011007378101557308, 'p_miss': 0.21763448878474137}. Best is trial 46 with value: 0.14790182206674102.
running
[I 2024-10-26 01:00:05,026] Trial 71 finished with value: 0.4575693587888946 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'constant'}. Best is trial 46 with value: 0.14790182206674102.
running
[I 2024-10-26 01:00:41,438] Trial 72 finished with value: 0.1537254538255711 and parameters: {'model_name': 'VAE', 'batch_size': 12, 'iterations': 10, 'learning_rate': 0.002128302479728348, 'p_miss': 0.217891486454105}. Best is trial 46 with value: 0.14790182206674102.
running
[I 2024-10-26 01:00:42,143] Trial 73 finished with value: 0.16465436923933569 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 32, 'weights': 'uniform'}. Best is trial 46 with value: 0.14790182206674102.
running
[I 2024-10-26 01:00:46,290] Trial 74 finished with value: 0.38002787460835413 and parameters: {'model_name': 'GAIN', 'batch_size': 36, 'hint_rate': 0.01358666233440431, 'alpha': 100, 'iterations': 2, 'learning_rate': 0.008825780016898255, 'p_miss': 0.21384972691352794}. Best is trial 46 with value: 0.14790182206674102.
running
[I 2024-10-26 01:00:53,696] Trial 75 finished with value: 0.14883740582320276 and parameters: {'model_name': 'VAE', 'batch_size': 68, 'iterations': 1, 'learning_rate': 0.012959334102684556, 'p_miss': 0.18514261586006484}. Best is trial 46 with value: 0.14790182206674102.
running
[I 2024-10-26 01:01:05,036] Trial 76 finished with value: 0.14847480544650637 and parameters: {'model_name': 'VAE', 'batch_size': 72, 'iterations': 1, 'learning_rate': 0.01898066084280244, 'p_miss': 0.17857689149170677}. Best is trial 46 with value: 0.14790182206674102.
running
[I 2024-10-26 01:01:18,374] Trial 77 finished with value: 0.14491105091447284 and parameters: {'model_name': 'VAE', 'batch_size': 65, 'iterations': 2, 'learning_rate': 0.017408716671603423, 'p_miss': 0.18125872804426835}. Best is trial 77 with value: 0.14491105091447284.
running
[I 2024-10-26 01:01:43,693] Trial 78 finished with value: 0.16829947398969425 and parameters: {'model_name': 'VAE', 'batch_size': 66, 'iterations': 4, 'learning_rate': 0.02073892886926618, 'p_miss': 0.16934845595879677}. Best is trial 77 with value: 0.14491105091447284.
running
[I 2024-10-26 01:01:54,794] Trial 79 finished with value: 0.15430584552353552 and parameters: {'model_name': 'VAE', 'batch_size': 81, 'iterations': 1, 'learning_rate': 0.016967217232610035, 'p_miss': 0.18004225778218733}. Best is trial 77 with value: 0.14491105091447284.
running
[I 2024-10-26 01:06:16,236] Trial 3 finished with value: 0.18526402338269599 and parameters: {'model_name': 'VAE', 'batch_size': 8, 'iterations': 1709, 'learning_rate': 0.0070189755184757955, 'p_miss': 0.015677479452035997}. Best is trial 77 with value: 0.14491105091447284.
running
[I 2024-10-26 01:06:32,989] Trial 81 finished with value: 0.16704400720725548 and parameters: {'model_name': 'VAE', 'batch_size': 32, 'iterations': 3, 'learning_rate': 0.03377040521094091, 'p_miss': 0.1887099325962897}. Best is trial 77 with value: 0.14491105091447284.
running
[I 2024-10-26 01:06:33,493] Trial 82 finished with value: 0.12095624315835518 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 82 with value: 0.12095624315835518.
running
[I 2024-10-26 01:06:33,910] Trial 83 finished with value: 0.12095624315835518 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 82 with value: 0.12095624315835518.
running
[I 2024-10-26 01:06:34,408] Trial 84 finished with value: 0.12095624315835518 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 82 with value: 0.12095624315835518.
running
[I 2024-10-26 01:06:34,851] Trial 85 finished with value: 0.12095624315835518 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 82 with value: 0.12095624315835518.
running
[I 2024-10-26 01:06:35,299] Trial 86 finished with value: 0.12095624315835518 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 82 with value: 0.12095624315835518.
running
[I 2024-10-26 01:06:35,602] Trial 87 finished with value: 0.12095624315835518 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 82 with value: 0.12095624315835518.
running
[I 2024-10-26 01:06:36,153] Trial 88 finished with value: 0.12095624315835518 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 82 with value: 0.12095624315835518.
running
[I 2024-10-26 01:06:36,544] Trial 89 finished with value: 0.12095624315835518 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 82 with value: 0.12095624315835518.
running
[I 2024-10-26 01:06:37,082] Trial 90 finished with value: 0.12095624315835518 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 82 with value: 0.12095624315835518.
running
[I 2024-10-26 01:06:37,586] Trial 91 finished with value: 0.12095624315835518 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 82 with value: 0.12095624315835518.
running
[I 2024-10-26 01:06:38,024] Trial 92 finished with value: 0.12095624315835518 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 82 with value: 0.12095624315835518.
running
[I 2024-10-26 01:06:38,428] Trial 93 finished with value: 0.12095624315835518 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 82 with value: 0.12095624315835518.
running
[I 2024-10-26 01:06:38,777] Trial 94 finished with value: 0.12095624315835518 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 82 with value: 0.12095624315835518.
running
[I 2024-10-26 01:06:39,313] Trial 95 finished with value: 0.12095624315835518 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 82 with value: 0.12095624315835518.
running
[I 2024-10-26 01:06:39,670] Trial 96 finished with value: 0.12095624315835518 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 82 with value: 0.12095624315835518.
running
[I 2024-10-26 01:06:40,097] Trial 97 finished with value: 0.12095624315835518 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 82 with value: 0.12095624315835518.
running
[I 2024-10-26 01:06:40,505] Trial 98 finished with value: 0.12095624315835518 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 82 with value: 0.12095624315835518.
running
[I 2024-10-26 01:06:40,988] Trial 99 finished with value: 0.12095624315835518 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 82 with value: 0.12095624315835518.
running
[I 2024-10-26 01:06:41,393] Trial 100 finished with value: 0.12095624315835518 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 82 with value: 0.12095624315835518.
running
[I 2024-10-26 01:06:41,920] Trial 101 finished with value: 0.12095624315835518 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 82 with value: 0.12095624315835518.
running
[I 2024-10-26 01:06:42,359] Trial 102 finished with value: 0.12095624315835518 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 82 with value: 0.12095624315835518.
running
[I 2024-10-26 01:06:42,817] Trial 103 finished with value: 0.12095624315835518 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 82 with value: 0.12095624315835518.
running
[I 2024-10-26 01:06:43,180] Trial 104 finished with value: 0.12095624315835518 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 82 with value: 0.12095624315835518.
running
[I 2024-10-26 01:06:43,651] Trial 105 finished with value: 0.12095624315835518 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 82 with value: 0.12095624315835518.
running
[I 2024-10-26 01:06:43,948] Trial 106 finished with value: 0.12095624315835518 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 82 with value: 0.12095624315835518.
running
[I 2024-10-26 01:06:44,391] Trial 107 finished with value: 0.12095624315835518 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 82 with value: 0.12095624315835518.
running
[I 2024-10-26 01:06:44,784] Trial 108 finished with value: 0.12095624315835518 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 82 with value: 0.12095624315835518.
running
[I 2024-10-26 01:06:45,209] Trial 109 finished with value: 0.12095624315835518 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 82 with value: 0.12095624315835518.
running
[I 2024-10-26 01:06:45,675] Trial 110 finished with value: 0.12095624315835518 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 82 with value: 0.12095624315835518.
running
[I 2024-10-26 01:06:45,997] Trial 111 finished with value: 0.4575693587888946 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'constant'}. Best is trial 82 with value: 0.12095624315835518.
running
[I 2024-10-26 01:06:46,578] Trial 112 finished with value: 0.12095624315835518 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 82 with value: 0.12095624315835518.
running
[I 2024-10-26 01:06:46,985] Trial 113 finished with value: 0.4575693587888946 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'most_frequent'}. Best is trial 82 with value: 0.12095624315835518.
running
[I 2024-10-26 01:06:47,435] Trial 114 finished with value: 0.12095624315835518 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 82 with value: 0.12095624315835518.
running
[I 2024-10-26 01:06:47,825] Trial 115 finished with value: 0.12095624315835518 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 82 with value: 0.12095624315835518.
running
[I 2024-10-26 01:06:48,314] Trial 116 finished with value: 0.12095624315835518 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 82 with value: 0.12095624315835518.
running
[I 2024-10-26 01:06:48,702] Trial 117 finished with value: 0.12095624315835518 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 82 with value: 0.12095624315835518.
running
[I 2024-10-26 01:06:49,132] Trial 118 finished with value: 0.12095624315835518 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 82 with value: 0.12095624315835518.
running
[I 2024-10-26 01:06:49,703] Trial 119 finished with value: 0.4575693587888946 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'most_frequent'}. Best is trial 82 with value: 0.12095624315835518.
running
[I 2024-10-26 01:06:50,741] Trial 120 finished with value: 0.16543925427855544 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 2309, 'weights': 'uniform'}. Best is trial 82 with value: 0.12095624315835518.
running
[I 2024-10-26 01:06:51,077] Trial 121 finished with value: 0.12095624315835518 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 82 with value: 0.12095624315835518.
running
[I 2024-10-26 01:06:51,470] Trial 122 finished with value: 0.12095624315835518 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 82 with value: 0.12095624315835518.
running
[I 2024-10-26 01:06:51,829] Trial 123 finished with value: 0.12095624315835518 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 82 with value: 0.12095624315835518.
running
[I 2024-10-26 01:06:52,087] Trial 124 finished with value: 0.16543925427855544 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'mean'}. Best is trial 82 with value: 0.12095624315835518.
running
[I 2024-10-26 01:06:52,539] Trial 125 finished with value: 0.12095624315835518 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 82 with value: 0.12095624315835518.
running
[I 2024-10-26 01:06:52,917] Trial 126 finished with value: 0.12095624315835518 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 82 with value: 0.12095624315835518.
running
[I 2024-10-26 01:18:24,311] Trial 48 finished with value: 0.17805853040356315 and parameters: {'model_name': 'VAE', 'batch_size': 120, 'iterations': 2047, 'learning_rate': 0.00074605558149481, 'p_miss': 0.23081046062228477}. Best is trial 82 with value: 0.12095624315835518.
running
[I 2024-10-26 01:41:24,113] Trial 17 finished with value: 0.4141945501640986 and parameters: {'model_name': 'GAIN', 'batch_size': 75, 'hint_rate': 0.1951957930038264, 'alpha': 50, 'iterations': 5743, 'learning_rate': 0.00025443668239103975, 'p_miss': 0.22797809688392373}. Best is trial 82 with value: 0.12095624315835518.
running
[I 2024-10-26 01:41:24,342] Trial 129 finished with value: 0.4575693587888946 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'constant'}. Best is trial 82 with value: 0.12095624315835518.
running
[I 2024-10-26 01:41:24,743] Trial 130 finished with value: 0.12095624315835518 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 82 with value: 0.12095624315835518.
running
[I 2024-10-26 01:41:25,170] Trial 131 finished with value: 0.12095624315835518 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 82 with value: 0.12095624315835518.
running
[I 2024-10-26 01:41:25,486] Trial 132 finished with value: 0.12095624315835518 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 82 with value: 0.12095624315835518.
running
[I 2024-10-26 01:44:00,171] Trial 127 finished with value: inf and parameters: {'model_name': 'GAIN', 'batch_size': 1, 'hint_rate': 0.9175067051292698, 'alpha': 7, 'iterations': 7093, 'learning_rate': 0.05043179548853564, 'p_miss': 0.042016663828329276}. Best is trial 82 with value: 0.12095624315835518.
running
[I 2024-10-26 01:55:05,681] Trial 134 finished with value: 0.1850070182789656 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'constant', 'n_nearest_features': 4, 'imputation_order': 'roman'}. Best is trial 82 with value: 0.12095624315835518.
running
[I 2024-10-26 01:55:05,981] Trial 135 finished with value: 0.12095624315835518 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 82 with value: 0.12095624315835518.
running
[I 2024-10-26 01:55:06,346] Trial 136 finished with value: 0.12095624315835518 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 82 with value: 0.12095624315835518.
running
[I 2024-10-26 01:55:06,730] Trial 137 finished with value: 0.12095624315835518 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 82 with value: 0.12095624315835518.
running
[I 2024-10-26 01:55:07,231] Trial 138 finished with value: 0.12095624315835518 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 82 with value: 0.12095624315835518.
running
[I 2024-10-26 01:55:07,683] Trial 139 finished with value: 0.12095624315835518 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 82 with value: 0.12095624315835518.
running
[I 2024-10-26 01:55:08,003] Trial 140 finished with value: 0.16543925427855544 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'mean'}. Best is trial 82 with value: 0.12095624315835518.
running
[I 2024-10-26 01:55:08,952] Trial 141 finished with value: 0.16901065734384071 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 104, 'weights': 'uniform'}. Best is trial 82 with value: 0.12095624315835518.
running
[I 2024-10-26 01:55:09,380] Trial 142 finished with value: 0.12095624315835518 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 82 with value: 0.12095624315835518.
running
[I 2024-10-26 01:55:09,707] Trial 143 finished with value: 0.12095624315835518 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 82 with value: 0.12095624315835518.
running
[I 2024-10-26 01:55:10,150] Trial 144 finished with value: 0.12095624315835518 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 82 with value: 0.12095624315835518.
running
[I 2024-10-26 01:55:10,625] Trial 145 finished with value: 0.12095624315835518 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 82 with value: 0.12095624315835518.
running
[I 2024-10-26 01:55:10,963] Trial 146 finished with value: 0.12095624315835518 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 82 with value: 0.12095624315835518.
running
[I 2024-10-26 01:55:11,366] Trial 147 finished with value: 0.12095624315835518 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 82 with value: 0.12095624315835518.
running
[I 2024-10-26 01:55:11,680] Trial 148 finished with value: 0.12095624315835518 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 82 with value: 0.12095624315835518.
running
[I 2024-10-26 01:55:12,086] Trial 149 finished with value: 0.12095624315835518 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 82 with value: 0.12095624315835518.
running
[I 2024-10-26 01:55:12,577] Trial 150 finished with value: 0.12095624315835518 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 82 with value: 0.12095624315835518.
running
[I 2024-10-26 01:55:12,999] Trial 151 finished with value: 0.12095624315835518 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 82 with value: 0.12095624315835518.
running
[I 2024-10-26 01:55:13,399] Trial 152 finished with value: 0.4575693587888946 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'most_frequent'}. Best is trial 82 with value: 0.12095624315835518.
running
[I 2024-10-26 01:55:37,488] Trial 49 finished with value: 0.17635553511359708 and parameters: {'model_name': 'VAE', 'batch_size': 194, 'iterations': 2221, 'learning_rate': 0.0006781359215690229, 'p_miss': 0.23513474812553814}. Best is trial 82 with value: 0.12095624315835518.
running
[I 2024-10-26 01:55:37,894] Trial 154 finished with value: 0.12095624315835518 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 82 with value: 0.12095624315835518.
running
[I 2024-10-26 01:55:41,755] Trial 155 finished with value: 0.1617958511085682 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Ridge', 'initial_strategy': 'most_frequent', 'n_nearest_features': 5, 'imputation_order': 'arabic'}. Best is trial 82 with value: 0.12095624315835518.
running
[I 2024-10-26 01:55:42,261] Trial 156 finished with value: 0.12095624315835518 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 82 with value: 0.12095624315835518.
running
[I 2024-10-26 01:55:42,530] Trial 157 finished with value: 0.12095624315835518 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 82 with value: 0.12095624315835518.
running
[I 2024-10-26 01:56:09,910] Trial 153 finished with value: inf and parameters: {'model_name': 'GAIN', 'batch_size': 3, 'hint_rate': 0.46033955229931983, 'alpha': 99, 'iterations': 217, 'learning_rate': 0.002519389898250704, 'p_miss': 0.13808684448504813}. Best is trial 82 with value: 0.12095624315835518.
running
[I 2024-10-26 01:56:10,394] Trial 159 finished with value: 0.12095624315835518 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 82 with value: 0.12095624315835518.
running
[I 2024-10-26 01:56:10,726] Trial 160 finished with value: 0.4575693587888946 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'constant'}. Best is trial 82 with value: 0.12095624315835518.
running
[I 2024-10-26 01:56:11,068] Trial 161 finished with value: 0.12095624315835518 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 82 with value: 0.12095624315835518.
running
[I 2024-10-26 01:56:11,527] Trial 162 finished with value: 0.12095624315835518 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 82 with value: 0.12095624315835518.
running
[I 2024-10-26 01:56:11,881] Trial 163 finished with value: 0.12095624315835518 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 82 with value: 0.12095624315835518.
running
[I 2024-10-26 01:56:12,304] Trial 164 finished with value: 0.12095624315835518 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 82 with value: 0.12095624315835518.
running
[I 2024-10-26 01:56:13,177] Trial 165 finished with value: 0.16816537813160884 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 2144, 'weights': 'distance'}. Best is trial 82 with value: 0.12095624315835518.
running
[I 2024-10-26 01:56:13,645] Trial 166 finished with value: 0.12095624315835518 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 82 with value: 0.12095624315835518.
running
[I 2024-10-26 01:56:14,074] Trial 167 finished with value: 0.12095624315835518 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 82 with value: 0.12095624315835518.
running
[I 2024-10-26 01:56:14,522] Trial 168 finished with value: 0.12095624315835518 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 82 with value: 0.12095624315835518.
running
[I 2024-10-26 01:56:14,855] Trial 169 finished with value: 0.12095624315835518 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 82 with value: 0.12095624315835518.
running
[I 2024-10-26 01:56:15,385] Trial 170 finished with value: 0.12095624315835518 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 82 with value: 0.12095624315835518.
running
[I 2024-10-26 01:56:15,754] Trial 171 finished with value: 0.16543925427855544 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'mean'}. Best is trial 82 with value: 0.12095624315835518.
running
[I 2024-10-26 01:56:16,129] Trial 172 finished with value: 0.12095624315835518 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 82 with value: 0.12095624315835518.
running
[I 2024-10-26 01:56:16,390] Trial 173 finished with value: 0.12095624315835518 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 82 with value: 0.12095624315835518.
running
[I 2024-10-26 01:56:16,662] Trial 174 finished with value: 0.12095624315835518 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 82 with value: 0.12095624315835518.
running
[I 2024-10-26 01:56:17,114] Trial 175 finished with value: 0.4575693587888946 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'most_frequent'}. Best is trial 82 with value: 0.12095624315835518.
running
[I 2024-10-26 01:56:17,519] Trial 176 finished with value: 0.12095624315835518 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 82 with value: 0.12095624315835518.
running
[I 2024-10-26 01:56:17,891] Trial 177 finished with value: 0.12095624315835518 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 82 with value: 0.12095624315835518.
running
[I 2024-10-26 01:56:18,448] Trial 178 finished with value: 0.12095624315835518 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 82 with value: 0.12095624315835518.
running
[I 2024-10-26 01:56:18,817] Trial 179 finished with value: 0.12095624315835518 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 82 with value: 0.12095624315835518.
running
[I 2024-10-26 01:56:19,198] Trial 180 finished with value: 0.12095624315835518 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 82 with value: 0.12095624315835518.
running
[I 2024-10-26 01:56:19,474] Trial 181 finished with value: 0.4575693587888946 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'constant'}. Best is trial 82 with value: 0.12095624315835518.
running
[I 2024-10-26 01:56:20,040] Trial 182 finished with value: 0.12095624315835518 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 82 with value: 0.12095624315835518.
running
[I 2024-10-26 01:56:50,750] Trial 158 finished with value: inf and parameters: {'model_name': 'GAIN', 'batch_size': 3, 'hint_rate': 0.5151070721886807, 'alpha': 97, 'iterations': 217, 'learning_rate': 0.001223539223287943, 'p_miss': 0.08021363866801955}. Best is trial 82 with value: 0.12095624315835518.
running
[I 2024-10-26 01:57:39,215] Trial 183 finished with value: inf and parameters: {'model_name': 'GAIN', 'batch_size': 1, 'hint_rate': 0.6287399861700071, 'alpha': 74, 'iterations': 247, 'learning_rate': 0.001396965797801434, 'p_miss': 0.07749631817762104}. Best is trial 82 with value: 0.12095624315835518.
running
[I 2024-10-26 01:57:39,784] Trial 185 finished with value: 0.12095624315835518 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 82 with value: 0.12095624315835518.
running
[I 2024-10-26 01:57:40,086] Trial 186 finished with value: 0.12095624315835518 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 82 with value: 0.12095624315835518.
running
[I 2024-10-26 01:57:40,540] Trial 187 finished with value: 0.12095624315835518 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 82 with value: 0.12095624315835518.
running
[I 2024-10-26 01:57:40,920] Trial 188 finished with value: 0.12095624315835518 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 82 with value: 0.12095624315835518.
running
[I 2024-10-26 01:57:41,395] Trial 189 finished with value: 0.12095624315835518 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 82 with value: 0.12095624315835518.
running
[I 2024-10-26 02:01:08,618] Trial 47 finished with value: 0.178989992547336 and parameters: {'model_name': 'VAE', 'batch_size': 116, 'iterations': 2862, 'learning_rate': 0.004919364825984128, 'p_miss': 0.21954209856909784}. Best is trial 82 with value: 0.12095624315835518.
running
[I 2024-10-26 02:01:09,011] Trial 191 finished with value: 0.12095624315835518 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 82 with value: 0.12095624315835518.
running
[I 2024-10-26 02:01:09,491] Trial 192 finished with value: 0.12095624315835518 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 82 with value: 0.12095624315835518.
running
[I 2024-10-26 02:01:09,966] Trial 193 finished with value: 0.12095624315835518 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 82 with value: 0.12095624315835518.
running
[I 2024-10-26 02:07:34,387] Trial 184 finished with value: 0.1882402260104269 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'constant', 'n_nearest_features': 3, 'imputation_order': 'roman'}. Best is trial 82 with value: 0.12095624315835518.
running
[I 2024-10-26 02:07:34,793] Trial 195 finished with value: 0.12095624315835518 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 82 with value: 0.12095624315835518.
running
[I 2024-10-26 02:07:35,180] Trial 196 finished with value: 0.12095624315835518 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 82 with value: 0.12095624315835518.
running
[I 2024-10-26 02:07:35,539] Trial 197 finished with value: 0.12095624315835518 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 82 with value: 0.12095624315835518.
running
[I 2024-10-26 02:07:35,847] Trial 198 finished with value: 0.12095624315835518 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 82 with value: 0.12095624315835518.
running
[I 2024-10-26 02:07:36,289] Trial 199 finished with value: 0.12095624315835518 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 82 with value: 0.12095624315835518.
[I 2024-10-26 02:08:34,285] Trial 190 finished with value: 0.18760062726599827 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'constant', 'n_nearest_features': 3, 'imputation_order': 'roman'}. Best is trial 82 with value: 0.12095624315835518.
[I 2024-10-26 02:10:12,398] Trial 128 finished with value: inf and parameters: {'model_name': 'GAIN', 'batch_size': 1, 'hint_rate': 0.981158702098452, 'alpha': 2, 'iterations': 9633, 'learning_rate': 0.05095354324992236, 'p_miss': 0.05830809571561443}. Best is trial 82 with value: 0.12095624315835518.
[I 2024-10-26 02:11:26,921] Trial 194 finished with value: 0.1859242944968083 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'constant', 'n_nearest_features': 3, 'imputation_order': 'descending'}. Best is trial 82 with value: 0.12095624315835518.
[I 2024-10-26 02:23:25,037] Trial 133 finished with value: inf and parameters: {'model_name': 'GAIN', 'batch_size': 1, 'hint_rate': 0.934117550451218, 'alpha': 4, 'iterations': 9590, 'learning_rate': 0.001667470040637933, 'p_miss': 0.07300103129243389}. Best is trial 82 with value: 0.12095624315835518.
[I 2024-10-26 02:25:22,010] Trial 53 finished with value: 0.1776430342607705 and parameters: {'model_name': 'VAE', 'batch_size': 287, 'iterations': 2879, 'learning_rate': 0.00047987834327177807, 'p_miss': 0.2424983274932918}. Best is trial 82 with value: 0.12095624315835518.
[I 2024-10-26 02:40:36,641] Trial 61 finished with value: 0.41155318507393873 and parameters: {'model_name': 'GAIN', 'batch_size': 344, 'hint_rate': 0.03491548732648703, 'alpha': 2, 'iterations': 5900, 'learning_rate': 0.0003201491201047477, 'p_miss': 0.26035259421906853}. Best is trial 82 with value: 0.12095624315835518.
[I 2024-10-26 02:54:14,781] Trial 21 finished with value: 0.2230888039508902 and parameters: {'model_name': 'VAE', 'batch_size': 1, 'iterations': 4212, 'learning_rate': 0.00163052265104753, 'p_miss': 0.018393700983589348}. Best is trial 82 with value: 0.12095624315835518.
[I 2024-10-26 03:09:53,661] Trial 55 finished with value: 0.17666766734849843 and parameters: {'model_name': 'VAE', 'batch_size': 304, 'iterations': 3990, 'learning_rate': 0.0007591633838588, 'p_miss': 0.23351589832667063}. Best is trial 82 with value: 0.12095624315835518.
[I 2024-10-26 03:16:49,518] Trial 57 finished with value: 0.17720267738786308 and parameters: {'model_name': 'VAE', 'batch_size': 287, 'iterations': 3714, 'learning_rate': 0.01096727081968616, 'p_miss': 0.24351056134966215}. Best is trial 82 with value: 0.12095624315835518.
[I 2024-10-26 03:30:50,615] Trial 51 finished with value: 0.17887913445265177 and parameters: {'model_name': 'VAE', 'batch_size': 116, 'iterations': 5641, 'learning_rate': 0.000527122116396305, 'p_miss': 0.23064432062019666}. Best is trial 82 with value: 0.12095624315835518.
[I 2024-10-26 03:33:45,848] Trial 45 finished with value: 0.17519462736051403 and parameters: {'model_name': 'VAE', 'batch_size': 968, 'iterations': 4758, 'learning_rate': 0.0003136991763901097, 'p_miss': 0.2857400211619596}. Best is trial 82 with value: 0.12095624315835518.
[I 2024-10-26 03:37:36,571] Trial 44 finished with value: 0.1766237032914269 and parameters: {'model_name': 'VAE', 'batch_size': 932, 'iterations': 5395, 'learning_rate': 0.00010828659622338545, 'p_miss': 0.29054222936368856}. Best is trial 82 with value: 0.12095624315835518.
[I 2024-10-26 03:39:48,633] Trial 80 finished with value: 0.18019421784756434 and parameters: {'model_name': 'VAE', 'batch_size': 37, 'iterations': 5226, 'learning_rate': 0.02499618551765158, 'p_miss': 0.19210417555562545}. Best is trial 82 with value: 0.12095624315835518.
[I 2024-10-26 03:48:34,878] Trial 68 finished with value: 0.17533535700390315 and parameters: {'model_name': 'VAE', 'batch_size': 449, 'iterations': 8072, 'learning_rate': 0.0019922010796518015, 'p_miss': 0.21361022733091484}. Best is trial 82 with value: 0.12095624315835518.
[I 2024-10-26 03:49:00,635] Trial 63 finished with value: 0.17689376461271705 and parameters: {'model_name': 'VAE', 'batch_size': 371, 'iterations': 8828, 'learning_rate': 0.0003283696601723884, 'p_miss': 0.2675797530548994}. Best is trial 82 with value: 0.12095624315835518.
fit
auto fit
auto transform
0    0
1    0
2    0
3    0
4    0
5    0
dtype: int64
0    0
1    0
2    0
3    0
4    0
5    0
dtype: int64
0.12095624315835518
{'model_name': 'SimpleImputer', 'strategy': 'median'}
running experiment 2/3 - Does reconstruction give good automl predictions
Start est fit
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
  0%|          | 0/25 [00:00<?, ?it/s]Generation:   0%|          | 0/25 [00:00<?, ?it/s]Generation:  1
Best f1_score score: 0.7508747945167406
Generation:   4%|▍         | 1/25 [00:07<03:02,  7.59s/it]Generation:  2
Best f1_score score: 0.7508747945167406
Generation:   8%|▊         | 2/25 [00:13<02:37,  6.85s/it]Generation:  3
Best f1_score score: 0.7516446577105624
Generation:  12%|█▏        | 3/25 [00:22<02:45,  7.53s/it]Generation:  4
Best f1_score score: 0.7516446577105624
Generation:  16%|█▌        | 4/25 [00:28<02:28,  7.05s/it]Generation:  5
Best f1_score score: 0.7516446577105624
Generation:  20%|██        | 5/25 [00:38<02:44,  8.21s/it]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155467f2f550> 
 The 'min_samples_split' parameter of DecisionTreeClassifier must be an int in the range [2, inf) or a float in the range (0.0, 1.0]. Got 1 instead. 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1466, in wrapper
    estimator._validate_params()
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 666, in _validate_params
    validate_parameter_constraints(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/_param_validation.py", line 95, in validate_parameter_constraints
    raise InvalidParameterError(
sklearn.utils._param_validation.InvalidParameterError: The 'min_samples_split' parameter of DecisionTreeClassifier must be an int in the range [2, inf) or a float in the range (0.0, 1.0]. Got 1 instead.

Generation:  6
Best f1_score score: 0.7516446577105624
Generation:  24%|██▍       | 6/25 [00:51<03:01,  9.57s/it]Generation:  7
Best f1_score score: 0.7516446577105624
Generation:  28%|██▊       | 7/25 [01:00<02:51,  9.51s/it]Generation:  8
Best f1_score score: 0.7516446577105624
Generation:  32%|███▏      | 8/25 [01:09<02:37,  9.25s/it]Generation:  9
Best f1_score score: 0.7516446577105624
Generation:  36%|███▌      | 9/25 [01:41<04:23, 16.47s/it]Generation:  10
Best f1_score score: 0.7558853668267054
Generation:  40%|████      | 10/25 [01:55<03:53, 15.57s/it]Generation:  11
Best f1_score score: 0.7558853668267054
Generation:  44%|████▍     | 11/25 [02:41<05:48, 24.91s/it]Generation:  12
Best f1_score score: 0.7558853668267054
Generation:  48%|████▊     | 12/25 [03:50<08:20, 38.48s/it]Generation:  13
Best f1_score score: 0.7558853668267054
Generation:  52%|█████▏    | 13/25 [04:03<06:09, 30.83s/it]Generation:  14
Best f1_score score: 0.7558853668267054
Generation:  56%|█████▌    | 14/25 [04:17<04:41, 25.63s/it]Generation:  15
Best f1_score score: 0.7558853668267054
Generation:  60%|██████    | 15/25 [04:30<03:38, 21.84s/it]Generation:  16
Best f1_score score: 0.7558853668267054
Generation:  64%|██████▍   | 16/25 [05:23<04:41, 31.33s/it]Generation:  17
Best f1_score score: 0.7558853668267054
Generation:  68%|██████▊   | 17/25 [05:38<03:30, 26.30s/it]Generation:  18
Best f1_score score: 0.7558853668267054
Generation:  72%|███████▏  | 18/25 [05:51<02:36, 22.36s/it]Generation:  19
Best f1_score score: 0.7558853668267054
Generation:  76%|███████▌  | 19/25 [06:09<02:05, 20.92s/it]Generation:  20
Best f1_score score: 0.7558853668267054
Generation:  80%|████████  | 20/25 [06:41<02:01, 24.37s/it]Generation:  21
Best f1_score score: 0.7558853668267054
Generation:  84%|████████▍ | 21/25 [07:05<01:36, 24.09s/it]Generation:  22
Best f1_score score: 0.7558853668267054
Generation:  88%|████████▊ | 22/25 [07:42<01:24, 28.09s/it]Generation:  23
Best f1_score score: 0.7558853668267054
Generation:  92%|█████████▏| 23/25 [08:10<00:56, 28.03s/it]Generation:  24
Best f1_score score: 0.7558853668267054
Generation:  96%|█████████▌| 24/25 [08:29<00:25, 25.23s/it]Generation:  25
Best f1_score score: 0.7567401432856566
Generation: 100%|██████████| 25/25 [08:48<00:00, 23.35s/it]Generation: 100%|██████████| 25/25 [08:51<00:00, 21.26s/it]
2024-10-26 03:58:10,102 - distributed.scheduler - ERROR - Removing worker 'tcp://127.0.0.1:43847' caused the cluster to lose scattered data, which can't be recovered: {'ndarray-2c1f2307bf04bd95070931b0f72e21a7', 'ndarray-bc1ee22df90b340c13f4c4b70d48b351'} (stimulus_id='handle-worker-cleanup-1729940290.1025214')
2024-10-26 03:58:14,071 - distributed.nanny - WARNING - Worker process still alive after 4.0 seconds, killing
2024-10-26 03:58:14,071 - distributed.nanny - WARNING - Worker process still alive after 4.0 seconds, killing
2024-10-26 03:58:14,071 - distributed.nanny - WARNING - Worker process still alive after 4.0 seconds, killing
2024-10-26 03:58:14,071 - distributed.nanny - WARNING - Worker process still alive after 4.0 seconds, killing
2024-10-26 03:58:14,072 - distributed.nanny - WARNING - Worker process still alive after 4.0 seconds, killing
2024-10-26 03:58:14,072 - distributed.nanny - WARNING - Worker process still alive after 4.0 seconds, killing
2024-10-26 03:58:14,073 - distributed.nanny - WARNING - Worker process still alive after 4.0 seconds, killing
2024-10-26 03:58:14,074 - distributed.nanny - WARNING - Worker process still alive after 4.0 seconds, killing
2024-10-26 03:58:14,075 - distributed.nanny - WARNING - Worker process still alive after 4.0 seconds, killing
2024-10-26 03:58:14,075 - distributed.nanny - WARNING - Worker process still alive after 4.0 seconds, killing
2024-10-26 03:58:14,075 - distributed.nanny - WARNING - Worker process still alive after 4.0 seconds, killing
2024-10-26 03:58:14,077 - distributed.nanny - WARNING - Worker process still alive after 4.0 seconds, killing
2024-10-26 03:58:14,077 - distributed.nanny - WARNING - Worker process still alive after 4.0 seconds, killing
2024-10-26 03:58:14,077 - distributed.nanny - WARNING - Worker process still alive after 4.0 seconds, killing
2024-10-26 03:58:14,078 - distributed.nanny - WARNING - Worker process still alive after 4.0 seconds, killing
2024-10-26 03:58:14,078 - distributed.nanny - WARNING - Worker process still alive after 4.0 seconds, killing
Fitted
Pipeline(steps=[('baggingclassifier',
                 BaggingClassifier(bootstrap=False,
                                   max_features=0.8386332225959,
                                   max_samples=0.3036790081688, n_estimators=75,
                                   n_jobs=1))])
score start
train score: {'auroc': 0.9838995644276538, 'accuracy': 0.9251509054325956, 'balanced_accuracy': 0.9251157596345442, 'logloss': 0.3103075965963156, 'f1': 0.925140710393134}
original test score: {'auroc': 0.8903031681694104, 'accuracy': 0.8086816720257235, 'balanced_accuracy': 0.8080279593018447, 'logloss': 0.44363229626039485, 'f1': 0.8075830246311821}
imputed test score: {'auroc': 0.8205341632889405, 'accuracy': 0.7395498392282959, 'balanced_accuracy': 0.7394635619157912, 'logloss': 0.5232444865408429, 'f1': 0.7394825018615041}
score end
check intended
EXP2 Finished
running experiment 3/3 - What is the best automl settings?
<tpot2.search_spaces.pipelines.sequential.SequentialPipeline object at 0x155435014640>
Start tpot fit
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
  0%|          | 0/25 [00:00<?, ?it/s]Generation:   0%|          | 0/25 [00:00<?, ?it/s]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155474cd53c0> 
 Input X contains NaN.
SGDClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/linear_model/_stochastic_gradient.py", line 938, in fit
    return self._fit(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/linear_model/_stochastic_gradient.py", line 725, in _fit
    self._partial_fit(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/linear_model/_stochastic_gradient.py", line 596, in _partial_fit
    X, y = self._validate_data(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 650, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1301, in check_X_y
    X = check_array(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1064, in check_array
    _assert_all_finite(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 123, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 172, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
SGDClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Generation:  1
Best f1_score score: 0.7902339286891191
Generation:   4%|▍         | 1/25 [01:35<38:16, 95.68s/it]Generation:  2
Best f1_score score: 0.7902339286891191
Generation:   8%|▊         | 2/25 [04:16<51:20, 133.92s/it]Generation:  3
Best f1_score score: 0.7902339286891191
Generation:  12%|█▏        | 3/25 [07:01<54:15, 147.98s/it]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x1554745be560> 
 Input X contains NaN.
ExtraTreesClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 377, in fit
    estimator._compute_missing_values_in_feature_mask(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/tree/_classes.py", line 214, in _compute_missing_values_in_feature_mask
    assert_all_finite(X, **common_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 213, in assert_all_finite
    _assert_all_finite(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 123, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 172, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
ExtraTreesClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Generation:  4
Best f1_score score: 0.7902339286891191
Generation:  16%|█▌        | 4/25 [09:49<54:33, 155.89s/it]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155474d79510> 
 Input X contains NaN.
LogisticRegression does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py", line 1223, in fit
    X, y = self._validate_data(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 650, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1301, in check_X_y
    X = check_array(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1064, in check_array
    _assert_all_finite(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 123, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 172, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
LogisticRegression does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Generation:  5
Best f1_score score: 0.7926720264119889
Generation:  20%|██        | 5/25 [12:37<53:25, 160.30s/it]Generation:  6
Best f1_score score: 0.7926720264119889
Generation:  24%|██▍       | 6/25 [15:52<54:30, 172.12s/it]Generation:  7
Best f1_score score: 0.7948190964382916
Generation:  28%|██▊       | 7/25 [18:36<50:49, 169.43s/it]Generation:  8
Best f1_score score: 0.7948190964382916
Generation:  32%|███▏      | 8/25 [21:22<47:41, 168.31s/it]Generation:  9
Best f1_score score: 0.7948190964382916
Generation:  36%|███▌      | 9/25 [24:10<44:53, 168.32s/it]Generation:  10
Best f1_score score: 0.7948190964382916
Generation:  40%|████      | 10/25 [26:55<41:48, 167.24s/it]Generation:  11
Best f1_score score: 0.7948190964382916
Generation:  44%|████▍     | 11/25 [29:41<38:56, 166.87s/it]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155452ec15a0> 
 Input X contains NaN.
LogisticRegression does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py", line 1223, in fit
    X, y = self._validate_data(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 650, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1301, in check_X_y
    X = check_array(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1064, in check_array
    _assert_all_finite(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 123, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 172, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
LogisticRegression does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Generation:  12
Best f1_score score: 0.7948190964382916
Generation:  48%|████▊     | 12/25 [32:26<36:03, 166.44s/it]Generation:  13
Best f1_score score: 0.7949260567999594
Generation:  52%|█████▏    | 13/25 [35:12<33:15, 166.31s/it]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x15545ff69cc0> 
 Input X contains NaN.
LogisticRegression does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py", line 1223, in fit
    X, y = self._validate_data(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 650, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1301, in check_X_y
    X = check_array(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1064, in check_array
    _assert_all_finite(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 123, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 172, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
LogisticRegression does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Generation:  14
Best f1_score score: 0.7987788842501411
Generation:  56%|█████▌    | 14/25 [37:58<30:28, 166.22s/it]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x15543fa853c0> 
 Input X contains NaN.
LogisticRegression does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py", line 1223, in fit
    X, y = self._validate_data(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 650, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1301, in check_X_y
    X = check_array(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1064, in check_array
    _assert_all_finite(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 123, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 172, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
LogisticRegression does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Generation:  15
Best f1_score score: 0.8021453124336142
Generation:  60%|██████    | 15/25 [40:49<27:55, 167.53s/it]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155452d99780> 
 Input X contains NaN.
LogisticRegression does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py", line 1223, in fit
    X, y = self._validate_data(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 650, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1301, in check_X_y
    X = check_array(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1064, in check_array
    _assert_all_finite(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 123, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 172, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
LogisticRegression does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Generation:  16
Best f1_score score: 0.8021453124336142
Generation:  64%|██████▍   | 16/25 [43:35<25:03, 167.10s/it]Generation:  17
Best f1_score score: 0.8021453124336142
Generation:  68%|██████▊   | 17/25 [46:24<22:21, 167.74s/it]Generation:  18
Best f1_score score: 0.8021453124336142
Generation:  72%|███████▏  | 18/25 [49:13<19:35, 167.94s/it]Generation:  19
Best f1_score score: 0.8021453124336142
Generation:  76%|███████▌  | 19/25 [52:03<16:51, 168.65s/it]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x15545fbebac0> 
 l1_ratio must be specified when penalty is elasticnet. 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py", line 1204, in fit
    raise ValueError("l1_ratio must be specified when penalty is elasticnet.")
ValueError: l1_ratio must be specified when penalty is elasticnet.

Generation:  20
Best f1_score score: 0.8021453124336142
Generation:  80%|████████  | 20/25 [56:16<16:10, 194.01s/it]Generation:  21
Best f1_score score: 0.8021453124336142
Generation:  84%|████████▍ | 21/25 [59:04<12:24, 186.12s/it]Generation:  22
Best f1_score score: 0.8021453124336142
Generation:  88%|████████▊ | 22/25 [1:01:57<09:06, 182.21s/it]Generation:  23
Best f1_score score: 0.8021453124336142
Generation:  92%|█████████▏| 23/25 [1:04:52<06:00, 180.21s/it]Generation:  24
Best f1_score score: 0.8021453124336142
Generation:  96%|█████████▌| 24/25 [1:07:44<02:57, 177.59s/it]Generation:  25
Best f1_score score: 0.8033634521050887
Generation: 100%|██████████| 25/25 [1:10:35<00:00, 175.67s/it]Generation: 100%|██████████| 25/25 [1:10:35<00:00, 169.42s/it]
2024-10-26 05:09:40,699 - distributed.scheduler - ERROR - Removing worker 'tcp://127.0.0.1:43153' caused the cluster to lose scattered data, which can't be recovered: {'DataFrame-508f46e01cd8a1ca730f88d0c472918d', 'ndarray-bc1ee22df90b340c13f4c4b70d48b351'} (stimulus_id='handle-worker-cleanup-1729944580.6992657')
2024-10-26 05:09:44,686 - distributed.nanny - WARNING - Worker process still alive after 4.0 seconds, killing
2024-10-26 05:09:44,687 - distributed.nanny - WARNING - Worker process still alive after 4.0 seconds, killing
2024-10-26 05:09:44,687 - distributed.nanny - WARNING - Worker process still alive after 4.0 seconds, killing
2024-10-26 05:09:44,687 - distributed.nanny - WARNING - Worker process still alive after 4.0 seconds, killing
2024-10-26 05:09:44,688 - distributed.nanny - WARNING - Worker process still alive after 4.0 seconds, killing
2024-10-26 05:09:44,688 - distributed.nanny - WARNING - Worker process still alive after 4.0 seconds, killing
2024-10-26 05:09:44,688 - distributed.nanny - WARNING - Worker process still alive after 4.0 seconds, killing
2024-10-26 05:09:44,689 - distributed.nanny - WARNING - Worker process still alive after 4.0 seconds, killing
2024-10-26 05:09:44,689 - distributed.nanny - WARNING - Worker process still alive after 4.0 seconds, killing
2024-10-26 05:09:44,690 - distributed.nanny - WARNING - Worker process still alive after 4.0 seconds, killing
2024-10-26 05:09:44,690 - distributed.nanny - WARNING - Worker process still alive after 4.0 seconds, killing
2024-10-26 05:09:44,690 - distributed.nanny - WARNING - Worker process still alive after 4.0 seconds, killing
2024-10-26 05:09:44,691 - distributed.nanny - WARNING - Worker process still alive after 4.0 seconds, killing
2024-10-26 05:09:44,691 - distributed.nanny - WARNING - Worker process still alive after 4.0 seconds, killing
2024-10-26 05:09:44,691 - distributed.nanny - WARNING - Worker process still alive after 4.0 seconds, killing
2024-10-26 05:09:44,693 - distributed.nanny - WARNING - Worker process still alive after 4.0 seconds, killing
Fitted
Pipeline(steps=[('iterativeimputer',
                 IterativeImputer(estimator=RandomForestRegressor(),
                                  imputation_order='roman',
                                  initial_strategy='median',
                                  n_nearest_features=51)),
                ('logisticregression',
                 LogisticRegression(C=5707.015047347661,
                                    class_weight='balanced',
                                    l1_ratio=0.9123931256522, max_iter=1000,
                                    n_jobs=1, penalty='elasticnet',
                                    solver='saga'))])
transform worked
try transform
transform worked
score start
train score: {'auroc': 0.8609818774956015, 'accuracy': 0.7939637826961771, 'balanced_accuracy': 0.7937240399140775, 'logloss': 0.47033633072731645, 'f1': 0.7936748042998254}
test score: {'auroc': 0.8573186367772355, 'accuracy': 0.7877813504823151, 'balanced_accuracy': 0.7872652824882125, 'logloss': 0.4714546179347305, 'f1': 0.786986301369863}
original test score: {'auroc': 0.9071780130697329, 'accuracy': 0.8344051446945338, 'balanced_accuracy': 0.8338779055339565, 'logloss': 0.39019585723682787, 'f1': 0.8337515537298599}
score end
737
lvl
0.3
type
MCAR
num_run
2
class_full
finished
all finished
full run takes
5.919568428993225
hours
DONE
