Run: 28
/cm/local/apps/slurm/var/spool/job1011340/slurm_script: line 26: 
pip install -e tpot2
pip install -r tpot2/ImputerExperiments/requirements_.txt
: No such file or directory
RunStart
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
starting loops
../data/c/310/310.pkl
working on 
../data/c/310/class_full_MCAR_0.5_2
4.4325032234191895
running experiment 1/3 - Does large hyperparameter space improve reconstruction accuracy over simple
[I 2024-10-22 19:09:42,718] A new study created in memory with name: no-name-a3bbe4aa-f634-4911-aeb2-28f22ce2f506
running
running
running
running
running
running
running
running
running
running
running
running
running
running
running
running
[I 2024-10-22 19:09:42,922] Trial 5 finished with value: 0.1635562452595643 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'constant'}. Best is trial 5 with value: 0.1635562452595643.
running
[I 2024-10-22 19:09:43,139] Trial 4 finished with value: 0.1635562452595643 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 5 with value: 0.1635562452595643.
running
[I 2024-10-22 19:09:43,358] Trial 17 finished with value: 0.1635562452595643 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'constant'}. Best is trial 5 with value: 0.1635562452595643.
running
[I 2024-10-22 19:09:44,994] Trial 3 finished with value: 0.12201178686380579 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Ridge', 'initial_strategy': 'median', 'n_nearest_features': 5, 'imputation_order': 'ascending'}. Best is trial 3 with value: 0.12201178686380579.
running
[I 2024-10-22 19:09:45,249] Trial 19 finished with value: 0.13535259621871726 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'mean'}. Best is trial 3 with value: 0.12201178686380579.
running
[I 2024-10-22 19:09:46,439] Trial 12 finished with value: 0.13410912668483815 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3003, 'weights': 'uniform'}. Best is trial 3 with value: 0.12201178686380579.
running
[I 2024-10-22 19:09:46,581] Trial 9 finished with value: 0.1485854011043322 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 1399, 'weights': 'distance'}. Best is trial 3 with value: 0.12201178686380579.
running
[I 2024-10-22 19:09:48,019] Trial 14 finished with value: 0.14996995953460773 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3577, 'weights': 'distance'}. Best is trial 3 with value: 0.12201178686380579.
[I 2024-10-22 19:09:48,019] Trial 15 finished with value: 0.15097181294169962 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 6583, 'weights': 'distance'}. Best is trial 3 with value: 0.12201178686380579.
running
running
[I 2024-10-22 19:09:48,599] Trial 24 finished with value: 0.13535259621871726 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'mean'}. Best is trial 3 with value: 0.12201178686380579.
running
[I 2024-10-22 19:09:49,119] Trial 20 finished with value: 0.1346820594283523 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3120, 'weights': 'uniform'}. Best is trial 3 with value: 0.12201178686380579.
running
[I 2024-10-22 19:09:49,568] Trial 21 finished with value: inf and parameters: {'model_name': 'GAIN', 'batch_size': 5, 'hint_rate': 0.10378003567895301, 'alpha': 49, 'iterations': 8, 'learning_rate': 0.00012266602602773965, 'p_miss': 0.03173573609871568}. Best is trial 3 with value: 0.12201178686380579.
running
[I 2024-10-22 19:09:50,161] Trial 22 finished with value: 0.328087487393838 and parameters: {'model_name': 'VAE', 'batch_size': 1, 'iterations': 1, 'learning_rate': 0.0001006273444518052, 'p_miss': 0.29916650488198127}. Best is trial 3 with value: 0.12201178686380579.
running
[I 2024-10-22 19:09:51,002] Trial 11 finished with value: 0.16947446070490477 and parameters: {'model_name': 'GAIN', 'batch_size': 137, 'hint_rate': 0.39555138933729855, 'alpha': 45, 'iterations': 2, 'learning_rate': 0.0036493680031444427, 'p_miss': 0.1449602697148637}. Best is trial 3 with value: 0.12201178686380579.
running
[I 2024-10-22 19:09:52,153] Trial 1 finished with value: 0.17481856089119124 and parameters: {'model_name': 'GAIN', 'batch_size': 188, 'hint_rate': 0.25409417717456995, 'alpha': 16, 'iterations': 7, 'learning_rate': 0.07907856250393645, 'p_miss': 0.25521799800433476}. Best is trial 3 with value: 0.12201178686380579.
running
[I 2024-10-22 19:09:53,531] Trial 25 finished with value: 0.12201178686380579 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Ridge', 'initial_strategy': 'median', 'n_nearest_features': 5, 'imputation_order': 'ascending'}. Best is trial 3 with value: 0.12201178686380579.
running
[I 2024-10-22 19:09:54,025] Trial 18 finished with value: 0.1660477470326419 and parameters: {'model_name': 'GAIN', 'batch_size': 320, 'hint_rate': 0.9124867655728901, 'alpha': 98, 'iterations': 11, 'learning_rate': 0.0011579841889903274, 'p_miss': 0.14030112605836154}. Best is trial 3 with value: 0.12201178686380579.
running
[I 2024-10-22 19:09:54,270] Trial 26 finished with value: 0.12201178686380579 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Ridge', 'initial_strategy': 'median', 'n_nearest_features': 6, 'imputation_order': 'ascending'}. Best is trial 3 with value: 0.12201178686380579.
running
[I 2024-10-22 19:09:54,487] Trial 27 finished with value: 0.12201178686380579 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Ridge', 'initial_strategy': 'median', 'n_nearest_features': 5, 'imputation_order': 'ascending'}. Best is trial 3 with value: 0.12201178686380579.
running
[I 2024-10-22 19:09:54,797] Trial 13 finished with value: 0.16637015639979133 and parameters: {'model_name': 'GAIN', 'batch_size': 31, 'hint_rate': 0.6294578031567334, 'alpha': 9, 'iterations': 12, 'learning_rate': 0.00012356762743740871, 'p_miss': 0.047269297522022566}. Best is trial 3 with value: 0.12201178686380579.
running
[I 2024-10-22 19:09:55,438] Trial 28 finished with value: 0.12201178686380579 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Ridge', 'initial_strategy': 'median', 'n_nearest_features': 5, 'imputation_order': 'ascending'}. Best is trial 3 with value: 0.12201178686380579.
[I 2024-10-22 19:09:55,618] Trial 2 finished with value: 0.16269948234372272 and parameters: {'model_name': 'GAIN', 'batch_size': 991, 'hint_rate': 0.8579567693633258, 'alpha': 69, 'iterations': 12, 'learning_rate': 0.027561468266752053, 'p_miss': 0.07769421585853935}. Best is trial 3 with value: 0.12201178686380579.
running
running
[I 2024-10-22 19:09:56,464] Trial 29 finished with value: 0.12201178686380579 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Ridge', 'initial_strategy': 'median', 'n_nearest_features': 5, 'imputation_order': 'ascending'}. Best is trial 3 with value: 0.12201178686380579.
running
[I 2024-10-22 19:09:57,534] Trial 30 finished with value: 0.12201178686380579 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Ridge', 'initial_strategy': 'median', 'n_nearest_features': 5, 'imputation_order': 'ascending'}. Best is trial 3 with value: 0.12201178686380579.
running
[I 2024-10-22 19:09:59,010] Trial 31 finished with value: 0.12201178686380579 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Ridge', 'initial_strategy': 'median', 'n_nearest_features': 5, 'imputation_order': 'ascending'}. Best is trial 3 with value: 0.12201178686380579.
running
[I 2024-10-22 19:09:59,156] Trial 33 finished with value: 0.12201178686380579 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Ridge', 'initial_strategy': 'median', 'n_nearest_features': 5, 'imputation_order': 'ascending'}. Best is trial 3 with value: 0.12201178686380579.
running
[I 2024-10-22 19:10:00,015] Trial 36 finished with value: 0.12201178686380579 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Ridge', 'initial_strategy': 'median', 'n_nearest_features': 6, 'imputation_order': 'ascending'}. Best is trial 3 with value: 0.12201178686380579.
[I 2024-10-22 19:10:00,049] Trial 32 finished with value: 0.12201178686380579 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Ridge', 'initial_strategy': 'median', 'n_nearest_features': 5, 'imputation_order': 'ascending'}. Best is trial 3 with value: 0.12201178686380579.
running
running
[I 2024-10-22 19:10:00,555] Trial 16 finished with value: inf and parameters: {'model_name': 'GAIN', 'batch_size': 2, 'hint_rate': 0.9614834766633792, 'alpha': 76, 'iterations': 147, 'learning_rate': 0.00032718260451760874, 'p_miss': 0.21653129117915226}. Best is trial 3 with value: 0.12201178686380579.
running
[I 2024-10-22 19:10:00,962] Trial 37 finished with value: 0.12201178686380579 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Ridge', 'initial_strategy': 'median', 'n_nearest_features': 6, 'imputation_order': 'ascending'}. Best is trial 3 with value: 0.12201178686380579.
running
[I 2024-10-22 19:10:01,364] Trial 38 finished with value: 0.12201189826113926 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Ridge', 'initial_strategy': 'median', 'n_nearest_features': 6, 'imputation_order': 'descending'}. Best is trial 3 with value: 0.12201178686380579.
running
[I 2024-10-22 19:10:04,646] Trial 35 finished with value: 0.12205186881843158 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Ridge', 'initial_strategy': 'median', 'n_nearest_features': 3, 'imputation_order': 'ascending'}. Best is trial 3 with value: 0.12201178686380579.
running
[I 2024-10-22 19:10:05,831] Trial 34 finished with value: 0.12614139889023074 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Ridge', 'initial_strategy': 'most_frequent', 'n_nearest_features': 3, 'imputation_order': 'descending'}. Best is trial 3 with value: 0.12201178686380579.
running
[I 2024-10-22 19:10:06,059] Trial 8 finished with value: 0.1429764310268756 and parameters: {'model_name': 'VAE', 'batch_size': 39, 'iterations': 13, 'learning_rate': 0.03992010299012589, 'p_miss': 0.010171870862067316}. Best is trial 3 with value: 0.12201178686380579.
running
[I 2024-10-22 19:10:18,812] Trial 39 finished with value: 0.1243474328821836 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Bayesian', 'initial_strategy': 'constant', 'n_nearest_features': 2, 'imputation_order': 'arabic', 'sample_posterior': False}. Best is trial 3 with value: 0.12201178686380579.
running
[I 2024-10-22 19:10:27,758] Trial 41 finished with value: 0.12424659325337865 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'constant', 'n_nearest_features': 2, 'imputation_order': 'descending'}. Best is trial 3 with value: 0.12201178686380579.
running
[I 2024-10-22 19:14:01,223] Trial 7 finished with value: 0.14202389402498378 and parameters: {'model_name': 'VAE', 'batch_size': 2, 'iterations': 110, 'learning_rate': 0.05204754223323422, 'p_miss': 0.13120755833135347}. Best is trial 3 with value: 0.12201178686380579.
running
[I 2024-10-22 19:14:07,076] Trial 0 finished with value: 0.14612003933102963 and parameters: {'model_name': 'VAE', 'batch_size': 1, 'iterations': 109, 'learning_rate': 0.017529617554935647, 'p_miss': 0.29973483898256326}. Best is trial 3 with value: 0.12201178686380579.
running
[I 2024-10-22 19:14:40,266] Trial 6 finished with value: 0.1794562266689065 and parameters: {'model_name': 'GAIN', 'batch_size': 155, 'hint_rate': 0.5867212988305028, 'alpha': 46, 'iterations': 234, 'learning_rate': 0.019618308512249934, 'p_miss': 0.2536880519437272}. Best is trial 3 with value: 0.12201178686380579.
running
[I 2024-10-22 19:23:33,133] Trial 49 finished with value: 0.13169711448027832 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'mean', 'n_nearest_features': 1, 'imputation_order': 'random'}. Best is trial 3 with value: 0.12201178686380579.
running
[I 2024-10-22 19:24:50,601] Trial 40 finished with value: 0.1293522033832078 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'constant', 'n_nearest_features': 2, 'imputation_order': 'random'}. Best is trial 3 with value: 0.12201178686380579.
running
[I 2024-10-22 19:24:54,092] Trial 10 finished with value: 0.12374859759421444 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'constant', 'n_nearest_features': 2, 'imputation_order': 'descending'}. Best is trial 3 with value: 0.12201178686380579.
running
[I 2024-10-22 19:25:00,148] Trial 56 finished with value: 0.12288245521191463 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Ridge', 'initial_strategy': 'median', 'n_nearest_features': 4, 'imputation_order': 'roman'}. Best is trial 3 with value: 0.12201178686380579.
running
[I 2024-10-22 19:25:03,215] Trial 57 finished with value: 0.12288245521191463 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Ridge', 'initial_strategy': 'median', 'n_nearest_features': 4, 'imputation_order': 'roman'}. Best is trial 3 with value: 0.12201178686380579.
running
[I 2024-10-22 19:25:27,486] Trial 59 finished with value: 0.15587773183438652 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Bayesian', 'initial_strategy': 'most_frequent', 'n_nearest_features': 6, 'imputation_order': 'ascending', 'sample_posterior': True}. Best is trial 3 with value: 0.12201178686380579.
running
[I 2024-10-22 19:31:27,949] Trial 53 finished with value: 0.12206376332704472 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'mean', 'n_nearest_features': 4, 'imputation_order': 'random'}. Best is trial 3 with value: 0.12201178686380579.
running
[I 2024-10-22 19:31:36,997] Trial 54 finished with value: 0.1201470984105805 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'mean', 'n_nearest_features': 4, 'imputation_order': 'roman'}. Best is trial 54 with value: 0.1201470984105805.
running
[I 2024-10-22 19:31:37,736] Trial 52 finished with value: 0.11893293511555034 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'mean', 'n_nearest_features': 4, 'imputation_order': 'random'}. Best is trial 52 with value: 0.11893293511555034.
running
[I 2024-10-22 19:38:08,344] Trial 23 finished with value: 0.16761246692935589 and parameters: {'model_name': 'GAIN', 'batch_size': 864, 'hint_rate': 0.4482420310728488, 'alpha': 7, 'iterations': 1005, 'learning_rate': 0.023050805610294243, 'p_miss': 0.03353159368059406}. Best is trial 52 with value: 0.11893293511555034.
running
[I 2024-10-22 20:36:54,575] Trial 44 finished with value: 0.14023958111562967 and parameters: {'model_name': 'VAE', 'batch_size': 17, 'iterations': 1763, 'learning_rate': 0.007410886616401952, 'p_miss': 0.19935526652151286}. Best is trial 52 with value: 0.11893293511555034.
running
[I 2024-10-22 20:49:18,274] Trial 48 finished with value: 0.13852627787196067 and parameters: {'model_name': 'VAE', 'batch_size': 16, 'iterations': 1715, 'learning_rate': 0.007535729175495391, 'p_miss': 0.20983768220929752}. Best is trial 52 with value: 0.11893293511555034.
running
[I 2024-10-22 21:05:04,552] Trial 66 finished with value: 0.12095764075477274 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'mean', 'n_nearest_features': 4, 'imputation_order': 'roman'}. Best is trial 52 with value: 0.11893293511555034.
running
[I 2024-10-22 21:21:09,708] Trial 67 finished with value: 0.12065477906873709 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'mean', 'n_nearest_features': 4, 'imputation_order': 'roman'}. Best is trial 52 with value: 0.11893293511555034.
running
[I 2024-10-22 21:37:12,327] Trial 68 finished with value: 0.12147459164825833 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'mean', 'n_nearest_features': 4, 'imputation_order': 'roman'}. Best is trial 52 with value: 0.11893293511555034.
running
[I 2024-10-22 21:37:13,331] Trial 69 finished with value: 0.1635562452595643 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'most_frequent'}. Best is trial 52 with value: 0.11893293511555034.
running
[I 2024-10-22 21:37:17,341] Trial 70 finished with value: 0.13535259621871726 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 7389, 'weights': 'uniform'}. Best is trial 52 with value: 0.11893293511555034.
running
[I 2024-10-22 21:53:08,598] Trial 71 finished with value: 0.12465615890376638 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'mean', 'n_nearest_features': 4, 'imputation_order': 'roman'}. Best is trial 52 with value: 0.11893293511555034.
running
[I 2024-10-22 22:08:57,831] Trial 72 finished with value: 0.12065975243634748 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'mean', 'n_nearest_features': 4, 'imputation_order': 'roman'}. Best is trial 52 with value: 0.11893293511555034.
running
[I 2024-10-22 22:24:46,556] Trial 73 finished with value: 0.12243087780134887 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'mean', 'n_nearest_features': 4, 'imputation_order': 'roman'}. Best is trial 52 with value: 0.11893293511555034.
running
[I 2024-10-22 22:39:01,981] Trial 74 finished with value: 0.12424907660261501 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'mean', 'n_nearest_features': 3, 'imputation_order': 'roman'}. Best is trial 52 with value: 0.11893293511555034.
running
[I 2024-10-22 23:01:08,341] Trial 75 finished with value: 0.14190220695145478 and parameters: {'model_name': 'VAE', 'batch_size': 6, 'iterations': 434, 'learning_rate': 0.0020700458821457726, 'p_miss': 0.1043378964968108}. Best is trial 52 with value: 0.11893293511555034.
running
[I 2024-10-22 23:14:21,431] Trial 42 finished with value: 0.15585669097492308 and parameters: {'model_name': 'VAE', 'batch_size': 1, 'iterations': 6399, 'learning_rate': 0.004757929090264071, 'p_miss': 0.22776086652897787}. Best is trial 52 with value: 0.11893293511555034.
running
[I 2024-10-22 23:15:28,684] Trial 64 finished with value: 0.13954879173306117 and parameters: {'model_name': 'VAE', 'batch_size': 10, 'iterations': 4989, 'learning_rate': 0.004112056684965825, 'p_miss': 0.18315867508087363}. Best is trial 52 with value: 0.11893293511555034.
running
[I 2024-10-22 23:16:58,581] Trial 76 finished with value: 0.11997982419575204 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'mean', 'n_nearest_features': 4, 'imputation_order': 'roman'}. Best is trial 52 with value: 0.11893293511555034.
running
[I 2024-10-22 23:30:26,175] Trial 77 finished with value: 0.12143756739085032 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'mean', 'n_nearest_features': 4, 'imputation_order': 'roman'}. Best is trial 52 with value: 0.11893293511555034.
running
[I 2024-10-22 23:31:14,550] Trial 78 finished with value: 0.12065982309579541 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'mean', 'n_nearest_features': 4, 'imputation_order': 'roman'}. Best is trial 52 with value: 0.11893293511555034.
running
[I 2024-10-22 23:33:24,649] Trial 79 finished with value: 0.11968621129135304 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'mean', 'n_nearest_features': 4, 'imputation_order': 'roman'}. Best is trial 52 with value: 0.11893293511555034.
running
[I 2024-10-22 23:33:25,624] Trial 82 finished with value: 0.1635562452595643 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'most_frequent'}. Best is trial 52 with value: 0.11893293511555034.
running
[I 2024-10-22 23:33:28,825] Trial 83 finished with value: 0.1313881560366758 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 41, 'weights': 'uniform'}. Best is trial 52 with value: 0.11893293511555034.
running
[I 2024-10-22 23:46:19,796] Trial 80 finished with value: 0.12186759838418512 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'mean', 'n_nearest_features': 4, 'imputation_order': 'roman'}. Best is trial 52 with value: 0.11893293511555034.
running
[I 2024-10-22 23:46:50,843] Trial 81 finished with value: 0.1213758919448483 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'mean', 'n_nearest_features': 4, 'imputation_order': 'roman'}. Best is trial 52 with value: 0.11893293511555034.
running
[I 2024-10-22 23:47:40,444] Trial 85 finished with value: 0.16364001296729438 and parameters: {'model_name': 'GAIN', 'batch_size': 53, 'hint_rate': 0.015174787395598244, 'alpha': 30, 'iterations': 50, 'learning_rate': 0.0006304795146203371, 'p_miss': 0.08600646130427224}. Best is trial 52 with value: 0.11893293511555034.
running
[I 2024-10-22 23:48:35,597] Trial 84 finished with value: 0.1266812619112985 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'mean', 'n_nearest_features': 3, 'imputation_order': 'roman'}. Best is trial 52 with value: 0.11893293511555034.
running
[I 2024-10-23 00:01:19,127] Trial 47 finished with value: 0.13944473929630458 and parameters: {'model_name': 'VAE', 'batch_size': 15, 'iterations': 5546, 'learning_rate': 0.007855705206183264, 'p_miss': 0.19753634671554943}. Best is trial 52 with value: 0.11893293511555034.
running
[I 2024-10-23 00:01:28,719] Trial 86 finished with value: 0.1220592050863029 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'mean', 'n_nearest_features': 3, 'imputation_order': 'roman'}. Best is trial 52 with value: 0.11893293511555034.
running
[I 2024-10-23 00:02:45,118] Trial 87 finished with value: 0.12374874016028395 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'mean', 'n_nearest_features': 3, 'imputation_order': 'roman'}. Best is trial 52 with value: 0.11893293511555034.
running
[I 2024-10-23 00:04:45,797] Trial 88 finished with value: 0.12089347881725158 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'mean', 'n_nearest_features': 4, 'imputation_order': 'roman'}. Best is trial 52 with value: 0.11893293511555034.
running
[I 2024-10-23 00:09:48,034] Trial 62 finished with value: 0.1388818599791137 and parameters: {'model_name': 'VAE', 'batch_size': 11, 'iterations': 6157, 'learning_rate': 0.005993608888344653, 'p_miss': 0.1900478378345015}. Best is trial 52 with value: 0.11893293511555034.
running
[I 2024-10-23 00:13:03,134] Trial 45 finished with value: 0.13986584621946482 and parameters: {'model_name': 'VAE', 'batch_size': 20, 'iterations': 5187, 'learning_rate': 0.006277299203065618, 'p_miss': 0.18656000823338617}. Best is trial 52 with value: 0.11893293511555034.
running
[I 2024-10-23 00:17:25,227] Trial 90 finished with value: 0.12092652827719204 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'mean', 'n_nearest_features': 4, 'imputation_order': 'roman'}. Best is trial 52 with value: 0.11893293511555034.
running
[I 2024-10-23 00:17:43,184] Trial 95 finished with value: 0.11927771485315768 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'mean', 'n_nearest_features': 4, 'imputation_order': 'arabic'}. Best is trial 52 with value: 0.11893293511555034.
running
[I 2024-10-23 00:17:59,537] Trial 89 finished with value: 0.11906042928001086 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'mean', 'n_nearest_features': 4, 'imputation_order': 'roman'}. Best is trial 52 with value: 0.11893293511555034.
running
[I 2024-10-23 00:18:01,357] Trial 96 finished with value: 0.11927771485315768 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'mean', 'n_nearest_features': 4, 'imputation_order': 'arabic'}. Best is trial 52 with value: 0.11893293511555034.
running
[I 2024-10-23 00:18:19,452] Trial 97 finished with value: 0.11927771485315768 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'mean', 'n_nearest_features': 4, 'imputation_order': 'arabic'}. Best is trial 52 with value: 0.11893293511555034.
running
[I 2024-10-23 00:18:20,921] Trial 98 finished with value: 0.11927771485315768 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'mean', 'n_nearest_features': 4, 'imputation_order': 'arabic'}. Best is trial 52 with value: 0.11893293511555034.
running
[I 2024-10-23 00:18:38,673] Trial 99 finished with value: 0.11927771485315768 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'mean', 'n_nearest_features': 4, 'imputation_order': 'arabic'}. Best is trial 52 with value: 0.11893293511555034.
running
[I 2024-10-23 00:18:41,333] Trial 100 finished with value: 0.118057352350227 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'mean', 'n_nearest_features': 5, 'imputation_order': 'arabic'}. Best is trial 100 with value: 0.118057352350227.
running
[I 2024-10-23 00:19:00,402] Trial 102 finished with value: 0.118057352350227 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'mean', 'n_nearest_features': 5, 'imputation_order': 'arabic'}. Best is trial 100 with value: 0.118057352350227.
running
[I 2024-10-23 00:19:01,447] Trial 101 finished with value: 0.118057352350227 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'mean', 'n_nearest_features': 5, 'imputation_order': 'arabic'}. Best is trial 100 with value: 0.118057352350227.
running
[I 2024-10-23 00:19:07,426] Trial 91 finished with value: 0.12354661550515134 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'mean', 'n_nearest_features': 4, 'imputation_order': 'roman'}. Best is trial 100 with value: 0.118057352350227.
running
[I 2024-10-23 00:20:03,745] Trial 104 finished with value: 0.16595713230594653 and parameters: {'model_name': 'GAIN', 'batch_size': 85, 'hint_rate': 0.7256796297992758, 'alpha': 99, 'iterations': 39, 'learning_rate': 0.00029379214936874813, 'p_miss': 0.11650063145183097}. Best is trial 100 with value: 0.118057352350227.
running
[I 2024-10-23 00:20:05,580] Trial 103 finished with value: 0.16230934242675754 and parameters: {'model_name': 'GAIN', 'batch_size': 68, 'hint_rate': 0.7729110526277418, 'alpha': 97, 'iterations': 41, 'learning_rate': 0.0002684426928972597, 'p_miss': 0.11090360816100406}. Best is trial 100 with value: 0.118057352350227.
running
[I 2024-10-23 00:20:23,272] Trial 105 finished with value: 0.1671139439618961 and parameters: {'model_name': 'GAIN', 'batch_size': 420, 'hint_rate': 0.7305453043751376, 'alpha': 99, 'iterations': 41, 'learning_rate': 0.00027979224434702244, 'p_miss': 0.26682370712038006}. Best is trial 100 with value: 0.118057352350227.
running
[I 2024-10-23 00:20:24,928] Trial 107 finished with value: 0.118057352350227 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'mean', 'n_nearest_features': 5, 'imputation_order': 'arabic'}. Best is trial 100 with value: 0.118057352350227.
running
[I 2024-10-23 00:20:25,075] Trial 106 finished with value: 0.118057352350227 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'mean', 'n_nearest_features': 5, 'imputation_order': 'arabic'}. Best is trial 100 with value: 0.118057352350227.
running
[I 2024-10-23 00:20:45,882] Trial 109 finished with value: 0.11924499272984965 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'most_frequent', 'n_nearest_features': 5, 'imputation_order': 'arabic'}. Best is trial 100 with value: 0.118057352350227.
running
[I 2024-10-23 00:20:46,224] Trial 108 finished with value: 0.118057352350227 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'mean', 'n_nearest_features': 5, 'imputation_order': 'arabic'}. Best is trial 100 with value: 0.118057352350227.
running
[I 2024-10-23 00:20:49,413] Trial 110 finished with value: 0.11924499272984965 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'most_frequent', 'n_nearest_features': 5, 'imputation_order': 'arabic'}. Best is trial 100 with value: 0.118057352350227.
running
[I 2024-10-23 00:20:49,961] Trial 113 finished with value: 0.1635562452595643 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 100 with value: 0.118057352350227.
running
[I 2024-10-23 00:20:54,829] Trial 112 finished with value: 0.15080872679149157 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 5378, 'weights': 'distance'}. Best is trial 100 with value: 0.118057352350227.
running
[I 2024-10-23 00:20:57,386] Trial 114 finished with value: 0.15097658775556638 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 8520, 'weights': 'distance'}. Best is trial 100 with value: 0.118057352350227.
running
[I 2024-10-23 00:21:06,236] Trial 111 finished with value: 0.11924499272984965 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'most_frequent', 'n_nearest_features': 5, 'imputation_order': 'arabic'}. Best is trial 100 with value: 0.118057352350227.
running
[I 2024-10-23 00:21:13,513] Trial 92 finished with value: 0.11975688188440223 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'mean', 'n_nearest_features': 4, 'imputation_order': 'roman'}. Best is trial 100 with value: 0.118057352350227.
running
[I 2024-10-23 00:21:17,028] Trial 115 finished with value: 0.11924499272984965 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'most_frequent', 'n_nearest_features': 5, 'imputation_order': 'arabic'}. Best is trial 100 with value: 0.118057352350227.
running
[I 2024-10-23 00:21:21,932] Trial 116 finished with value: 0.11924499272984965 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'most_frequent', 'n_nearest_features': 5, 'imputation_order': 'arabic'}. Best is trial 100 with value: 0.118057352350227.
running
[I 2024-10-23 00:21:28,505] Trial 117 finished with value: 0.11924499272984965 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'most_frequent', 'n_nearest_features': 5, 'imputation_order': 'arabic'}. Best is trial 100 with value: 0.118057352350227.
running
[I 2024-10-23 00:21:35,007] Trial 118 finished with value: 0.11924499272984965 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'most_frequent', 'n_nearest_features': 5, 'imputation_order': 'arabic'}. Best is trial 100 with value: 0.118057352350227.
running
[I 2024-10-23 00:21:42,297] Trial 119 finished with value: 0.11924499272984965 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'most_frequent', 'n_nearest_features': 5, 'imputation_order': 'arabic'}. Best is trial 100 with value: 0.118057352350227.
running
[I 2024-10-23 00:21:46,512] Trial 120 finished with value: 0.11924499272984965 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'most_frequent', 'n_nearest_features': 5, 'imputation_order': 'arabic'}. Best is trial 100 with value: 0.118057352350227.
running
[I 2024-10-23 00:21:48,955] Trial 121 finished with value: 0.11924499272984965 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'most_frequent', 'n_nearest_features': 5, 'imputation_order': 'arabic'}. Best is trial 100 with value: 0.118057352350227.
running
[I 2024-10-23 00:21:58,190] Trial 122 finished with value: 0.11924499272984965 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'most_frequent', 'n_nearest_features': 5, 'imputation_order': 'arabic'}. Best is trial 100 with value: 0.118057352350227.
running
[I 2024-10-23 00:22:05,313] Trial 123 finished with value: 0.11924499272984965 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'most_frequent', 'n_nearest_features': 5, 'imputation_order': 'arabic'}. Best is trial 100 with value: 0.118057352350227.
running
[I 2024-10-23 00:22:10,638] Trial 125 finished with value: 0.11906900436984799 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'most_frequent', 'n_nearest_features': 5, 'imputation_order': 'random'}. Best is trial 100 with value: 0.118057352350227.
running
[I 2024-10-23 00:22:11,637] Trial 124 finished with value: 0.11924499272984965 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'most_frequent', 'n_nearest_features': 5, 'imputation_order': 'arabic'}. Best is trial 100 with value: 0.118057352350227.
running
[I 2024-10-23 00:22:21,530] Trial 126 finished with value: 0.11924499272984965 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'most_frequent', 'n_nearest_features': 5, 'imputation_order': 'arabic'}. Best is trial 100 with value: 0.118057352350227.
running
[I 2024-10-23 00:22:28,255] Trial 127 finished with value: 0.11906900436984799 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'most_frequent', 'n_nearest_features': 5, 'imputation_order': 'random'}. Best is trial 100 with value: 0.118057352350227.
running
[I 2024-10-23 00:22:32,584] Trial 129 finished with value: 0.11812942468162158 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'constant', 'n_nearest_features': 6, 'imputation_order': 'random'}. Best is trial 100 with value: 0.118057352350227.
running
[I 2024-10-23 00:22:36,104] Trial 128 finished with value: 0.11906900436984799 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'constant', 'n_nearest_features': 5, 'imputation_order': 'random'}. Best is trial 100 with value: 0.118057352350227.
running
[I 2024-10-23 00:22:36,735] Trial 133 finished with value: 0.1635562452595643 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'most_frequent'}. Best is trial 100 with value: 0.118057352350227.
running
[I 2024-10-23 00:22:40,555] Trial 132 finished with value: 0.1216386253021885 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Bayesian', 'initial_strategy': 'constant', 'n_nearest_features': 6, 'imputation_order': 'random', 'sample_posterior': False}. Best is trial 100 with value: 0.118057352350227.
running
[I 2024-10-23 00:22:44,653] Trial 134 finished with value: 0.1216386253021885 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Bayesian', 'initial_strategy': 'constant', 'n_nearest_features': 6, 'imputation_order': 'random', 'sample_posterior': False}. Best is trial 100 with value: 0.118057352350227.
running
[I 2024-10-23 00:22:47,905] Trial 130 finished with value: 0.11812942468162158 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'constant', 'n_nearest_features': 6, 'imputation_order': 'random'}. Best is trial 100 with value: 0.118057352350227.
running
[I 2024-10-23 00:22:55,347] Trial 131 finished with value: 0.11812942468162158 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'constant', 'n_nearest_features': 6, 'imputation_order': 'random'}. Best is trial 100 with value: 0.118057352350227.
running
[I 2024-10-23 00:23:04,878] Trial 136 finished with value: 0.1191116228396232 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'mean', 'n_nearest_features': 5, 'imputation_order': 'random'}. Best is trial 100 with value: 0.118057352350227.
running
[I 2024-10-23 00:23:05,310] Trial 135 finished with value: 0.11812942468162158 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'constant', 'n_nearest_features': 6, 'imputation_order': 'random'}. Best is trial 100 with value: 0.118057352350227.
running
[I 2024-10-23 00:23:09,784] Trial 137 finished with value: 0.11812942468162158 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'constant', 'n_nearest_features': 6, 'imputation_order': 'random'}. Best is trial 100 with value: 0.118057352350227.
running
[I 2024-10-23 00:23:17,353] Trial 138 finished with value: 0.11812942468162158 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'constant', 'n_nearest_features': 6, 'imputation_order': 'random'}. Best is trial 100 with value: 0.118057352350227.
running
[I 2024-10-23 00:23:24,989] Trial 139 finished with value: 0.11812942468162158 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'constant', 'n_nearest_features': 6, 'imputation_order': 'random'}. Best is trial 100 with value: 0.118057352350227.
running
[I 2024-10-23 00:23:27,408] Trial 140 finished with value: 0.11812942468162158 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'constant', 'n_nearest_features': 6, 'imputation_order': 'random'}. Best is trial 100 with value: 0.118057352350227.
running
[I 2024-10-23 00:23:31,372] Trial 141 finished with value: 0.11812942468162158 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'constant', 'n_nearest_features': 6, 'imputation_order': 'random'}. Best is trial 100 with value: 0.118057352350227.
running
[I 2024-10-23 00:23:40,199] Trial 142 finished with value: 0.11812942468162158 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'constant', 'n_nearest_features': 6, 'imputation_order': 'random'}. Best is trial 100 with value: 0.118057352350227.
running
[I 2024-10-23 00:23:44,646] Trial 143 finished with value: 0.11812942468162158 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'constant', 'n_nearest_features': 6, 'imputation_order': 'random'}. Best is trial 100 with value: 0.118057352350227.
running
[I 2024-10-23 00:23:49,778] Trial 144 finished with value: 0.11812942468162158 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'constant', 'n_nearest_features': 6, 'imputation_order': 'random'}. Best is trial 100 with value: 0.118057352350227.
running
[I 2024-10-23 00:23:51,629] Trial 145 finished with value: 0.11812942468162158 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'constant', 'n_nearest_features': 6, 'imputation_order': 'random'}. Best is trial 100 with value: 0.118057352350227.
running
[I 2024-10-23 00:24:01,800] Trial 146 finished with value: 0.11812942468162158 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'constant', 'n_nearest_features': 6, 'imputation_order': 'random'}. Best is trial 100 with value: 0.118057352350227.
running
[I 2024-10-23 00:24:04,678] Trial 147 finished with value: 0.11812942468162158 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'constant', 'n_nearest_features': 6, 'imputation_order': 'random'}. Best is trial 100 with value: 0.118057352350227.
running
[I 2024-10-23 00:24:11,039] Trial 148 finished with value: 0.11812942468162158 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'constant', 'n_nearest_features': 6, 'imputation_order': 'random'}. Best is trial 100 with value: 0.118057352350227.
running
[I 2024-10-23 00:24:12,270] Trial 149 finished with value: 0.11812942468162158 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'constant', 'n_nearest_features': 6, 'imputation_order': 'random'}. Best is trial 100 with value: 0.118057352350227.
running
[I 2024-10-23 00:24:23,331] Trial 150 finished with value: 0.11874584195504634 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'constant', 'n_nearest_features': 6, 'imputation_order': 'descending'}. Best is trial 100 with value: 0.118057352350227.
running
[I 2024-10-23 00:24:24,935] Trial 151 finished with value: 0.11874584195504634 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'constant', 'n_nearest_features': 6, 'imputation_order': 'descending'}. Best is trial 100 with value: 0.118057352350227.
running
[I 2024-10-23 00:24:32,518] Trial 152 finished with value: 0.11874584195504634 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'constant', 'n_nearest_features': 6, 'imputation_order': 'descending'}. Best is trial 100 with value: 0.118057352350227.
running
[I 2024-10-23 00:24:33,293] Trial 153 finished with value: 0.11812942468162158 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'constant', 'n_nearest_features': 6, 'imputation_order': 'random'}. Best is trial 100 with value: 0.118057352350227.
running
[I 2024-10-23 00:24:43,578] Trial 155 finished with value: 0.11812942468162158 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'constant', 'n_nearest_features': 6, 'imputation_order': 'random'}. Best is trial 100 with value: 0.118057352350227.
running
[I 2024-10-23 00:24:45,717] Trial 154 finished with value: 0.11812942468162158 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'constant', 'n_nearest_features': 6, 'imputation_order': 'random'}. Best is trial 100 with value: 0.118057352350227.
running
[I 2024-10-23 00:24:53,615] Trial 156 finished with value: 0.11812942468162158 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'constant', 'n_nearest_features': 6, 'imputation_order': 'random'}. Best is trial 100 with value: 0.118057352350227.
running
[I 2024-10-23 00:24:55,565] Trial 157 finished with value: 0.11812942468162158 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'constant', 'n_nearest_features': 6, 'imputation_order': 'random'}. Best is trial 100 with value: 0.118057352350227.
running
[I 2024-10-23 00:24:55,998] Trial 161 finished with value: 0.1635562452595643 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'constant'}. Best is trial 100 with value: 0.118057352350227.
running
[I 2024-10-23 00:25:03,206] Trial 162 finished with value: 0.1368092091079549 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 5075, 'weights': 'uniform'}. Best is trial 100 with value: 0.118057352350227.
running
[I 2024-10-23 00:25:03,912] Trial 158 finished with value: 0.11812942468162158 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'constant', 'n_nearest_features': 6, 'imputation_order': 'random'}. Best is trial 100 with value: 0.118057352350227.
running
[I 2024-10-23 00:25:06,964] Trial 159 finished with value: 0.11812942468162158 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'constant', 'n_nearest_features': 6, 'imputation_order': 'random'}. Best is trial 100 with value: 0.118057352350227.
running
[I 2024-10-23 00:25:14,745] Trial 160 finished with value: 0.11812942468162158 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'constant', 'n_nearest_features': 6, 'imputation_order': 'random'}. Best is trial 100 with value: 0.118057352350227.
running
[I 2024-10-23 00:25:23,826] Trial 164 finished with value: 0.11812942468162158 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'constant', 'n_nearest_features': 6, 'imputation_order': 'random'}. Best is trial 100 with value: 0.118057352350227.
running
[I 2024-10-23 00:25:26,246] Trial 163 finished with value: 0.11812942468162158 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'constant', 'n_nearest_features': 6, 'imputation_order': 'random'}. Best is trial 100 with value: 0.118057352350227.
running
[I 2024-10-23 00:25:27,981] Trial 165 finished with value: 0.11812942468162158 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'constant', 'n_nearest_features': 6, 'imputation_order': 'random'}. Best is trial 100 with value: 0.118057352350227.
running
[I 2024-10-23 00:25:36,202] Trial 166 finished with value: 0.11812942468162158 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'constant', 'n_nearest_features': 6, 'imputation_order': 'random'}. Best is trial 100 with value: 0.118057352350227.
running
[I 2024-10-23 00:25:44,624] Trial 167 finished with value: 0.11812942468162158 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'constant', 'n_nearest_features': 6, 'imputation_order': 'random'}. Best is trial 100 with value: 0.118057352350227.
running
[I 2024-10-23 00:25:47,624] Trial 168 finished with value: 0.11812942468162158 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'constant', 'n_nearest_features': 6, 'imputation_order': 'random'}. Best is trial 100 with value: 0.118057352350227.
running
[I 2024-10-23 00:25:48,652] Trial 169 finished with value: 0.11904872340891177 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'constant', 'n_nearest_features': 6, 'imputation_order': 'ascending'}. Best is trial 100 with value: 0.118057352350227.
running
[I 2024-10-23 00:25:54,325] Trial 171 finished with value: 0.3221900759890801 and parameters: {'model_name': 'VAE', 'batch_size': 3, 'iterations': 2, 'learning_rate': 0.0007777775995128484, 'p_miss': 0.0643057701297801}. Best is trial 100 with value: 0.118057352350227.
running
[I 2024-10-23 00:25:55,980] Trial 172 finished with value: 0.3212164387425115 and parameters: {'model_name': 'VAE', 'batch_size': 3, 'iterations': 2, 'learning_rate': 0.001254281238894154, 'p_miss': 0.1684078067070872}. Best is trial 100 with value: 0.118057352350227.
running
[I 2024-10-23 00:25:57,221] Trial 170 finished with value: 0.11904872340891177 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'constant', 'n_nearest_features': 6, 'imputation_order': 'ascending'}. Best is trial 100 with value: 0.118057352350227.
running
[I 2024-10-23 00:26:02,232] Trial 173 finished with value: 0.31771352891360555 and parameters: {'model_name': 'VAE', 'batch_size': 2, 'iterations': 3, 'learning_rate': 0.0018838263968890487, 'p_miss': 0.16638687960792922}. Best is trial 100 with value: 0.118057352350227.
running
[I 2024-10-23 00:26:15,388] Trial 174 finished with value: 0.1174441710522256 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'mean', 'n_nearest_features': 6, 'imputation_order': 'arabic'}. Best is trial 174 with value: 0.1174441710522256.
running
[I 2024-10-23 00:26:16,675] Trial 175 finished with value: 0.1174441710522256 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'mean', 'n_nearest_features': 6, 'imputation_order': 'arabic'}. Best is trial 174 with value: 0.1174441710522256.
running
[I 2024-10-23 00:26:17,051] Trial 176 finished with value: 0.13319680824390168 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'mean', 'n_nearest_features': 1, 'imputation_order': 'arabic'}. Best is trial 174 with value: 0.1174441710522256.
running
[I 2024-10-23 00:26:23,703] Trial 177 finished with value: 0.1174441710522256 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'mean', 'n_nearest_features': 6, 'imputation_order': 'arabic'}. Best is trial 174 with value: 0.1174441710522256.
running
[I 2024-10-23 00:26:34,479] Trial 178 finished with value: 0.1174441710522256 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'mean', 'n_nearest_features': 6, 'imputation_order': 'arabic'}. Best is trial 174 with value: 0.1174441710522256.
running
[I 2024-10-23 00:26:37,758] Trial 179 finished with value: 0.1174441710522256 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'mean', 'n_nearest_features': 6, 'imputation_order': 'arabic'}. Best is trial 174 with value: 0.1174441710522256.
running
[I 2024-10-23 00:26:38,475] Trial 180 finished with value: 0.1174441710522256 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'mean', 'n_nearest_features': 6, 'imputation_order': 'arabic'}. Best is trial 174 with value: 0.1174441710522256.
running
[I 2024-10-23 00:26:52,181] Trial 182 finished with value: 0.1174441710522256 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'mean', 'n_nearest_features': 6, 'imputation_order': 'arabic'}. Best is trial 174 with value: 0.1174441710522256.
running
[I 2024-10-23 00:26:52,952] Trial 93 finished with value: 0.11868672822207502 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'mean', 'n_nearest_features': 4, 'imputation_order': 'roman'}. Best is trial 174 with value: 0.1174441710522256.
running
[I 2024-10-23 00:29:45,519] Trial 94 finished with value: 0.12306929832617061 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'mean', 'n_nearest_features': 4, 'imputation_order': 'roman'}. Best is trial 174 with value: 0.1174441710522256.
running
[I 2024-10-23 00:30:07,930] Trial 187 finished with value: 0.15581151947493926 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Bayesian', 'initial_strategy': 'mean', 'n_nearest_features': 5, 'imputation_order': 'arabic', 'sample_posterior': True}. Best is trial 174 with value: 0.1174441710522256.
running
[I 2024-10-23 00:35:13,333] Trial 186 finished with value: 0.19374416200711814 and parameters: {'model_name': 'GAIN', 'batch_size': 393, 'hint_rate': 0.3005879643112853, 'alpha': 69, 'iterations': 382, 'learning_rate': 0.01312812951647744, 'p_miss': 0.29444335350358075}. Best is trial 174 with value: 0.1174441710522256.
running
[I 2024-10-23 00:35:16,892] Trial 189 finished with value: 0.12201162970060282 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Ridge', 'initial_strategy': 'mean', 'n_nearest_features': 6, 'imputation_order': 'arabic'}. Best is trial 174 with value: 0.1174441710522256.
running
[I 2024-10-23 00:35:33,279] Trial 190 finished with value: 0.1174441710522256 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'mean', 'n_nearest_features': 6, 'imputation_order': 'arabic'}. Best is trial 174 with value: 0.1174441710522256.
running
[I 2024-10-23 00:35:49,634] Trial 191 finished with value: 0.118057352350227 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'mean', 'n_nearest_features': 5, 'imputation_order': 'arabic'}. Best is trial 174 with value: 0.1174441710522256.
running
[I 2024-10-23 00:36:06,439] Trial 192 finished with value: 0.118057352350227 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'mean', 'n_nearest_features': 5, 'imputation_order': 'arabic'}. Best is trial 174 with value: 0.1174441710522256.
running
[I 2024-10-23 00:36:23,707] Trial 193 finished with value: 0.118057352350227 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'mean', 'n_nearest_features': 5, 'imputation_order': 'arabic'}. Best is trial 174 with value: 0.1174441710522256.
running
[I 2024-10-23 00:36:41,137] Trial 194 finished with value: 0.118057352350227 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'mean', 'n_nearest_features': 5, 'imputation_order': 'arabic'}. Best is trial 174 with value: 0.1174441710522256.
running
[I 2024-10-23 00:36:45,913] Trial 195 finished with value: 0.14855932700927726 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 1538, 'weights': 'distance'}. Best is trial 174 with value: 0.1174441710522256.
running
[I 2024-10-23 00:37:03,401] Trial 196 finished with value: 0.118057352350227 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'mean', 'n_nearest_features': 5, 'imputation_order': 'arabic'}. Best is trial 174 with value: 0.1174441710522256.
running
[I 2024-10-23 00:37:21,103] Trial 197 finished with value: 0.118057352350227 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'mean', 'n_nearest_features': 5, 'imputation_order': 'arabic'}. Best is trial 174 with value: 0.1174441710522256.
running
[I 2024-10-23 00:37:38,369] Trial 198 finished with value: 0.118057352350227 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'mean', 'n_nearest_features': 5, 'imputation_order': 'arabic'}. Best is trial 174 with value: 0.1174441710522256.
running
[I 2024-10-23 00:37:56,285] Trial 199 finished with value: 0.118057352350227 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'mean', 'n_nearest_features': 5, 'imputation_order': 'arabic'}. Best is trial 174 with value: 0.1174441710522256.
[I 2024-10-23 00:38:57,929] Trial 183 finished with value: 0.18249046511098063 and parameters: {'model_name': 'GAIN', 'batch_size': 480, 'hint_rate': 0.2825829432336091, 'alpha': 68, 'iterations': 519, 'learning_rate': 0.0689980398080715, 'p_miss': 0.23786586971851872}. Best is trial 174 with value: 0.1174441710522256.
[I 2024-10-23 00:39:20,376] Trial 185 finished with value: 0.16886892421686758 and parameters: {'model_name': 'GAIN', 'batch_size': 419, 'hint_rate': 0.2564989799333338, 'alpha': 71, 'iterations': 555, 'learning_rate': 0.013263674411878989, 'p_miss': 0.09021853078010893}. Best is trial 174 with value: 0.1174441710522256.
[I 2024-10-23 00:39:44,374] Trial 184 finished with value: 0.1853708857209704 and parameters: {'model_name': 'GAIN', 'batch_size': 505, 'hint_rate': 0.26581146683162415, 'alpha': 68, 'iterations': 549, 'learning_rate': 0.09480847915602217, 'p_miss': 0.2887719159269686}. Best is trial 174 with value: 0.1174441710522256.
[I 2024-10-23 00:39:46,616] Trial 188 finished with value: 0.177448768526755 and parameters: {'model_name': 'GAIN', 'batch_size': 234, 'hint_rate': 0.27741876854181585, 'alpha': 69, 'iterations': 438, 'learning_rate': 0.08190824179648201, 'p_miss': 0.29072683589237536}. Best is trial 174 with value: 0.1174441710522256.
[I 2024-10-23 00:44:53,525] Trial 181 finished with value: 0.18593653031998172 and parameters: {'model_name': 'GAIN', 'batch_size': 341, 'hint_rate': 0.2982863711728772, 'alpha': 70, 'iterations': 919, 'learning_rate': 0.011808911283084117, 'p_miss': 0.2913406784923849}. Best is trial 174 with value: 0.1174441710522256.
[I 2024-10-23 00:56:16,466] Trial 58 finished with value: 0.14210902629578076 and parameters: {'model_name': 'VAE', 'batch_size': 11, 'iterations': 7437, 'learning_rate': 0.004896199483292357, 'p_miss': 0.2052488115480514}. Best is trial 174 with value: 0.1174441710522256.
[I 2024-10-23 00:59:26,803] Trial 61 finished with value: 0.13863782008506065 and parameters: {'model_name': 'VAE', 'batch_size': 10, 'iterations': 6993, 'learning_rate': 0.005326431132083299, 'p_miss': 0.19464712758423294}. Best is trial 174 with value: 0.1174441710522256.
[I 2024-10-23 01:05:34,602] Trial 43 finished with value: 0.18253274352511292 and parameters: {'model_name': 'VAE', 'batch_size': 1, 'iterations': 9933, 'learning_rate': 0.0033381555730814592, 'p_miss': 0.2038995368516342}. Best is trial 174 with value: 0.1174441710522256.
[I 2024-10-23 01:06:37,958] Trial 46 finished with value: 0.13945785873584446 and parameters: {'model_name': 'VAE', 'batch_size': 20, 'iterations': 8608, 'learning_rate': 0.0080323407526119, 'p_miss': 0.19769634597617666}. Best is trial 174 with value: 0.1174441710522256.
[I 2024-10-23 01:10:20,685] Trial 60 finished with value: 0.13923362334992298 and parameters: {'model_name': 'VAE', 'batch_size': 8, 'iterations': 8203, 'learning_rate': 0.0044674192183176776, 'p_miss': 0.0912998529932055}. Best is trial 174 with value: 0.1174441710522256.
[I 2024-10-23 01:12:18,469] Trial 50 finished with value: 0.14445112781390376 and parameters: {'model_name': 'VAE', 'batch_size': 7, 'iterations': 8215, 'learning_rate': 0.006659004904318431, 'p_miss': 0.19407014128313332}. Best is trial 174 with value: 0.1174441710522256.
[I 2024-10-23 01:13:00,577] Trial 63 finished with value: 0.13570027718071528 and parameters: {'model_name': 'VAE', 'batch_size': 10, 'iterations': 7687, 'learning_rate': 0.0036318500836923437, 'p_miss': 0.19741188180632568}. Best is trial 174 with value: 0.1174441710522256.
[I 2024-10-23 01:14:01,246] Trial 51 finished with value: 0.14213816616876224 and parameters: {'model_name': 'VAE', 'batch_size': 6, 'iterations': 8708, 'learning_rate': 0.0071028188250207985, 'p_miss': 0.1949092542109314}. Best is trial 174 with value: 0.1174441710522256.
[I 2024-10-23 01:15:55,036] Trial 65 finished with value: 0.13862224215746985 and parameters: {'model_name': 'VAE', 'batch_size': 9, 'iterations': 8381, 'learning_rate': 0.0010032084078706496, 'p_miss': 0.09774478055058641}. Best is trial 174 with value: 0.1174441710522256.
[I 2024-10-23 01:16:35,968] Trial 55 finished with value: 0.13916553911464385 and parameters: {'model_name': 'VAE', 'batch_size': 13, 'iterations': 9643, 'learning_rate': 0.005630194326834576, 'p_miss': 0.1992985620453122}. Best is trial 174 with value: 0.1174441710522256.
fit
auto fit
auto transform
0    0
1    0
2    0
3    0
4    0
5    0
dtype: int64
0    0
1    0
2    0
3    0
4    0
5    0
dtype: int64
0.1174441710522256
{'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'mean', 'n_nearest_features': 6, 'imputation_order': 'arabic'}
running experiment 2/3 - Does reconstruction give good automl predictions
Start est fit
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
  0%|          | 0/25 [00:00<?, ?it/s]Generation:   0%|          | 0/25 [00:00<?, ?it/s]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155474700f40> 
 The 'min_samples_split' parameter of DecisionTreeClassifier must be an int in the range [2, inf) or a float in the range (0.0, 1.0]. Got 1 instead. 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1466, in wrapper
    estimator._validate_params()
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 666, in _validate_params
    validate_parameter_constraints(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/_param_validation.py", line 95, in validate_parameter_constraints
    raise InvalidParameterError(
sklearn.utils._param_validation.InvalidParameterError: The 'min_samples_split' parameter of DecisionTreeClassifier must be an int in the range [2, inf) or a float in the range (0.0, 1.0]. Got 1 instead.

Generation:  1
Best f1_score score: 0.6694453758892112
Generation:   4%|▍         | 1/25 [00:27<10:51, 27.15s/it]Generation:  2
Best f1_score score: 0.6694453758892112
Generation:   8%|▊         | 2/25 [02:38<33:51, 88.33s/it]Generation:  3
Best f1_score score: 0.6694453758892112
Generation:  12%|█▏        | 3/25 [03:41<28:13, 76.98s/it]Generation:  4
Best f1_score score: 0.6694453758892112
Generation:  16%|█▌        | 4/25 [09:02<1:00:36, 173.19s/it]Generation:  5
Best f1_score score: 0.6694453758892112
Generation:  20%|██        | 5/25 [09:18<38:50, 116.50s/it]  Generation:  6
Best f1_score score: 0.6694453758892112
Generation:  24%|██▍       | 6/25 [10:11<30:04, 94.96s/it] Generation:  7
Best f1_score score: 0.6694453758892112
Generation:  28%|██▊       | 7/25 [10:26<20:38, 68.80s/it]Generation:  8
Best f1_score score: 0.6734931402338
Generation:  32%|███▏      | 8/25 [13:41<30:51, 108.93s/it]Generation:  9
Best f1_score score: 0.6783028167379166
Generation:  36%|███▌      | 9/25 [13:59<21:28, 80.54s/it] Generation:  10
Best f1_score score: 0.6783028167379166
Generation:  40%|████      | 10/25 [14:14<15:05, 60.39s/it]Generation:  11
Best f1_score score: 0.6783028167379166
Generation:  44%|████▍     | 11/25 [14:44<11:54, 51.05s/it]Generation:  12
Best f1_score score: 0.6783028167379166
Generation:  48%|████▊     | 12/25 [15:05<09:02, 41.72s/it]Generation:  13
Best f1_score score: 0.6783028167379166
Generation:  52%|█████▏    | 13/25 [15:24<06:59, 34.95s/it]Generation:  14
Best f1_score score: 0.6783028167379166
Generation:  56%|█████▌    | 14/25 [16:15<07:16, 39.68s/it]Generation:  15
Best f1_score score: 0.6783028167379166
Generation:  60%|██████    | 15/25 [16:34<05:35, 33.51s/it]Generation:  16
Best f1_score score: 0.6783028167379166
Generation:  64%|██████▍   | 16/25 [17:06<04:59, 33.24s/it]Generation:  17
Best f1_score score: 0.6783028167379166
Generation:  68%|██████▊   | 17/25 [17:28<03:58, 29.86s/it]Generation:  18
Best f1_score score: 0.6783028167379166
Generation:  72%|███████▏  | 18/25 [17:49<03:08, 26.98s/it]Generation:  19
Best f1_score score: 0.6783028167379166
Generation:  76%|███████▌  | 19/25 [18:09<02:30, 25.05s/it]Generation:  20
Best f1_score score: 0.6783028167379166
Generation:  80%|████████  | 20/25 [19:19<03:13, 38.63s/it]Generation:  21
Best f1_score score: 0.6810127626017307
Generation:  84%|████████▍ | 21/25 [19:53<02:28, 37.12s/it]Generation:  22
Best f1_score score: 0.6810127626017307
Generation:  88%|████████▊ | 22/25 [26:30<07:14, 144.99s/it]Generation:  23
Best f1_score score: 0.6810127626017307
Generation:  92%|█████████▏| 23/25 [26:51<03:35, 107.81s/it]Generation:  24
Best f1_score score: 0.6810127626017307
Generation:  96%|█████████▌| 24/25 [27:14<01:22, 82.58s/it] Generation:  25
Best f1_score score: 0.6810127626017307
Generation: 100%|██████████| 25/25 [28:48<00:00, 86.02s/it]Generation: 100%|██████████| 25/25 [28:52<00:00, 69.30s/it]
2024-10-23 01:45:45,063 - distributed.scheduler - ERROR - Removing worker 'tcp://127.0.0.1:40839' caused the cluster to lose scattered data, which can't be recovered: {'ndarray-8862dd8e01311db50178e3552ea3c6b6', 'ndarray-b5f468972b7ffa9aa2eaa92c4caed8b0'} (stimulus_id='handle-worker-cleanup-1729673145.063217')
Fitted
Pipeline(steps=[('lineardiscriminantanalysis',
                 LinearDiscriminantAnalysis(shrinkage=0.06891386068,
                                            solver='lsqr'))])
score start
train score: {'auroc': 0.8295299487648995, 'accuracy': 0.9789850212385424, 'balanced_accuracy': 0.6349020414810642, 'logloss': 0.08503725680888079, 'f1': 0.6833977764307685}
original test score: {'auroc': 0.9255500792114065, 'accuracy': 0.9825659365221279, 'balanced_accuracy': 0.7094789649709559, 'logloss': 0.06406949274235058, 'f1': 0.7606193391191731}
imputed test score: {'auroc': 0.8255456785777152, 'accuracy': 0.9794367456414841, 'balanced_accuracy': 0.6515578243267031, 'logloss': 0.09266363340242326, 'f1': 0.6998961760108258}
score end
check intended
EXP2 Finished
running experiment 3/3 - What is the best automl settings?
<tpot2.search_spaces.pipelines.sequential.SequentialPipeline object at 0x1554350145e0>
Start tpot fit
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
  0%|          | 0/25 [00:00<?, ?it/s]Generation:   0%|          | 0/25 [00:00<?, ?it/s]Generation:  1
Best f1_score score: 0.624491811187435
Generation:   4%|▍         | 1/25 [04:09<1:39:47, 249.48s/it]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x1554745c6a40> 
 Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 31, in cross_val_score_objective
    this_fold_scores = [sklearn.metrics.get_scorer(scorer)(this_fold_pipeline, X_test, y_test) for scorer in scorers]
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 31, in <listcomp>
    this_fold_scores = [sklearn.metrics.get_scorer(scorer)(this_fold_pipeline, X_test, y_test) for scorer in scorers]
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/metrics/_scorer.py", line 279, in __call__
    return self._score(partial(_cached_call, None), estimator, X, y_true, **_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/metrics/_scorer.py", line 371, in _score
    y_pred = method_caller(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/metrics/_scorer.py", line 89, in _cached_call
    result, _ = _get_response_values(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/_response.py", line 211, in _get_response_values
    y_pred = prediction_method(X)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 601, in predict
    return self.steps[-1][1].predict(Xt, **params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 271, in predict
    neigh_ind = self.kneighbors(X, return_distance=False)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 825, in kneighbors
    X = self._validate_data(X, accept_sparse="csr", reset=False, order="C")
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 633, in _validate_data
    out = check_array(X, input_name="X", **check_params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1064, in check_array
    _assert_all_finite(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 123, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 172, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Generation:  2
Best f1_score score: 0.6321295456669953
Generation:   8%|▊         | 2/25 [04:36<45:31, 118.76s/it]  Generation:  3
Best f1_score score: 0.6321295456669953
Generation:  12%|█▏        | 3/25 [07:46<55:27, 151.26s/it]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x1554745adfc0> 
 Negative values in data passed to MultinomialNB (input X) 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/naive_bayes.py", line 759, in fit
    self._count(X, Y)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/naive_bayes.py", line 881, in _count
    check_non_negative(X, "MultinomialNB (input X)")
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1689, in check_non_negative
    raise ValueError("Negative values in data passed to %s" % whom)
ValueError: Negative values in data passed to MultinomialNB (input X)

Generation:  4
Best f1_score score: 0.6541290201192432
Generation:  16%|█▌        | 4/25 [11:34<1:03:33, 181.59s/it]Generation:  5
Best f1_score score: 0.6541290201192432
Generation:  20%|██        | 5/25 [14:35<1:00:23, 181.16s/it]Generation:  6
Best f1_score score: 0.6541290201192432
Generation:  24%|██▍       | 6/25 [19:12<1:07:44, 213.91s/it]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155474d74d00> 
 Input X contains NaN.
AdaBoostClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 31, in cross_val_score_objective
    this_fold_scores = [sklearn.metrics.get_scorer(scorer)(this_fold_pipeline, X_test, y_test) for scorer in scorers]
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 31, in <listcomp>
    this_fold_scores = [sklearn.metrics.get_scorer(scorer)(this_fold_pipeline, X_test, y_test) for scorer in scorers]
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/metrics/_scorer.py", line 279, in __call__
    return self._score(partial(_cached_call, None), estimator, X, y_true, **_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/metrics/_scorer.py", line 371, in _score
    y_pred = method_caller(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/metrics/_scorer.py", line 89, in _cached_call
    result, _ = _get_response_values(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/_response.py", line 211, in _get_response_values
    y_pred = prediction_method(X)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 601, in predict
    return self.steps[-1][1].predict(Xt, **params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py", line 727, in predict
    pred = self.decision_function(X)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py", line 788, in decision_function
    X = self._check_X(X)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py", line 98, in _check_X
    return self._validate_data(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 633, in _validate_data
    out = check_array(X, input_name="X", **check_params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1064, in check_array
    _assert_all_finite(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 123, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 172, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
AdaBoostClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Generation:  7
Best f1_score score: 0.6705815924880849
Generation:  28%|██▊       | 7/25 [23:25<1:07:56, 226.48s/it]Generation:  8
Best f1_score score: 0.6705815924880849
Generation:  32%|███▏      | 8/25 [27:43<1:07:01, 236.58s/it]Generation:  9
Best f1_score score: 0.6705815924880849
Generation:  36%|███▌      | 9/25 [32:01<1:04:55, 243.46s/it]Generation:  10
Best f1_score score: 0.67881567607801
Generation:  40%|████      | 10/25 [36:20<1:02:03, 248.25s/it]Generation:  11
Best f1_score score: 0.67881567607801
Generation:  44%|████▍     | 11/25 [40:32<58:09, 249.28s/it]  WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x15545fdcc550> 
 Input X contains NaN.
AdaBoostClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 31, in cross_val_score_objective
    this_fold_scores = [sklearn.metrics.get_scorer(scorer)(this_fold_pipeline, X_test, y_test) for scorer in scorers]
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 31, in <listcomp>
    this_fold_scores = [sklearn.metrics.get_scorer(scorer)(this_fold_pipeline, X_test, y_test) for scorer in scorers]
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/metrics/_scorer.py", line 279, in __call__
    return self._score(partial(_cached_call, None), estimator, X, y_true, **_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/metrics/_scorer.py", line 371, in _score
    y_pred = method_caller(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/metrics/_scorer.py", line 89, in _cached_call
    result, _ = _get_response_values(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/_response.py", line 211, in _get_response_values
    y_pred = prediction_method(X)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 601, in predict
    return self.steps[-1][1].predict(Xt, **params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py", line 727, in predict
    pred = self.decision_function(X)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py", line 788, in decision_function
    X = self._check_X(X)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py", line 98, in _check_X
    return self._validate_data(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 633, in _validate_data
    out = check_array(X, input_name="X", **check_params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1064, in check_array
    _assert_all_finite(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 123, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 172, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
AdaBoostClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Generation:  12
Best f1_score score: 0.67881567607801
Generation:  48%|████▊     | 12/25 [44:56<54:58, 253.73s/it]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155456fd5ff0> 
 Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 31, in cross_val_score_objective
    this_fold_scores = [sklearn.metrics.get_scorer(scorer)(this_fold_pipeline, X_test, y_test) for scorer in scorers]
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 31, in <listcomp>
    this_fold_scores = [sklearn.metrics.get_scorer(scorer)(this_fold_pipeline, X_test, y_test) for scorer in scorers]
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/metrics/_scorer.py", line 279, in __call__
    return self._score(partial(_cached_call, None), estimator, X, y_true, **_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/metrics/_scorer.py", line 371, in _score
    y_pred = method_caller(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/metrics/_scorer.py", line 89, in _cached_call
    result, _ = _get_response_values(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/_response.py", line 211, in _get_response_values
    y_pred = prediction_method(X)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 601, in predict
    return self.steps[-1][1].predict(Xt, **params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 271, in predict
    neigh_ind = self.kneighbors(X, return_distance=False)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 825, in kneighbors
    X = self._validate_data(X, accept_sparse="csr", reset=False, order="C")
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 633, in _validate_data
    out = check_array(X, input_name="X", **check_params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1064, in check_array
    _assert_all_finite(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 123, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 172, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Generation:  13
Best f1_score score: 0.67881567607801
Generation:  52%|█████▏    | 13/25 [49:17<51:12, 256.01s/it]Generation:  14
Best f1_score score: 0.67881567607801
Generation:  56%|█████▌    | 14/25 [53:41<47:23, 258.51s/it]Generation:  15
Best f1_score score: 0.67881567607801
Generation:  60%|██████    | 15/25 [58:42<45:11, 271.15s/it]Generation:  16
Best f1_score score: 0.67881567607801
Generation:  64%|██████▍   | 16/25 [1:03:07<40:25, 269.49s/it]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x15541387d8d0> 
 Input X contains NaN.
AdaBoostClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 31, in cross_val_score_objective
    this_fold_scores = [sklearn.metrics.get_scorer(scorer)(this_fold_pipeline, X_test, y_test) for scorer in scorers]
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 31, in <listcomp>
    this_fold_scores = [sklearn.metrics.get_scorer(scorer)(this_fold_pipeline, X_test, y_test) for scorer in scorers]
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/metrics/_scorer.py", line 279, in __call__
    return self._score(partial(_cached_call, None), estimator, X, y_true, **_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/metrics/_scorer.py", line 371, in _score
    y_pred = method_caller(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/metrics/_scorer.py", line 89, in _cached_call
    result, _ = _get_response_values(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/_response.py", line 211, in _get_response_values
    y_pred = prediction_method(X)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 601, in predict
    return self.steps[-1][1].predict(Xt, **params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py", line 727, in predict
    pred = self.decision_function(X)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py", line 788, in decision_function
    X = self._check_X(X)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py", line 98, in _check_X
    return self._validate_data(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 633, in _validate_data
    out = check_array(X, input_name="X", **check_params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1064, in check_array
    _assert_all_finite(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 123, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 172, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
AdaBoostClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Generation:  17
Best f1_score score: 0.67881567607801
Generation:  68%|██████▊   | 17/25 [1:07:28<35:33, 266.69s/it]Generation:  18
Best f1_score score: 0.67881567607801
Generation:  72%|███████▏  | 18/25 [1:11:46<30:49, 264.21s/it]Generation:  19
Best f1_score score: 0.67881567607801
Generation:  76%|███████▌  | 19/25 [1:17:35<28:58, 289.73s/it]Generation:  20
Best f1_score score: 0.67881567607801
Generation:  80%|████████  | 20/25 [1:21:44<23:07, 277.52s/it]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x15545a3af190> 
 Input X contains NaN.
AdaBoostClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 31, in cross_val_score_objective
    this_fold_scores = [sklearn.metrics.get_scorer(scorer)(this_fold_pipeline, X_test, y_test) for scorer in scorers]
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 31, in <listcomp>
    this_fold_scores = [sklearn.metrics.get_scorer(scorer)(this_fold_pipeline, X_test, y_test) for scorer in scorers]
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/metrics/_scorer.py", line 279, in __call__
    return self._score(partial(_cached_call, None), estimator, X, y_true, **_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/metrics/_scorer.py", line 371, in _score
    y_pred = method_caller(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/metrics/_scorer.py", line 89, in _cached_call
    result, _ = _get_response_values(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/_response.py", line 211, in _get_response_values
    y_pred = prediction_method(X)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 601, in predict
    return self.steps[-1][1].predict(Xt, **params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py", line 727, in predict
    pred = self.decision_function(X)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py", line 788, in decision_function
    X = self._check_X(X)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py", line 98, in _check_X
    return self._validate_data(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 633, in _validate_data
    out = check_array(X, input_name="X", **check_params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1064, in check_array
    _assert_all_finite(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 123, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 172, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
AdaBoostClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Generation:  21
Best f1_score score: 0.6801418947605722
Generation:  84%|████████▍ | 21/25 [1:26:47<19:00, 285.12s/it]Generation:  22
Best f1_score score: 0.6801418947605722
Generation:  88%|████████▊ | 22/25 [1:31:08<13:53, 277.99s/it]Generation:  23
Best f1_score score: 0.6801418947605722
Generation:  92%|█████████▏| 23/25 [1:35:21<09:00, 270.41s/it]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x15545a2fc040> 
 Input X contains NaN.
AdaBoostClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 31, in cross_val_score_objective
    this_fold_scores = [sklearn.metrics.get_scorer(scorer)(this_fold_pipeline, X_test, y_test) for scorer in scorers]
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 31, in <listcomp>
    this_fold_scores = [sklearn.metrics.get_scorer(scorer)(this_fold_pipeline, X_test, y_test) for scorer in scorers]
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/metrics/_scorer.py", line 279, in __call__
    return self._score(partial(_cached_call, None), estimator, X, y_true, **_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/metrics/_scorer.py", line 371, in _score
    y_pred = method_caller(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/metrics/_scorer.py", line 89, in _cached_call
    result, _ = _get_response_values(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/_response.py", line 211, in _get_response_values
    y_pred = prediction_method(X)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 601, in predict
    return self.steps[-1][1].predict(Xt, **params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py", line 727, in predict
    pred = self.decision_function(X)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py", line 788, in decision_function
    X = self._check_X(X)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py", line 98, in _check_X
    return self._validate_data(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 633, in _validate_data
    out = check_array(X, input_name="X", **check_params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1064, in check_array
    _assert_all_finite(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 123, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 172, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
AdaBoostClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Generation:  24
Best f1_score score: 0.6801418947605722
Generation:  96%|█████████▌| 24/25 [1:39:33<04:24, 264.82s/it]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x1554745959f0> 
 Input X contains NaN.
AdaBoostClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 31, in cross_val_score_objective
    this_fold_scores = [sklearn.metrics.get_scorer(scorer)(this_fold_pipeline, X_test, y_test) for scorer in scorers]
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 31, in <listcomp>
    this_fold_scores = [sklearn.metrics.get_scorer(scorer)(this_fold_pipeline, X_test, y_test) for scorer in scorers]
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/metrics/_scorer.py", line 279, in __call__
    return self._score(partial(_cached_call, None), estimator, X, y_true, **_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/metrics/_scorer.py", line 371, in _score
    y_pred = method_caller(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/metrics/_scorer.py", line 89, in _cached_call
    result, _ = _get_response_values(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/_response.py", line 211, in _get_response_values
    y_pred = prediction_method(X)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 601, in predict
    return self.steps[-1][1].predict(Xt, **params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py", line 727, in predict
    pred = self.decision_function(X)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py", line 788, in decision_function
    X = self._check_X(X)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py", line 98, in _check_X
    return self._validate_data(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 633, in _validate_data
    out = check_array(X, input_name="X", **check_params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1064, in check_array
    _assert_all_finite(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 123, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 172, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
AdaBoostClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155457097700> 
 Input X contains NaN.
AdaBoostClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 31, in cross_val_score_objective
    this_fold_scores = [sklearn.metrics.get_scorer(scorer)(this_fold_pipeline, X_test, y_test) for scorer in scorers]
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 31, in <listcomp>
    this_fold_scores = [sklearn.metrics.get_scorer(scorer)(this_fold_pipeline, X_test, y_test) for scorer in scorers]
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/metrics/_scorer.py", line 279, in __call__
    return self._score(partial(_cached_call, None), estimator, X, y_true, **_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/metrics/_scorer.py", line 371, in _score
    y_pred = method_caller(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/metrics/_scorer.py", line 89, in _cached_call
    result, _ = _get_response_values(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/_response.py", line 211, in _get_response_values
    y_pred = prediction_method(X)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 601, in predict
    return self.steps[-1][1].predict(Xt, **params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py", line 727, in predict
    pred = self.decision_function(X)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py", line 788, in decision_function
    X = self._check_X(X)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py", line 98, in _check_X
    return self._validate_data(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 633, in _validate_data
    out = check_array(X, input_name="X", **check_params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1064, in check_array
    _assert_all_finite(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 123, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 172, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
AdaBoostClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Generation:  25
Best f1_score score: 0.6801418947605722
Generation: 100%|██████████| 25/25 [1:43:53<00:00, 263.42s/it]Generation: 100%|██████████| 25/25 [1:43:53<00:00, 249.34s/it]
2024-10-23 03:30:49,963 - distributed.scheduler - ERROR - Removing worker 'tcp://127.0.0.1:44175' caused the cluster to lose scattered data, which can't be recovered: {'DataFrame-d77892024fabd66d8179e60fda8576b6', 'ndarray-b5f468972b7ffa9aa2eaa92c4caed8b0'} (stimulus_id='handle-worker-cleanup-1729679449.963878')
Fitted
Pipeline(steps=[('iterativeimputer',
                 IterativeImputer(estimator=RandomForestRegressor(),
                                  imputation_order='arabic',
                                  initial_strategy='constant',
                                  n_nearest_features=55)),
                ('lgbmclassifier',
                 LGBMClassifier(boosting_type='dart', max_depth=9,
                                n_estimators=26, n_jobs=1, num_leaves=180,
                                verbose=-1))])
transform worked
try transform
transform worked
score start
train score: {'auroc': 0.9659863196999842, 'accuracy': 0.9865861837692823, 'balanced_accuracy': 0.7209249608253957, 'logloss': 0.03973154215566629, 'f1': 0.7992201620722263}
test score: {'auroc': 0.7917356099278297, 'accuracy': 0.9740724184175235, 'balanced_accuracy': 0.5455597606055272, 'logloss': 0.09327361627113323, 'f1': 0.5669474780379696}
original test score: {'auroc': 0.9267646541101917, 'accuracy': 0.9812248547161377, 'balanced_accuracy': 0.6712462594613624, 'logloss': 0.06166780855598152, 'f1': 0.7259921607055365}
score end
310
lvl
0.5
type
MCAR
num_run
2
class_full
finished
all finished
full run takes
8.364872626198663
hours
DONE
