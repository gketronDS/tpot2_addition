Run: 29
/cm/local/apps/slurm/var/spool/job1061476/slurm_script: line 27: 
pip install -e tpot2
pip install -r tpot2/ImputerExperiments/requirements_.txt
: No such file or directory
RunStart
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
starting loops
../data/c/40498/40498.pkl
working on 
../data/c/40498/class_full_MAR_0.01_2
3.752920150756836
running experiment 1/3 - Does large hyperparameter space improve reconstruction accuracy over simple
[I 2024-11-16 22:28:52,237] A new study created in memory with name: no-name-01bb0566-2c71-4714-ac88-3acd08900053
running
running
running
running
running
running
running
running
running
running
running
running
running
running
running
running
[I 2024-11-16 22:28:52,617] Trial 3 finished with value: 0.13305854393262181 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'most_frequent'}. Best is trial 3 with value: 0.13305854393262181.
running
[I 2024-11-16 22:28:53,877] Trial 4 finished with value: 0.10630853233287303 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 1941, 'weights': 'uniform'}. Best is trial 4 with value: 0.10630853233287303.
running
[I 2024-11-16 22:28:54,181] Trial 5 finished with value: 0.0881012935122908 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 1201, 'weights': 'distance'}. Best is trial 5 with value: 0.0881012935122908.
[I 2024-11-16 22:28:54,285] Trial 17 finished with value: 0.11970235080330431 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 5 with value: 0.0881012935122908.
running
running
[I 2024-11-16 22:28:54,532] Trial 0 finished with value: 0.09479943271857602 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 2105, 'weights': 'distance'}. Best is trial 5 with value: 0.0881012935122908.
running
[I 2024-11-16 22:28:54,765] Trial 19 finished with value: 0.1203464391854809 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'mean'}. Best is trial 5 with value: 0.0881012935122908.
running
[I 2024-11-16 22:28:54,931] Trial 9 finished with value: 0.10165702951335209 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 1532, 'weights': 'uniform'}. Best is trial 5 with value: 0.0881012935122908.
running
[I 2024-11-16 22:28:55,301] Trial 15 finished with value: 0.09971036656678867 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 2712, 'weights': 'distance'}. Best is trial 5 with value: 0.0881012935122908.
running
[I 2024-11-16 22:28:56,818] Trial 20 finished with value: 0.10176720884941304 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3530, 'weights': 'distance'}. Best is trial 5 with value: 0.0881012935122908.
running
[I 2024-11-16 22:28:57,271] Trial 21 finished with value: 0.10116672856036138 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 2897, 'weights': 'distance'}. Best is trial 5 with value: 0.0881012935122908.
running
[I 2024-11-16 22:28:57,515] Trial 23 finished with value: 0.08186006628636032 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 377, 'weights': 'distance'}. Best is trial 23 with value: 0.08186006628636032.
running
[I 2024-11-16 22:28:58,809] Trial 24 finished with value: 0.1203464391854809 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3652, 'weights': 'uniform'}. Best is trial 23 with value: 0.08186006628636032.
running
[I 2024-11-16 22:29:00,328] Trial 7 finished with value: 0.10938804674304478 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Bayesian', 'initial_strategy': 'median', 'n_nearest_features': 1, 'imputation_order': 'ascending', 'sample_posterior': False}. Best is trial 23 with value: 0.08186006628636032.
running
[I 2024-11-16 22:29:02,722] Trial 27 finished with value: 0.23402297120407808 and parameters: {'model_name': 'GAIN', 'batch_size': 33, 'hint_rate': 0.5250130427778177, 'alpha': 79, 'iterations': 1, 'learning_rate': 0.021822163265865176, 'p_miss': 0.278700797752562}. Best is trial 23 with value: 0.08186006628636032.
running
[I 2024-11-16 22:29:05,222] Trial 14 finished with value: 0.26001490749536105 and parameters: {'model_name': 'VAE', 'batch_size': 1, 'iterations': 4, 'learning_rate': 0.009671208663161648, 'p_miss': 0.013823157264309629}. Best is trial 23 with value: 0.08186006628636032.
running
[I 2024-11-16 22:29:06,125] Trial 12 finished with value: inf and parameters: {'model_name': 'GAIN', 'batch_size': 3, 'hint_rate': 0.7965849008778161, 'alpha': 25, 'iterations': 55, 'learning_rate': 0.00023354612348820388, 'p_miss': 0.15519235289710676}. Best is trial 23 with value: 0.08186006628636032.
running
[I 2024-11-16 22:29:09,040] Trial 22 finished with value: 0.08182567813834449 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Ridge', 'initial_strategy': 'most_frequent', 'n_nearest_features': 7, 'imputation_order': 'descending'}. Best is trial 22 with value: 0.08182567813834449.
running
[I 2024-11-16 22:29:12,148] Trial 25 finished with value: 0.07693826693057 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Ridge', 'initial_strategy': 'mean', 'n_nearest_features': 9, 'imputation_order': 'descending'}. Best is trial 25 with value: 0.07693826693057.
running
[I 2024-11-16 22:29:19,979] Trial 11 finished with value: 0.09237310667634185 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Bayesian', 'initial_strategy': 'most_frequent', 'n_nearest_features': 4, 'imputation_order': 'descending', 'sample_posterior': False}. Best is trial 25 with value: 0.07693826693057.
running
[I 2024-11-16 22:29:20,958] Trial 13 finished with value: 0.07840511080752557 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'most_frequent', 'n_nearest_features': 8, 'imputation_order': 'arabic'}. Best is trial 25 with value: 0.07693826693057.
running
[I 2024-11-16 22:29:23,772] Trial 32 finished with value: 0.07630170383392483 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Ridge', 'initial_strategy': 'most_frequent', 'n_nearest_features': 10, 'imputation_order': 'descending'}. Best is trial 32 with value: 0.07630170383392483.
running
[I 2024-11-16 22:29:24,403] Trial 16 finished with value: 0.08564214867320831 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Bayesian', 'initial_strategy': 'median', 'n_nearest_features': 6, 'imputation_order': 'arabic', 'sample_posterior': False}. Best is trial 32 with value: 0.07630170383392483.
running
[I 2024-11-16 22:29:25,641] Trial 6 finished with value: 0.12412942989638683 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Bayesian', 'initial_strategy': 'median', 'n_nearest_features': 4, 'imputation_order': 'ascending', 'sample_posterior': True}. Best is trial 32 with value: 0.07630170383392483.
running
[I 2024-11-16 22:29:27,895] Trial 33 finished with value: 0.07693826693057 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Ridge', 'initial_strategy': 'mean', 'n_nearest_features': 9, 'imputation_order': 'descending'}. Best is trial 32 with value: 0.07630170383392483.
running
[I 2024-11-16 22:29:38,849] Trial 34 finished with value: 0.07631740300088573 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Ridge', 'initial_strategy': 'mean', 'n_nearest_features': 10, 'imputation_order': 'descending'}. Best is trial 32 with value: 0.07630170383392483.
running
[I 2024-11-16 22:29:45,984] Trial 39 finished with value: 0.07631740300088574 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Ridge', 'initial_strategy': 'mean', 'n_nearest_features': 11, 'imputation_order': 'descending'}. Best is trial 32 with value: 0.07630170383392483.
running
[I 2024-11-16 22:29:46,735] Trial 10 finished with value: 0.10508422041022851 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Bayesian', 'initial_strategy': 'mean', 'n_nearest_features': 9, 'imputation_order': 'ascending', 'sample_posterior': True}. Best is trial 32 with value: 0.07630170383392483.
running
[I 2024-11-16 22:29:54,024] Trial 35 finished with value: 0.07648467603604044 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'mean', 'n_nearest_features': 11, 'imputation_order': 'arabic'}. Best is trial 32 with value: 0.07630170383392483.
running
[I 2024-11-16 22:29:56,390] Trial 37 finished with value: 0.07695740604161273 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'mean', 'n_nearest_features': 11, 'imputation_order': 'descending'}. Best is trial 32 with value: 0.07630170383392483.
running
[I 2024-11-16 22:29:56,630] Trial 36 finished with value: 0.07648467603604044 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'mean', 'n_nearest_features': 11, 'imputation_order': 'arabic'}. Best is trial 32 with value: 0.07630170383392483.
running
[I 2024-11-16 22:29:57,130] Trial 38 finished with value: 0.07695740604161273 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'mean', 'n_nearest_features': 11, 'imputation_order': 'descending'}. Best is trial 32 with value: 0.07630170383392483.
running
[I 2024-11-16 22:35:53,290] Trial 28 finished with value: 0.2745952030539018 and parameters: {'model_name': 'GAIN', 'batch_size': 29, 'hint_rate': 0.6206526208170784, 'alpha': 1, 'iterations': 338, 'learning_rate': 0.01701763368930537, 'p_miss': 0.23837228642493186}. Best is trial 32 with value: 0.07630170383392483.
running
[I 2024-11-16 22:37:27,578] Trial 1 finished with value: inf and parameters: {'model_name': 'GAIN', 'batch_size': 4, 'hint_rate': 0.20882530450746412, 'alpha': 32, 'iterations': 2141, 'learning_rate': 0.053682416977093354, 'p_miss': 0.07449593065585153}. Best is trial 32 with value: 0.07630170383392483.
running
[I 2024-11-16 22:53:55,836] Trial 18 finished with value: 0.08645119956386493 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'constant', 'n_nearest_features': 3, 'imputation_order': 'roman'}. Best is trial 32 with value: 0.07630170383392483.
running
[I 2024-11-16 23:04:12,548] Trial 26 finished with value: 0.06865512660228908 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 10, 'imputation_order': 'arabic'}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 02:09:26,892] Trial 2 finished with value: 0.3005102724097653 and parameters: {'model_name': 'GAIN', 'batch_size': 59, 'hint_rate': 0.4975398854009539, 'alpha': 21, 'iterations': 7805, 'learning_rate': 0.012483151551909854, 'p_miss': 0.29097714517461437}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 02:13:52,769] Trial 51 finished with value: 0.2673210795390801 and parameters: {'model_name': 'VAE', 'batch_size': 871, 'iterations': 46, 'learning_rate': 0.0004584712477576978, 'p_miss': 0.17057663221708352}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 02:14:43,224] Trial 52 finished with value: 0.2745785867794007 and parameters: {'model_name': 'VAE', 'batch_size': 943, 'iterations': 6, 'learning_rate': 0.0015176117367318178, 'p_miss': 0.0929365379658817}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 02:15:00,246] Trial 53 finished with value: 0.0763363272757879 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Ridge', 'initial_strategy': 'most_frequent', 'n_nearest_features': 10, 'imputation_order': 'random'}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 02:15:00,612] Trial 54 finished with value: 0.2979859068512759 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'constant'}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 02:50:10,110] Trial 55 finished with value: 0.06995092921058321 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 10, 'imputation_order': 'descending'}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 03:25:27,704] Trial 56 finished with value: 0.07016140591756548 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 10, 'imputation_order': 'descending'}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 03:57:51,153] Trial 31 finished with value: 0.11938019384038756 and parameters: {'model_name': 'VAE', 'batch_size': 315, 'iterations': 5646, 'learning_rate': 0.00010004828474265075, 'p_miss': 0.010276751025715125}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 03:58:53,362] Trial 57 finished with value: 0.06940268553036272 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 9, 'imputation_order': 'descending'}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 04:32:06,046] Trial 59 finished with value: 0.06929876767596584 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 9, 'imputation_order': 'descending'}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 04:32:12,004] Trial 58 finished with value: 0.07036209314843642 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 9, 'imputation_order': 'descending'}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 05:04:09,148] Trial 60 finished with value: 0.07099649069879972 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 8, 'imputation_order': 'random'}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 05:05:33,058] Trial 61 finished with value: 0.07147370053965216 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 8, 'imputation_order': 'roman'}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 05:08:29,720] Trial 29 finished with value: 0.13419478262535361 and parameters: {'model_name': 'VAE', 'batch_size': 1, 'iterations': 7741, 'learning_rate': 0.00017010479852257513, 'p_miss': 0.04839964985328389}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 05:13:17,976] Trial 47 finished with value: 0.11961025177344364 and parameters: {'model_name': 'VAE', 'batch_size': 301, 'iterations': 6888, 'learning_rate': 0.00011227927799835143, 'p_miss': 0.07038892113373808}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 05:36:21,922] Trial 62 finished with value: 0.07141373812119958 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 8, 'imputation_order': 'roman'}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 05:41:22,855] Trial 63 finished with value: 0.06985562691001902 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 10, 'imputation_order': 'descending'}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 05:44:43,729] Trial 64 finished with value: 0.06994499544955632 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 10, 'imputation_order': 'descending'}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 05:48:49,248] Trial 65 finished with value: 0.06917589155538247 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 10, 'imputation_order': 'descending'}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 06:08:18,110] Trial 66 finished with value: 0.07004030513523135 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 9, 'imputation_order': 'descending'}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 06:08:18,485] Trial 70 finished with value: 0.2979859068512759 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'constant'}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 06:15:17,012] Trial 67 finished with value: 0.06958822604603354 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 10, 'imputation_order': 'descending'}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 06:18:55,100] Trial 68 finished with value: 0.06959675029950525 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 10, 'imputation_order': 'descending'}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 06:19:18,251] Trial 71 finished with value: 0.23097543592552183 and parameters: {'model_name': 'GAIN', 'batch_size': 9, 'hint_rate': 0.023420949942397407, 'alpha': 95, 'iterations': 366, 'learning_rate': 0.002279192367643859, 'p_miss': 0.2059027144740158}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 06:20:45,624] Trial 69 finished with value: 0.06964419349924991 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 9, 'imputation_order': 'descending'}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 06:26:09,710] Trial 46 finished with value: 0.11983431862925804 and parameters: {'model_name': 'VAE', 'batch_size': 824, 'iterations': 5772, 'learning_rate': 0.00010127537971475589, 'p_miss': 0.024624330732684524}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 06:30:15,876] Trial 73 finished with value: 0.2300343207392519 and parameters: {'model_name': 'GAIN', 'batch_size': 9, 'hint_rate': 0.040074355116245186, 'alpha': 97, 'iterations': 378, 'learning_rate': 0.0013878731981075774, 'p_miss': 0.21033103954291454}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 06:32:04,200] Trial 44 finished with value: 0.11969351888505189 and parameters: {'model_name': 'VAE', 'batch_size': 957, 'iterations': 5811, 'learning_rate': 0.00014963523680969724, 'p_miss': 0.04282395299888317}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 06:40:38,004] Trial 72 finished with value: 0.24213210237438015 and parameters: {'model_name': 'GAIN', 'batch_size': 7, 'hint_rate': 0.026077888809545147, 'alpha': 95, 'iterations': 854, 'learning_rate': 0.002087415871674236, 'p_miss': 0.2124534651447097}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 06:47:06,169] Trial 74 finished with value: 0.072758645960825 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'constant', 'n_nearest_features': 7, 'imputation_order': 'arabic'}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 06:49:08,364] Trial 75 finished with value: 0.07219798525535395 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'constant', 'n_nearest_features': 7, 'imputation_order': 'ascending'}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 06:55:15,853] Trial 40 finished with value: 0.11974690443560738 and parameters: {'model_name': 'VAE', 'batch_size': 750, 'iterations': 6180, 'learning_rate': 0.00010015992032252797, 'p_miss': 0.01843658128195877}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 06:56:39,295] Trial 76 finished with value: 0.06951642326702513 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'constant', 'n_nearest_features': 9, 'imputation_order': 'descending'}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 07:01:16,749] Trial 77 finished with value: 0.06930892917276897 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'constant', 'n_nearest_features': 9, 'imputation_order': 'descending'}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 07:02:18,085] Trial 78 finished with value: 0.06953241972937463 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'constant', 'n_nearest_features': 9, 'imputation_order': 'descending'}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 07:11:37,787] Trial 79 finished with value: 0.06903785751565217 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'constant', 'n_nearest_features': 9, 'imputation_order': 'descending'}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 07:17:22,507] Trial 80 finished with value: 0.06980577535064866 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 9, 'imputation_order': 'descending'}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 07:19:48,567] Trial 81 finished with value: 0.06944427108113971 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 9, 'imputation_order': 'descending'}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 07:22:57,395] Trial 41 finished with value: 0.11969375309290328 and parameters: {'model_name': 'VAE', 'batch_size': 600, 'iterations': 7335, 'learning_rate': 0.00011150329999924137, 'p_miss': 0.017325411049895184}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 07:24:27,010] Trial 8 finished with value: 0.12018175344029154 and parameters: {'model_name': 'VAE', 'batch_size': 12, 'iterations': 7296, 'learning_rate': 0.00781556187270062, 'p_miss': 0.1685328236208714}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 07:25:57,599] Trial 82 finished with value: 0.0699122663367614 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 9, 'imputation_order': 'descending'}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 07:27:43,716] Trial 91 finished with value: 0.11804020561152573 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Bayesian', 'initial_strategy': 'constant', 'n_nearest_features': 8, 'imputation_order': 'ascending', 'sample_posterior': True}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 07:27:46,311] Trial 92 finished with value: 0.08190789399525884 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 53, 'weights': 'uniform'}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 07:28:21,540] Trial 83 finished with value: 0.06964048005745117 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'constant', 'n_nearest_features': 9, 'imputation_order': 'descending'}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 07:28:22,094] Trial 94 finished with value: 0.11970235080330431 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 07:32:26,096] Trial 85 finished with value: 0.07217614716632897 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'constant', 'n_nearest_features': 8, 'imputation_order': 'ascending'}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 07:33:47,101] Trial 84 finished with value: 0.07123054281892101 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'constant', 'n_nearest_features': 9, 'imputation_order': 'ascending'}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 07:41:53,528] Trial 43 finished with value: 0.1197426984576619 and parameters: {'model_name': 'VAE', 'batch_size': 758, 'iterations': 7077, 'learning_rate': 0.00010670427954339094, 'p_miss': 0.011067772124103259}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 07:42:52,850] Trial 86 finished with value: 0.07234324944364877 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'constant', 'n_nearest_features': 8, 'imputation_order': 'ascending'}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 07:44:20,355] Trial 93 finished with value: 0.10358266663781027 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'constant', 'n_nearest_features': 1, 'imputation_order': 'arabic'}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 07:48:08,979] Trial 87 finished with value: 0.07193779949102327 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'constant', 'n_nearest_features': 8, 'imputation_order': 'ascending'}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 07:50:01,587] Trial 49 finished with value: 0.11978180702493035 and parameters: {'model_name': 'VAE', 'batch_size': 704, 'iterations': 6701, 'learning_rate': 0.000695245369870469, 'p_miss': 0.16983599209053496}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 07:50:53,171] Trial 88 finished with value: 0.07169307699927327 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'constant', 'n_nearest_features': 8, 'imputation_order': 'ascending'}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 07:52:37,665] Trial 103 finished with value: 0.11131277774314083 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Bayesian', 'initial_strategy': 'median', 'n_nearest_features': 9, 'imputation_order': 'descending', 'sample_posterior': True}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 07:55:00,304] Trial 89 finished with value: 0.07296539624759898 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'constant', 'n_nearest_features': 8, 'imputation_order': 'ascending'}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 07:56:12,028] Trial 90 finished with value: 0.0719227420473479 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'constant', 'n_nearest_features': 8, 'imputation_order': 'ascending'}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 07:58:13,724] Trial 95 finished with value: 0.07135292780642821 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'median', 'n_nearest_features': 8, 'imputation_order': 'arabic'}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 08:00:53,123] Trial 97 finished with value: 0.07738704598051314 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'median', 'n_nearest_features': 5, 'imputation_order': 'descending'}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 08:03:47,664] Trial 96 finished with value: 0.06867250846865774 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'constant', 'n_nearest_features': 9, 'imputation_order': 'descending'}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 08:03:51,140] Trial 99 finished with value: 0.10041384939932965 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'median', 'n_nearest_features': 2, 'imputation_order': 'arabic'}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 08:03:54,276] Trial 110 finished with value: 0.09576709770719202 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 956, 'weights': 'uniform'}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 08:04:56,593] Trial 50 finished with value: 0.11895796185449528 and parameters: {'model_name': 'VAE', 'batch_size': 221, 'iterations': 8913, 'learning_rate': 0.00032843393001776163, 'p_miss': 0.16926599692419989}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 08:07:42,793] Trial 98 finished with value: 0.0771041863274851 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'median', 'n_nearest_features': 5, 'imputation_order': 'descending'}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 08:15:18,072] Trial 100 finished with value: 0.07055822065120089 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'median', 'n_nearest_features': 9, 'imputation_order': 'descending'}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 08:16:58,532] Trial 104 finished with value: 0.07679066885861283 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'median', 'n_nearest_features': 5, 'imputation_order': 'descending'}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 08:17:20,692] Trial 115 finished with value: 0.0752209057959899 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'constant', 'n_nearest_features': 10, 'imputation_order': 'descending'}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 08:18:39,175] Trial 101 finished with value: 0.07015153079450906 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'median', 'n_nearest_features': 9, 'imputation_order': 'descending'}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 08:19:14,877] Trial 105 finished with value: 0.07687881565917629 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'median', 'n_nearest_features': 5, 'imputation_order': 'descending'}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 08:20:16,512] Trial 102 finished with value: 0.06913442263539402 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'constant', 'n_nearest_features': 9, 'imputation_order': 'descending'}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 08:26:56,393] Trial 106 finished with value: 0.06970779275296485 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'median', 'n_nearest_features': 10, 'imputation_order': 'descending'}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 08:26:57,620] Trial 120 finished with value: 0.13305854393262181 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'most_frequent'}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 08:28:39,983] Trial 107 finished with value: 0.070204898292978 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 10, 'imputation_order': 'descending'}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 08:30:32,246] Trial 122 finished with value: 0.07752344172294405 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Bayesian', 'initial_strategy': 'constant', 'n_nearest_features': 9, 'imputation_order': 'random', 'sample_posterior': False}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 08:33:00,185] Trial 108 finished with value: 0.06967379149290634 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 10, 'imputation_order': 'descending'}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 08:33:44,616] Trial 109 finished with value: 0.068932595131424 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'constant', 'n_nearest_features': 9, 'imputation_order': 'descending'}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 08:34:13,061] Trial 125 finished with value: 0.07638086008683619 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Ridge', 'initial_strategy': 'constant', 'n_nearest_features': 11, 'imputation_order': 'roman'}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 08:34:35,595] Trial 111 finished with value: 0.06891028573747321 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'constant', 'n_nearest_features': 9, 'imputation_order': 'descending'}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 08:35:23,987] Trial 112 finished with value: 0.06959634771426144 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'constant', 'n_nearest_features': 9, 'imputation_order': 'descending'}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 08:37:58,408] Trial 113 finished with value: 0.06923246882959756 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'constant', 'n_nearest_features': 9, 'imputation_order': 'descending'}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 08:46:53,705] Trial 114 finished with value: 0.070717173671924 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'constant', 'n_nearest_features': 10, 'imputation_order': 'descending'}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 08:47:31,161] Trial 130 finished with value: 0.23932207037045408 and parameters: {'model_name': 'GAIN', 'batch_size': 64, 'hint_rate': 0.987265227137456, 'alpha': 61, 'iterations': 18, 'learning_rate': 0.08328308365438064, 'p_miss': 0.12027836796142444}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 08:48:46,724] Trial 116 finished with value: 0.0696992120387727 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 10, 'imputation_order': 'descending'}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 08:50:07,149] Trial 117 finished with value: 0.0689718008471566 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 10, 'imputation_order': 'descending'}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 08:50:10,568] Trial 119 finished with value: 0.07054350395229592 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'constant', 'n_nearest_features': 9, 'imputation_order': 'random'}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 08:50:11,757] Trial 133 finished with value: 0.11701224500630722 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 2747, 'weights': 'uniform'}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 08:50:14,580] Trial 134 finished with value: 0.1162639214000609 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 2695, 'weights': 'uniform'}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 08:50:31,800] Trial 135 finished with value: 0.07651349561709134 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'most_frequent', 'n_nearest_features': 11, 'imputation_order': 'descending'}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 08:51:04,802] Trial 118 finished with value: 0.06998317054865077 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 10, 'imputation_order': 'random'}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 08:51:27,132] Trial 48 finished with value: 0.11967771524682105 and parameters: {'model_name': 'VAE', 'batch_size': 665, 'iterations': 8713, 'learning_rate': 0.0004691161978027173, 'p_miss': 0.17073070017884895}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 08:57:00,443] Trial 121 finished with value: 0.06927797131637926 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'constant', 'n_nearest_features': 9, 'imputation_order': 'random'}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 08:59:22,844] Trial 123 finished with value: 0.06889560035753564 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'constant', 'n_nearest_features': 9, 'imputation_order': 'descending'}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 09:02:41,188] Trial 126 finished with value: 0.06938854527098208 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'constant', 'n_nearest_features': 9, 'imputation_order': 'descending'}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 09:03:37,214] Trial 127 finished with value: 0.06965210450866537 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'constant', 'n_nearest_features': 9, 'imputation_order': 'descending'}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 09:03:53,107] Trial 124 finished with value: 0.07036774984711447 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'constant', 'n_nearest_features': 11, 'imputation_order': 'roman'}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 09:04:04,322] Trial 128 finished with value: 0.0690309476318748 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'constant', 'n_nearest_features': 9, 'imputation_order': 'descending'}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 09:06:31,595] Trial 129 finished with value: 0.06952691719139803 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 9, 'imputation_order': 'descending'}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 09:14:41,769] Trial 45 finished with value: 0.1196756238605536 and parameters: {'model_name': 'VAE', 'batch_size': 995, 'iterations': 7281, 'learning_rate': 0.00011685890696137932, 'p_miss': 0.015745857143892483}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 09:16:20,922] Trial 131 finished with value: 0.06964035473867168 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 9, 'imputation_order': 'descending'}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 09:17:49,371] Trial 132 finished with value: 0.06979258661401443 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 9, 'imputation_order': 'descending'}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 09:18:41,610] Trial 136 finished with value: 0.06923142343870858 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 9, 'imputation_order': 'descending'}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 09:19:05,389] Trial 137 finished with value: 0.0695512223739541 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 9, 'imputation_order': 'descending'}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 09:19:05,910] Trial 151 finished with value: 0.1203464391854809 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'mean'}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 09:19:10,126] Trial 30 finished with value: 0.11968835851730586 and parameters: {'model_name': 'VAE', 'batch_size': 875, 'iterations': 8773, 'learning_rate': 0.00011434766805987503, 'p_miss': 0.11991438848327146}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 09:19:27,815] Trial 152 finished with value: 0.0763029086436594 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Ridge', 'initial_strategy': 'constant', 'n_nearest_features': 10, 'imputation_order': 'random'}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 09:19:29,938] Trial 153 finished with value: 0.0763029086436594 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Ridge', 'initial_strategy': 'constant', 'n_nearest_features': 10, 'imputation_order': 'random'}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 09:20:10,538] Trial 138 finished with value: 0.06994840793606356 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 9, 'imputation_order': 'descending'}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 09:20:28,429] Trial 139 finished with value: 0.06942297429681064 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 9, 'imputation_order': 'descending'}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 09:25:58,164] Trial 140 finished with value: 0.07036233502852958 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'constant', 'n_nearest_features': 9, 'imputation_order': 'random'}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 09:28:02,672] Trial 141 finished with value: 0.07011409967861537 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'constant', 'n_nearest_features': 9, 'imputation_order': 'random'}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 09:31:04,698] Trial 142 finished with value: 0.07018739835088676 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'constant', 'n_nearest_features': 9, 'imputation_order': 'random'}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 09:33:04,361] Trial 144 finished with value: 0.06968376812419011 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'constant', 'n_nearest_features': 9, 'imputation_order': 'random'}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 09:33:07,714] Trial 161 finished with value: 0.23837265643303285 and parameters: {'model_name': 'GAIN', 'batch_size': 2, 'hint_rate': 0.3084770295405226, 'alpha': 53, 'iterations': 1, 'learning_rate': 0.0053985097841728205, 'p_miss': 0.2631932079376405}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 09:33:49,592] Trial 143 finished with value: 0.06994332998071592 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'constant', 'n_nearest_features': 10, 'imputation_order': 'random'}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 09:34:15,365] Trial 145 finished with value: 0.06995387014988831 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'constant', 'n_nearest_features': 10, 'imputation_order': 'arabic'}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 09:35:13,433] Trial 146 finished with value: 0.07032259496241729 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'constant', 'n_nearest_features': 9, 'imputation_order': 'random'}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 09:43:31,556] Trial 147 finished with value: 0.07029745856606937 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'constant', 'n_nearest_features': 9, 'imputation_order': 'random'}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 09:46:36,437] Trial 148 finished with value: 0.06902849533623506 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'constant', 'n_nearest_features': 10, 'imputation_order': 'random'}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 09:47:55,245] Trial 155 finished with value: 0.06959810473267533 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'constant', 'n_nearest_features': 9, 'imputation_order': 'arabic'}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 09:48:09,033] Trial 149 finished with value: 0.07039157860369036 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'constant', 'n_nearest_features': 10, 'imputation_order': 'random'}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 09:48:38,073] Trial 150 finished with value: 0.06952991959427546 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'constant', 'n_nearest_features': 10, 'imputation_order': 'random'}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 09:48:55,012] Trial 156 finished with value: 0.06997212723222408 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'constant', 'n_nearest_features': 9, 'imputation_order': 'arabic'}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 09:48:57,300] Trial 157 finished with value: 0.06958912264676463 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'constant', 'n_nearest_features': 9, 'imputation_order': 'arabic'}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 09:49:00,766] Trial 154 finished with value: 0.07028910522750909 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'constant', 'n_nearest_features': 10, 'imputation_order': 'arabic'}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 09:49:50,398] Trial 172 finished with value: 0.07761998240965215 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Bayesian', 'initial_strategy': 'mean', 'n_nearest_features': 8, 'imputation_order': 'descending', 'sample_posterior': False}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 09:49:53,847] Trial 173 finished with value: 0.07761998240965215 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Bayesian', 'initial_strategy': 'mean', 'n_nearest_features': 8, 'imputation_order': 'descending', 'sample_posterior': False}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 09:54:12,389] Trial 158 finished with value: 0.07140162362012839 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'constant', 'n_nearest_features': 8, 'imputation_order': 'arabic'}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 09:56:10,230] Trial 159 finished with value: 0.07103376901800809 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'constant', 'n_nearest_features': 8, 'imputation_order': 'arabic'}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 09:59:02,659] Trial 160 finished with value: 0.07123410410776822 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'constant', 'n_nearest_features': 8, 'imputation_order': 'arabic'}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 10:02:17,574] Trial 162 finished with value: 0.07155850803331609 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'constant', 'n_nearest_features': 8, 'imputation_order': 'arabic'}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 10:02:30,397] Trial 164 finished with value: 0.07070205998256072 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'mean', 'n_nearest_features': 8, 'imputation_order': 'descending'}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 10:02:41,204] Trial 163 finished with value: 0.07020961580249849 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'constant', 'n_nearest_features': 8, 'imputation_order': 'arabic'}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 10:02:53,300] Trial 180 finished with value: 0.0777688467048075 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'constant', 'n_nearest_features': 9, 'imputation_order': 'descending'}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 10:02:53,793] Trial 182 finished with value: 0.1203464391854809 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'mean'}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 10:03:05,756] Trial 181 finished with value: 0.0752209057959899 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'constant', 'n_nearest_features': 10, 'imputation_order': 'descending'}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 10:03:33,563] Trial 165 finished with value: 0.06965292675961571 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'mean', 'n_nearest_features': 8, 'imputation_order': 'descending'}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 10:11:52,076] Trial 166 finished with value: 0.07031657208347339 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'mean', 'n_nearest_features': 8, 'imputation_order': 'descending'}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 10:15:18,500] Trial 167 finished with value: 0.07077610207586708 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'constant', 'n_nearest_features': 8, 'imputation_order': 'descending'}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 10:16:31,370] Trial 168 finished with value: 0.07070799006719605 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'constant', 'n_nearest_features': 8, 'imputation_order': 'descending'}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 10:16:49,169] Trial 169 finished with value: 0.07005608346494001 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'mean', 'n_nearest_features': 8, 'imputation_order': 'descending'}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 10:16:52,171] Trial 170 finished with value: 0.07046276417484346 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'mean', 'n_nearest_features': 8, 'imputation_order': 'descending'}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 10:17:34,052] Trial 171 finished with value: 0.0707002268080055 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'mean', 'n_nearest_features': 8, 'imputation_order': 'descending'}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 10:17:41,297] Trial 174 finished with value: 0.07094136190476226 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'constant', 'n_nearest_features': 8, 'imputation_order': 'descending'}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 10:17:43,352] Trial 175 finished with value: 0.07093763898758605 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'constant', 'n_nearest_features': 8, 'imputation_order': 'descending'}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 10:21:18,462] Trial 193 finished with value: 0.26510311933488273 and parameters: {'model_name': 'GAIN', 'batch_size': 144, 'hint_rate': 0.9378797111605233, 'alpha': 2, 'iterations': 112, 'learning_rate': 0.03167014526244088, 'p_miss': 0.12746149374805965}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 10:21:52,161] Trial 176 finished with value: 0.07068058878377473 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'constant', 'n_nearest_features': 8, 'imputation_order': 'descending'}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 10:24:41,609] Trial 177 finished with value: 0.0692982254207639 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'constant', 'n_nearest_features': 9, 'imputation_order': 'descending'}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 10:27:36,932] Trial 178 finished with value: 0.06895495085371096 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'constant', 'n_nearest_features': 9, 'imputation_order': 'descending'}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 10:31:34,259] Trial 183 finished with value: 0.07010134121420611 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 9, 'imputation_order': 'descending'}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 10:31:49,882] Trial 185 finished with value: 0.0688280945063939 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 9, 'imputation_order': 'descending'}. Best is trial 26 with value: 0.06865512660228908.
running
[I 2024-11-17 10:31:59,855] Trial 184 finished with value: 0.06921196248836883 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 9, 'imputation_order': 'descending'}. Best is trial 26 with value: 0.06865512660228908.
[I 2024-11-17 10:32:40,527] Trial 179 finished with value: 0.0695490569963377 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'constant', 'n_nearest_features': 10, 'imputation_order': 'descending'}. Best is trial 26 with value: 0.06865512660228908.
[I 2024-11-17 10:39:05,126] Trial 186 finished with value: 0.0697002855654757 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 9, 'imputation_order': 'descending'}. Best is trial 26 with value: 0.06865512660228908.
[I 2024-11-17 10:41:51,182] Trial 187 finished with value: 0.06960123750168049 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 9, 'imputation_order': 'descending'}. Best is trial 26 with value: 0.06865512660228908.
[I 2024-11-17 10:42:49,160] Trial 188 finished with value: 0.06942528715207655 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 9, 'imputation_order': 'descending'}. Best is trial 26 with value: 0.06865512660228908.
[I 2024-11-17 10:42:53,026] Trial 190 finished with value: 0.06976307117850968 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 9, 'imputation_order': 'descending'}. Best is trial 26 with value: 0.06865512660228908.
[I 2024-11-17 10:42:57,592] Trial 42 finished with value: 0.11972229699842156 and parameters: {'model_name': 'VAE', 'batch_size': 936, 'iterations': 9115, 'learning_rate': 0.00014081532321583666, 'p_miss': 0.014512879616876084}. Best is trial 26 with value: 0.06865512660228908.
[I 2024-11-17 10:42:59,421] Trial 189 finished with value: 0.06958965383506467 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 9, 'imputation_order': 'descending'}. Best is trial 26 with value: 0.06865512660228908.
[I 2024-11-17 10:43:19,910] Trial 191 finished with value: 0.06970868119395476 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 9, 'imputation_order': 'descending'}. Best is trial 26 with value: 0.06865512660228908.
[I 2024-11-17 10:43:26,634] Trial 192 finished with value: 0.25582552101967804 and parameters: {'model_name': 'GAIN', 'batch_size': 136, 'hint_rate': 0.968098977626356, 'alpha': 1, 'iterations': 2084, 'learning_rate': 0.0322861721558962, 'p_miss': 0.10254163686384468}. Best is trial 26 with value: 0.06865512660228908.
[I 2024-11-17 10:45:03,239] Trial 194 finished with value: 0.07018576194033413 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 9, 'imputation_order': 'descending'}. Best is trial 26 with value: 0.06865512660228908.
[I 2024-11-17 10:45:24,089] Trial 195 finished with value: 0.06994935758467688 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 9, 'imputation_order': 'descending'}. Best is trial 26 with value: 0.06865512660228908.
[I 2024-11-17 10:46:39,402] Trial 196 finished with value: 0.0699924525510578 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 9, 'imputation_order': 'descending'}. Best is trial 26 with value: 0.06865512660228908.
[I 2024-11-17 10:47:59,655] Trial 197 finished with value: 0.0700235771437028 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 9, 'imputation_order': 'descending'}. Best is trial 26 with value: 0.06865512660228908.
[I 2024-11-17 10:49:48,298] Trial 198 finished with value: 0.0702053577099056 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 9, 'imputation_order': 'descending'}. Best is trial 26 with value: 0.06865512660228908.
[I 2024-11-17 10:49:54,741] Trial 199 finished with value: 0.06989854357985888 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 9, 'imputation_order': 'descending'}. Best is trial 26 with value: 0.06865512660228908.
fit
auto fit
auto transform
0     0
1     0
2     0
3     0
4     0
5     0
6     0
7     0
8     0
9     0
10    0
dtype: int64
0     0
1     0
2     0
3     0
4     0
5     0
6     0
7     0
8     0
9     0
10    0
dtype: int64
0.06865512660228908
{'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 10, 'imputation_order': 'arabic'}
running experiment 2/3 - Does reconstruction give good automl predictions
Start est fit
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
  0%|          | 0/25 [00:00<?, ?it/s]Generation:   0%|          | 0/25 [00:00<?, ?it/s]Generation:  1
Best f1_score score: 0.44005969886760765
Generation:   4%|▍         | 1/25 [00:19<07:52, 19.68s/it]Generation:  2
Best f1_score score: 0.46940472347463347
Generation:   8%|▊         | 2/25 [00:36<06:58, 18.20s/it]Generation:  3
Best f1_score score: 0.46940472347463347
Generation:  12%|█▏        | 3/25 [00:52<06:11, 16.89s/it]Generation:  4
Best f1_score score: 0.46940472347463347
Generation:  16%|█▌        | 4/25 [01:00<04:42, 13.46s/it]Generation:  5
Best f1_score score: 0.46940472347463347
Generation:  20%|██        | 5/25 [01:13<04:23, 13.19s/it]Generation:  6
Best f1_score score: 0.46940472347463347
Generation:  24%|██▍       | 6/25 [01:28<04:26, 14.02s/it]Generation:  7
Best f1_score score: 0.46940472347463347
Generation:  28%|██▊       | 7/25 [01:42<04:09, 13.83s/it]Generation:  8
Best f1_score score: 0.46940472347463347
Generation:  32%|███▏      | 8/25 [01:53<03:43, 13.16s/it]Generation:  9
Best f1_score score: 0.46940472347463347
Generation:  36%|███▌      | 9/25 [02:14<04:05, 15.35s/it]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155467f19510> 
 Out of bag estimation only available if bootstrap=True 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 66, in inner_f
    return f(*args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/ensemble/_bagging.py", line 402, in fit
    return self._fit(X, y, max_samples=self.max_samples, **fit_params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/ensemble/_bagging.py", line 502, in _fit
    raise ValueError("Out of bag estimation only available if bootstrap=True")
ValueError: Out of bag estimation only available if bootstrap=True

Generation:  10
Best f1_score score: 0.46940472347463347
Generation:  40%|████      | 10/25 [05:17<16:50, 67.39s/it]Generation:  11
Best f1_score score: 0.46940472347463347
Generation:  44%|████▍     | 11/25 [06:36<16:29, 70.66s/it]Generation:  12
Best f1_score score: 0.46940472347463347
Generation:  48%|████▊     | 12/25 [06:52<11:44, 54.22s/it]Generation:  13
Best f1_score score: 0.46940472347463347
Generation:  52%|█████▏    | 13/25 [07:09<08:34, 42.89s/it]Generation:  14
Best f1_score score: 0.46940472347463347
Generation:  56%|█████▌    | 14/25 [07:31<06:41, 36.49s/it]Generation:  15
Best f1_score score: 0.46940472347463347
Generation:  60%|██████    | 15/25 [07:58<05:37, 33.73s/it]Generation:  16
Best f1_score score: 0.46940472347463347
Generation:  64%|██████▍   | 16/25 [08:22<04:36, 30.76s/it]Generation:  17
Best f1_score score: 0.4762926333862225
Generation:  68%|██████▊   | 17/25 [08:43<03:41, 27.73s/it]Generation:  18
Best f1_score score: 0.4762926333862225
Generation:  72%|███████▏  | 18/25 [09:02<02:56, 25.28s/it]Generation:  19
Best f1_score score: 0.4762926333862225
Generation:  76%|███████▌  | 19/25 [09:18<02:15, 22.57s/it]Generation:  20
Best f1_score score: 0.4762926333862225
Generation:  80%|████████  | 20/25 [09:40<01:51, 22.35s/it]Generation:  21
Best f1_score score: 0.4762926333862225
Generation:  84%|████████▍ | 21/25 [12:12<04:04, 61.08s/it]Generation:  22
Best f1_score score: 0.4762926333862225
Generation:  88%|████████▊ | 22/25 [12:30<02:24, 48.19s/it]Generation:  23
Best f1_score score: 0.4762926333862225
Generation:  92%|█████████▏| 23/25 [13:00<01:25, 42.94s/it]Generation:  24
Best f1_score score: 0.4762926333862225
Generation:  96%|█████████▌| 24/25 [13:21<00:36, 36.19s/it]Generation:  25
Best f1_score score: 0.4762926333862225
Generation: 100%|██████████| 25/25 [13:44<00:00, 32.13s/it]Generation: 100%|██████████| 25/25 [13:47<00:00, 33.08s/it]
2024-11-17 11:07:15,430 - distributed.scheduler - ERROR - Removing worker 'tcp://127.0.0.1:41487' caused the cluster to lose scattered data, which can't be recovered: {'ndarray-453a6c1882b0f66cb296036f202f3e20', 'ndarray-76e576111076c865c2056f98220645ff'} (stimulus_id='handle-worker-cleanup-1731870435.4309134')
Fitted
Pipeline(steps=[('baggingclassifier',
                 BaggingClassifier(bootstrap=False,
                                   max_features=0.7513526119718,
                                   max_samples=0.7942008306581, n_estimators=68,
                                   n_jobs=1))])
score start
train score: {'auroc': 1.0, 'accuracy': 1.0, 'balanced_accuracy': 1.0, 'logloss': 0.09482664406448833, 'f1': 1.0}
original test score: {'auroc': 0.8035882821221828, 'accuracy': 0.6704081632653062, 'balanced_accuracy': 0.37493066579959067, 'logloss': 0.8757948688727413, 'f1': 0.41436934466806097}
imputed test score: {'auroc': 0.8027397806582083, 'accuracy': 0.6683673469387755, 'balanced_accuracy': 0.37362805947121114, 'logloss': 0.8772959013618797, 'f1': 0.41320472547443865}
score end
check intended
EXP2 Finished
running experiment 3/3 - What is the best automl settings?
<tpot2.search_spaces.pipelines.sequential.SequentialPipeline object at 0x155435014610>
Start tpot fit
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
  0%|          | 0/25 [00:00<?, ?it/s]Generation:   0%|          | 0/25 [00:00<?, ?it/s]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155474d458d0> 
 Input X contains NaN.
GaussianNB does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/naive_bayes.py", line 263, in fit
    return self._partial_fit(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/naive_bayes.py", line 423, in _partial_fit
    X, y = self._validate_data(X, y, reset=first_call)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 650, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1301, in check_X_y
    X = check_array(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1064, in check_array
    _assert_all_finite(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 123, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 172, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
GaussianNB does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155474cd4970> 
 Input X contains NaN.
AdaBoostClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py", line 133, in fit
    X, y = self._validate_data(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 650, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1301, in check_X_y
    X = check_array(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1064, in check_array
    _assert_all_finite(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 123, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 172, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
AdaBoostClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values


WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155474d27e80> 
 Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 238, in fit
    return self._fit(X, y)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 475, in _fit
    X, y = self._validate_data(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 650, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1301, in check_X_y
    X = check_array(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1064, in check_array
    _assert_all_finite(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 123, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 172, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155474cd4dc0> 
 Negative values in data passed to MultinomialNB (input X) 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/naive_bayes.py", line 759, in fit
    self._count(X, Y)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/naive_bayes.py", line 881, in _count
    check_non_negative(X, "MultinomialNB (input X)")
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1689, in check_non_negative
    raise ValueError("Negative values in data passed to %s" % whom)
ValueError: Negative values in data passed to MultinomialNB (input X)

Generation:  1
Best f1_score score: 0.43373259804660796
Generation:   4%|▍         | 1/25 [02:15<54:17, 135.71s/it]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155474d3cc10> 
 Input X contains NaN.
MultinomialNB does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/naive_bayes.py", line 732, in fit
    X, y = self._check_X_y(X, y)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/naive_bayes.py", line 578, in _check_X_y
    return self._validate_data(X, y, accept_sparse="csr", reset=reset)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 650, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1301, in check_X_y
    X = check_array(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1064, in check_array
    _assert_all_finite(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 123, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 172, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
MultinomialNB does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Generation:  2
Best f1_score score: 0.4542859640318433
Generation:   8%|▊         | 2/25 [02:45<28:04, 73.24s/it] Generation:  3
Best f1_score score: 0.4542859640318433
Generation:  12%|█▏        | 3/25 [05:32<42:34, 116.12s/it]Generation:  4
Best f1_score score: 0.4542859640318433
Generation:  16%|█▌        | 4/25 [06:03<28:57, 82.72s/it] Generation:  5
Best f1_score score: 0.47716785806539763
Generation:  20%|██        | 5/25 [07:27<27:41, 83.07s/it]corrupted size vs. prev_size
2024-11-17 11:17:40,611 - distributed.nanny - WARNING - Restarting worker
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
corrupted size vs. prev_size
2024-11-17 11:20:22,933 - distributed.scheduler - ERROR - Task eval_objective_list-cb0d93630a1c638ecce210ca80822ebf marked as failed because 2 workers died while trying to run it
Exception in future
2024-11-17 11:20:22,940 - distributed.nanny - WARNING - Restarting worker
Attempted to run task 'eval_objective_list-cb0d93630a1c638ecce210ca80822ebf' on 2 different workers, but all those workers died while running it. The last worker that attempt to run the task was tcp://127.0.0.1:35543. Inspecting worker logs is often a good next step to diagnose what went wrong. For more information see https://distributed.dask.org/en/stable/killed.html.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
WARNING AN INDIVIDUAL TIMED OUT: 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155457145f60> 

Generation:  6
Best f1_score score: 0.4920529102082325
Generation:  24%|██▍       | 6/25 [17:31<1:22:25, 260.29s/it]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x1554554dedd0> 
 Input X contains NaN.
ExtraTreesClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 377, in fit
    estimator._compute_missing_values_in_feature_mask(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/tree/_classes.py", line 214, in _compute_missing_values_in_feature_mask
    assert_all_finite(X, **common_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 213, in assert_all_finite
    _assert_all_finite(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 123, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 172, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
ExtraTreesClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

WARNING AN INDIVIDUAL TIMED OUT: 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x1554871ad810> 

Generation:  7
Best f1_score score: 0.49390300240625623
Generation:  28%|██▊       | 7/25 [27:36<1:51:52, 372.92s/it]Generation:  8
Best f1_score score: 0.4945343057284564
Generation:  32%|███▏      | 8/25 [27:49<1:13:10, 258.26s/it]Generation:  9
Best f1_score score: 0.4984033392162576
Generation:  36%|███▌      | 9/25 [28:08<48:55, 183.48s/it]  WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155453250fa0> 
 Input X contains NaN.
ExtraTreesClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 377, in fit
    estimator._compute_missing_values_in_feature_mask(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/tree/_classes.py", line 214, in _compute_missing_values_in_feature_mask
    assert_all_finite(X, **common_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 213, in assert_all_finite
    _assert_all_finite(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 123, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 172, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
ExtraTreesClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

WARNING AN INDIVIDUAL TIMED OUT: 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155452fe29e0> 

Generation:  10
Best f1_score score: 0.4984033392162576
Generation:  40%|████      | 10/25 [38:13<1:18:22, 313.52s/it]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x15545330a080> 
 Input X contains NaN.
BernoulliNB does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/naive_bayes.py", line 732, in fit
    X, y = self._check_X_y(X, y)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/naive_bayes.py", line 1184, in _check_X_y
    X, y = super()._check_X_y(X, y, reset=reset)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/naive_bayes.py", line 578, in _check_X_y
    return self._validate_data(X, y, accept_sparse="csr", reset=reset)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 650, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1301, in check_X_y
    X = check_array(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1064, in check_array
    _assert_all_finite(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 123, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 172, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
BernoulliNB does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Generation:  11
Best f1_score score: 0.4984033392162576
Generation:  44%|████▍     | 11/25 [38:42<52:51, 226.51s/it]  Generation:  12
Best f1_score score: 0.4984033392162576
Generation:  48%|████▊     | 12/25 [41:12<44:01, 203.19s/it]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x15545750f880> 
 The 'min_samples_split' parameter of DecisionTreeClassifier must be an int in the range [2, inf) or a float in the range (0.0, 1.0]. Got 1 instead. 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1466, in wrapper
    estimator._validate_params()
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 666, in _validate_params
    validate_parameter_constraints(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/_param_validation.py", line 95, in validate_parameter_constraints
    raise InvalidParameterError(
sklearn.utils._param_validation.InvalidParameterError: The 'min_samples_split' parameter of DecisionTreeClassifier must be an int in the range [2, inf) or a float in the range (0.0, 1.0]. Got 1 instead.

WARNING AN INDIVIDUAL TIMED OUT: 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x1553a5b51e10> 

Generation:  13
Best f1_score score: 0.5016713827026361
Generation:  52%|█████▏    | 13/25 [51:15<1:04:53, 324.46s/it]Generation:  14
Best f1_score score: 0.5016713827026361
Generation:  56%|█████▌    | 14/25 [51:24<42:01, 229.19s/it]  WARNING AN INDIVIDUAL TIMED OUT: 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155474620790> 

Generation:  15
Best f1_score score: 0.5016713827026361
Generation:  60%|██████    | 15/25 [1:01:28<56:59, 341.99s/it]WARNING AN INDIVIDUAL TIMED OUT: 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x15545fcb6b30> 

WARNING AN INDIVIDUAL TIMED OUT: 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155456bddf30> 

Generation:  16
Best f1_score score: 0.5054569232921767
Generation:  64%|██████▍   | 16/25 [1:11:33<1:03:12, 421.37s/it]Generation:  17
Best f1_score score: 0.5054569232921767
Generation:  68%|██████▊   | 17/25 [1:13:23<43:41, 327.68s/it]  Generation:  18
Best f1_score score: 0.5054569232921767
Generation:  72%|███████▏  | 18/25 [1:13:39<27:16, 233.83s/it]WARNING AN INDIVIDUAL TIMED OUT: 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155474d23010> 

Generation:  19
Best f1_score score: 0.5054569232921767
Generation:  76%|███████▌  | 19/25 [1:23:45<34:34, 345.82s/it]WARNING AN INDIVIDUAL TIMED OUT: 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155457524f70> 

WARNING AN INDIVIDUAL TIMED OUT: 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155452ef3d60> 

Generation:  20
Best f1_score score: 0.5054569232921767
Generation:  80%|████████  | 20/25 [1:33:50<35:18, 423.69s/it]Generation:  21
Best f1_score score: 0.5054569232921767
Generation:  84%|████████▍ | 21/25 [1:35:05<21:14, 318.74s/it]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x1554743092d0> 
 Input X contains NaN.
ExtraTreesClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 377, in fit
    estimator._compute_missing_values_in_feature_mask(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/tree/_classes.py", line 214, in _compute_missing_values_in_feature_mask
    assert_all_finite(X, **common_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 213, in assert_all_finite
    _assert_all_finite(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 123, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 172, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
ExtraTreesClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155447ce3340> 
 Input X contains NaN.
ExtraTreesClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 377, in fit
    estimator._compute_missing_values_in_feature_mask(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/tree/_classes.py", line 214, in _compute_missing_values_in_feature_mask
    assert_all_finite(X, **common_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 213, in assert_all_finite
    _assert_all_finite(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 123, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 172, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
ExtraTreesClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Generation:  22
Best f1_score score: 0.5054569232921767
Generation:  88%|████████▊ | 22/25 [1:35:19<11:22, 227.34s/it]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155452f8ddb0> 
 The 'min_samples_split' parameter of DecisionTreeClassifier must be an int in the range [2, inf) or a float in the range (0.0, 1.0]. Got 1 instead. 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1466, in wrapper
    estimator._validate_params()
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 666, in _validate_params
    validate_parameter_constraints(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/_param_validation.py", line 95, in validate_parameter_constraints
    raise InvalidParameterError(
sklearn.utils._param_validation.InvalidParameterError: The 'min_samples_split' parameter of DecisionTreeClassifier must be an int in the range [2, inf) or a float in the range (0.0, 1.0]. Got 1 instead.

Generation:  23
Best f1_score score: 0.5054569232921767
Generation:  92%|█████████▏| 23/25 [1:37:03<06:20, 190.31s/it]Generation:  24
Best f1_score score: 0.5054569232921767
Generation:  96%|█████████▌| 24/25 [1:37:14<02:16, 136.64s/it]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x15545534ef80> 
 Input X contains NaN.
ExtraTreesClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 377, in fit
    estimator._compute_missing_values_in_feature_mask(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/tree/_classes.py", line 214, in _compute_missing_values_in_feature_mask
    assert_all_finite(X, **common_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 213, in assert_all_finite
    _assert_all_finite(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 123, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 172, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
ExtraTreesClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Generation:  25
Best f1_score score: 0.5054569232921767
Generation: 100%|██████████| 25/25 [1:37:36<00:00, 102.11s/it]Generation: 100%|██████████| 25/25 [1:37:36<00:00, 234.25s/it]
2024-11-17 12:45:02,149 - distributed.scheduler - ERROR - Removing worker 'tcp://127.0.0.1:38647' caused the cluster to lose scattered data, which can't be recovered: {'ndarray-453a6c1882b0f66cb296036f202f3e20', 'DataFrame-88a71f0ffaea8e240de47657d4c00a81'} (stimulus_id='handle-worker-cleanup-1731876302.1498933')
Fitted
Pipeline(steps=[('knnimputer', KNNImputer(n_neighbors=31, weights='distance')),
                ('extratreesclassifier',
                 ExtraTreesClassifier(class_weight='balanced',
                                      criterion='entropy',
                                      max_features=0.2315490315834,
                                      min_samples_split=3, n_jobs=1))])
transform worked
try transform
transform worked
score start
train score: {'auroc': 0.9999996507392125, 'accuracy': 0.9992343032159265, 'balanced_accuracy': 0.9997149586627339, 'logloss': 0.08921356005765256, 'f1': 0.998700283987678}
test score: {'auroc': 0.8143280673841772, 'accuracy': 0.7010204081632653, 'balanced_accuracy': 0.38295884895663984, 'logloss': 0.8628103672622744, 'f1': 0.421102398074273}
original test score: {'auroc': 0.8144957456675631, 'accuracy': 0.7010204081632653, 'balanced_accuracy': 0.38295884895663984, 'logloss': 0.863165473096621, 'f1': 0.421102398074273}
score end
40498
lvl
0.01
type
MAR
num_run
2
class_full
finished
all finished
full run takes
14.27324256128735
hours
DONE
