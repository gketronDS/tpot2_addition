Run: 49
/cm/local/apps/slurm/var/spool/job1068939/slurm_script: line 26: 
pip install -e tpot2
pip install -r tpot2/ImputerExperiments/requirements_.txt
: No such file or directory
RunStart
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
starting loops
../data/c/40983/40983.pkl
working on 
../data/c/40983/class_full_MCAR_0.01_3
4.040770053863525
running experiment 1/3 - Does large hyperparameter space improve reconstruction accuracy over simple
[I 2024-11-21 21:31:11,384] A new study created in memory with name: no-name-6f696826-e356-474f-862d-c56be7c013d5
running
running
running
running
running
running
running
running
running
running
running
running
running
running
[I 2024-11-21 21:31:11,465] Trial 0 finished with value: 0.06677776387424997 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'mean'}. Best is trial 0 with value: 0.06677776387424997.
running
running
running
[I 2024-11-21 21:31:11,755] Trial 2 finished with value: 0.3459651936005973 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'most_frequent'}. Best is trial 0 with value: 0.06677776387424997.
[I 2024-11-21 21:31:11,869] Trial 5 finished with value: 0.3459651936005973 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'most_frequent'}. Best is trial 0 with value: 0.06677776387424997.
running
running
[I 2024-11-21 21:31:12,024] Trial 13 finished with value: 0.06714083952800325 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 0 with value: 0.06677776387424997.
running
[I 2024-11-21 21:31:12,184] Trial 17 finished with value: 0.06677776387424997 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'mean'}. Best is trial 0 with value: 0.06677776387424997.
running
[I 2024-11-21 21:31:12,710] Trial 11 finished with value: 0.06228805122268967 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 332, 'weights': 'uniform'}. Best is trial 11 with value: 0.06228805122268967.
running
[I 2024-11-21 21:31:13,078] Trial 12 finished with value: 0.06528576717327149 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 1249, 'weights': 'uniform'}. Best is trial 11 with value: 0.06228805122268967.
running
[I 2024-11-21 21:31:13,248] Trial 15 finished with value: 0.0661218784194903 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 1994, 'weights': 'uniform'}. Best is trial 11 with value: 0.06228805122268967.
running
[I 2024-11-21 21:31:13,469] Trial 19 finished with value: 0.06398043629287933 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3095, 'weights': 'distance'}. Best is trial 11 with value: 0.06228805122268967.
running
[I 2024-11-21 21:31:14,149] Trial 24 finished with value: 0.06301541023884902 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 1618, 'weights': 'distance'}. Best is trial 11 with value: 0.06228805122268967.
running
[I 2024-11-21 21:31:16,740] Trial 10 finished with value: 0.05949844060132299 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Bayesian', 'initial_strategy': 'median', 'n_nearest_features': 3, 'imputation_order': 'arabic', 'sample_posterior': False}. Best is trial 10 with value: 0.05949844060132299.
running
[I 2024-11-21 21:31:19,908] Trial 14 finished with value: 0.30745673265970713 and parameters: {'model_name': 'GAIN', 'batch_size': 608, 'hint_rate': 0.5867822511788529, 'alpha': 46, 'iterations': 1, 'learning_rate': 0.04437824476344392, 'p_miss': 0.19100759243821755}. Best is trial 10 with value: 0.05949844060132299.
running
[I 2024-11-21 21:31:22,465] Trial 21 finished with value: 0.09587867157197957 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Bayesian', 'initial_strategy': 'most_frequent', 'n_nearest_features': 3, 'imputation_order': 'descending', 'sample_posterior': True}. Best is trial 10 with value: 0.05949844060132299.
running
[I 2024-11-21 21:31:23,152] Trial 25 finished with value: 0.05678189501931856 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'constant', 'n_nearest_features': 2, 'imputation_order': 'roman'}. Best is trial 25 with value: 0.05678189501931856.
running
[I 2024-11-21 21:31:28,070] Trial 4 finished with value: 0.22949715639186521 and parameters: {'model_name': 'VAE', 'batch_size': 7, 'iterations': 2, 'learning_rate': 0.05534169662167977, 'p_miss': 0.025524772733771017}. Best is trial 25 with value: 0.05678189501931856.
running
[I 2024-11-21 21:31:30,012] Trial 26 finished with value: 0.05949844060132299 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Bayesian', 'initial_strategy': 'median', 'n_nearest_features': 3, 'imputation_order': 'arabic', 'sample_posterior': False}. Best is trial 25 with value: 0.05678189501931856.
running
[I 2024-11-21 21:31:32,986] Trial 6 finished with value: inf and parameters: {'model_name': 'GAIN', 'batch_size': 1, 'hint_rate': 0.4295445664634553, 'alpha': 74, 'iterations': 41, 'learning_rate': 0.029473523623781594, 'p_miss': 0.05070388018518862}. Best is trial 25 with value: 0.05678189501931856.
running
[I 2024-11-21 21:31:33,464] Trial 27 finished with value: 0.05949844060132299 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Bayesian', 'initial_strategy': 'median', 'n_nearest_features': 3, 'imputation_order': 'arabic', 'sample_posterior': False}. Best is trial 25 with value: 0.05678189501931856.
running
[I 2024-11-21 21:31:34,059] Trial 29 finished with value: 0.05678189501931856 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'constant', 'n_nearest_features': 2, 'imputation_order': 'roman'}. Best is trial 25 with value: 0.05678189501931856.
running
[I 2024-11-21 21:31:35,633] Trial 8 finished with value: 0.34759292435417627 and parameters: {'model_name': 'VAE', 'batch_size': 143, 'iterations': 2, 'learning_rate': 0.0027005830983645404, 'p_miss': 0.29172607244839893}. Best is trial 25 with value: 0.05678189501931856.
running
[I 2024-11-21 21:31:39,389] Trial 30 finished with value: 0.05678189501931856 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'constant', 'n_nearest_features': 2, 'imputation_order': 'roman'}. Best is trial 25 with value: 0.05678189501931856.
running
[I 2024-11-21 21:31:41,151] Trial 31 finished with value: 0.06556283592631659 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'constant', 'n_nearest_features': 1, 'imputation_order': 'roman'}. Best is trial 25 with value: 0.05678189501931856.
running
[I 2024-11-21 21:31:42,080] Trial 16 finished with value: 0.12284728900310093 and parameters: {'model_name': 'VAE', 'batch_size': 2, 'iterations': 5, 'learning_rate': 0.0727609217073312, 'p_miss': 0.23419277047456263}. Best is trial 25 with value: 0.05678189501931856.
running
[I 2024-11-21 21:31:44,033] Trial 32 finished with value: 0.06556283592631659 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'constant', 'n_nearest_features': 1, 'imputation_order': 'roman'}. Best is trial 25 with value: 0.05678189501931856.
running
[I 2024-11-21 21:31:44,432] Trial 33 finished with value: 0.06556283592631659 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'constant', 'n_nearest_features': 1, 'imputation_order': 'roman'}. Best is trial 25 with value: 0.05678189501931856.
running
[I 2024-11-21 21:31:45,084] Trial 34 finished with value: 0.06556283592631659 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'constant', 'n_nearest_features': 1, 'imputation_order': 'roman'}. Best is trial 25 with value: 0.05678189501931856.
running
[I 2024-11-21 21:31:47,797] Trial 35 finished with value: 0.06556283592631659 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'constant', 'n_nearest_features': 1, 'imputation_order': 'roman'}. Best is trial 25 with value: 0.05678189501931856.
running
[I 2024-11-21 21:31:50,394] Trial 36 finished with value: 0.06556283592631659 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'constant', 'n_nearest_features': 1, 'imputation_order': 'roman'}. Best is trial 25 with value: 0.05678189501931856.
running
[I 2024-11-21 21:31:52,140] Trial 37 finished with value: 0.06556283592631659 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'constant', 'n_nearest_features': 1, 'imputation_order': 'roman'}. Best is trial 25 with value: 0.05678189501931856.
running
[I 2024-11-21 21:31:54,207] Trial 38 finished with value: 0.06556283592631659 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'constant', 'n_nearest_features': 1, 'imputation_order': 'roman'}. Best is trial 25 with value: 0.05678189501931856.
running
[I 2024-11-21 21:31:55,000] Trial 41 finished with value: 0.06078223708213772 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Ridge', 'initial_strategy': 'mean', 'n_nearest_features': 2, 'imputation_order': 'ascending'}. Best is trial 25 with value: 0.05678189501931856.
running
[I 2024-11-21 21:31:55,894] Trial 39 finished with value: 0.05678189501931856 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'constant', 'n_nearest_features': 2, 'imputation_order': 'roman'}. Best is trial 25 with value: 0.05678189501931856.
running
[I 2024-11-21 21:31:56,732] Trial 18 finished with value: inf and parameters: {'model_name': 'GAIN', 'batch_size': 2, 'hint_rate': 0.7882270255595837, 'alpha': 18, 'iterations': 84, 'learning_rate': 0.0005004191041457204, 'p_miss': 0.2210020418542217}. Best is trial 25 with value: 0.05678189501931856.
running
[I 2024-11-21 21:32:00,515] Trial 3 finished with value: 0.3170402088977343 and parameters: {'model_name': 'VAE', 'batch_size': 22, 'iterations': 9, 'learning_rate': 0.004994834138051693, 'p_miss': 0.08948904182176906}. Best is trial 25 with value: 0.05678189501931856.
running
[I 2024-11-21 21:34:30,794] Trial 7 finished with value: 0.06997903614635753 and parameters: {'model_name': 'VAE', 'batch_size': 37, 'iterations': 53, 'learning_rate': 0.032848344330759116, 'p_miss': 0.10440243193585734}. Best is trial 25 with value: 0.05678189501931856.
running
[I 2024-11-21 21:44:03,227] Trial 49 finished with value: 0.059177543851416714 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'constant', 'n_nearest_features': 2, 'imputation_order': 'random'}. Best is trial 25 with value: 0.05678189501931856.
running
[I 2024-11-21 21:44:11,447] Trial 51 finished with value: 0.05609974968467026 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'mean', 'n_nearest_features': 2, 'imputation_order': 'roman'}. Best is trial 51 with value: 0.05609974968467026.
running
[I 2024-11-21 21:44:22,977] Trial 40 finished with value: 0.059169685058544474 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'mean', 'n_nearest_features': 2, 'imputation_order': 'roman'}. Best is trial 51 with value: 0.05609974968467026.
running
[I 2024-11-21 21:44:42,302] Trial 48 finished with value: 0.059978691624481995 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'constant', 'n_nearest_features': 2, 'imputation_order': 'random'}. Best is trial 51 with value: 0.05609974968467026.
running
[I 2024-11-21 21:44:44,190] Trial 42 finished with value: 0.05828501816314095 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'mean', 'n_nearest_features': 2, 'imputation_order': 'ascending'}. Best is trial 51 with value: 0.05609974968467026.
running
[I 2024-11-21 21:44:53,970] Trial 43 finished with value: 0.061451368855055 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'mean', 'n_nearest_features': 2, 'imputation_order': 'random'}. Best is trial 51 with value: 0.05609974968467026.
running
[I 2024-11-21 21:45:48,614] Trial 20 finished with value: 0.05320060649779017 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'mean', 'n_nearest_features': 5, 'imputation_order': 'ascending'}. Best is trial 20 with value: 0.05320060649779017.
running
[I 2024-11-21 21:46:09,238] Trial 22 finished with value: 0.05260816082242611 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 5, 'imputation_order': 'ascending'}. Best is trial 22 with value: 0.05260816082242611.
running
[I 2024-11-21 21:46:09,524] Trial 58 finished with value: 0.3459651936005973 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'constant'}. Best is trial 22 with value: 0.05260816082242611.
running
[I 2024-11-21 21:46:47,782] Trial 50 finished with value: 0.05908020030933161 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'constant', 'n_nearest_features': 2, 'imputation_order': 'random'}. Best is trial 22 with value: 0.05260816082242611.
running
[I 2024-11-21 21:47:00,464] Trial 46 finished with value: 0.054001185083935276 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'median', 'n_nearest_features': 5, 'imputation_order': 'random'}. Best is trial 22 with value: 0.05260816082242611.
running
[I 2024-11-21 21:56:03,142] Trial 52 finished with value: 0.0528430154187212 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'mean', 'n_nearest_features': 5, 'imputation_order': 'random'}. Best is trial 22 with value: 0.05260816082242611.
running
[I 2024-11-21 22:22:16,365] Trial 60 finished with value: 0.31078276865986365 and parameters: {'model_name': 'GAIN', 'batch_size': 568, 'hint_rate': 0.06720645095604788, 'alpha': 96, 'iterations': 1567, 'learning_rate': 0.0001107283562582353, 'p_miss': 0.13943264223734708}. Best is trial 22 with value: 0.05260816082242611.
running
[I 2024-11-21 22:26:09,366] Trial 1 finished with value: 0.08141242553261852 and parameters: {'model_name': 'VAE', 'batch_size': 7, 'iterations': 1326, 'learning_rate': 0.02468693741429693, 'p_miss': 0.29615372327764655}. Best is trial 22 with value: 0.05260816082242611.
running
[I 2024-11-21 23:11:27,810] Trial 9 finished with value: 0.33608571766466333 and parameters: {'model_name': 'GAIN', 'batch_size': 959, 'hint_rate': 0.6876825295485783, 'alpha': 79, 'iterations': 3871, 'learning_rate': 0.0013776728145183652, 'p_miss': 0.09994005008435934}. Best is trial 22 with value: 0.05260816082242611.
running
[I 2024-11-21 23:32:43,678] Trial 65 finished with value: 0.2990416172244612 and parameters: {'model_name': 'VAE', 'batch_size': 101, 'iterations': 414, 'learning_rate': 0.00010547411883933841, 'p_miss': 0.16921913239342976}. Best is trial 22 with value: 0.05260816082242611.
running
[I 2024-11-21 23:45:12,851] Trial 66 finished with value: 0.05283866605901635 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 5, 'imputation_order': 'ascending'}. Best is trial 22 with value: 0.05260816082242611.
running
[I 2024-11-21 23:52:20,124] Trial 54 finished with value: 0.35989781954651956 and parameters: {'model_name': 'GAIN', 'batch_size': 744, 'hint_rate': 0.02308016078301106, 'alpha': 96, 'iterations': 5296, 'learning_rate': 0.00017768917709379018, 'p_miss': 0.1403074655815223}. Best is trial 22 with value: 0.05260816082242611.
running
[I 2024-11-21 23:52:20,651] Trial 68 finished with value: 0.06714083952800325 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 22 with value: 0.05260816082242611.
running
[I 2024-11-21 23:54:42,492] Trial 45 finished with value: 0.342142736577937 and parameters: {'model_name': 'GAIN', 'batch_size': 52, 'hint_rate': 0.039143340076101096, 'alpha': 0, 'iterations': 6537, 'learning_rate': 0.00010615461774923478, 'p_miss': 0.1164736005912114}. Best is trial 22 with value: 0.05260816082242611.
running
[I 2024-11-21 23:56:33,936] Trial 57 finished with value: 0.35594130877201663 and parameters: {'model_name': 'GAIN', 'batch_size': 278, 'hint_rate': 0.05613219932278468, 'alpha': 100, 'iterations': 6065, 'learning_rate': 0.00012358102552286807, 'p_miss': 0.13139020209126728}. Best is trial 22 with value: 0.05260816082242611.
running
[I 2024-11-21 23:57:38,619] Trial 67 finished with value: 0.052399685375324176 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 5, 'imputation_order': 'ascending'}. Best is trial 67 with value: 0.052399685375324176.
running
[I 2024-11-22 00:02:33,390] Trial 70 finished with value: 0.07003921350340739 and parameters: {'model_name': 'VAE', 'batch_size': 188, 'iterations': 147, 'learning_rate': 0.010836614997028165, 'p_miss': 0.016371632373151535}. Best is trial 67 with value: 0.052399685375324176.
running
[I 2024-11-22 00:06:07,880] Trial 71 finished with value: 0.07196781112601289 and parameters: {'model_name': 'VAE', 'batch_size': 10, 'iterations': 208, 'learning_rate': 0.01214335930326371, 'p_miss': 0.2507012795736691}. Best is trial 67 with value: 0.052399685375324176.
running
[I 2024-11-22 00:06:10,013] Trial 74 finished with value: 0.06398043629287933 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3748, 'weights': 'distance'}. Best is trial 67 with value: 0.052399685375324176.
running
[I 2024-11-22 00:06:33,610] Trial 69 finished with value: 0.06980735670098927 and parameters: {'model_name': 'VAE', 'batch_size': 156, 'iterations': 316, 'learning_rate': 0.009376019189299313, 'p_miss': 0.014471520612484218}. Best is trial 67 with value: 0.052399685375324176.
running
[I 2024-11-22 00:08:32,613] Trial 72 finished with value: 0.07320504229933185 and parameters: {'model_name': 'VAE', 'batch_size': 10, 'iterations': 246, 'learning_rate': 0.012545155262428324, 'p_miss': 0.2529618792688173}. Best is trial 67 with value: 0.052399685375324176.
running
[I 2024-11-22 00:15:25,814] Trial 73 finished with value: 0.05255609771832696 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 5, 'imputation_order': 'ascending'}. Best is trial 67 with value: 0.052399685375324176.
running
[I 2024-11-22 00:18:45,831] Trial 75 finished with value: 0.053160559431671695 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 5, 'imputation_order': 'ascending'}. Best is trial 67 with value: 0.052399685375324176.
running
[I 2024-11-22 00:19:07,394] Trial 76 finished with value: 0.05289868144126016 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 5, 'imputation_order': 'ascending'}. Best is trial 67 with value: 0.052399685375324176.
running
[I 2024-11-22 00:21:38,389] Trial 77 finished with value: 0.05409226002651389 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 5, 'imputation_order': 'ascending'}. Best is trial 67 with value: 0.052399685375324176.
running
[I 2024-11-22 00:28:30,001] Trial 78 finished with value: 0.05363538139161498 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 5, 'imputation_order': 'ascending'}. Best is trial 67 with value: 0.052399685375324176.
running
[I 2024-11-22 00:31:15,856] Trial 79 finished with value: 0.05329459323194956 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 5, 'imputation_order': 'ascending'}. Best is trial 67 with value: 0.052399685375324176.
running
[I 2024-11-22 00:31:48,794] Trial 80 finished with value: 0.05319137039523747 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 5, 'imputation_order': 'ascending'}. Best is trial 67 with value: 0.052399685375324176.
running
[I 2024-11-22 00:34:33,966] Trial 81 finished with value: 0.053094112246236336 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 4, 'imputation_order': 'ascending'}. Best is trial 67 with value: 0.052399685375324176.
running
[I 2024-11-22 00:34:34,248] Trial 85 finished with value: 0.3459651936005973 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'constant'}. Best is trial 67 with value: 0.052399685375324176.
running
[I 2024-11-22 00:40:45,535] Trial 59 finished with value: 0.0692411162158911 and parameters: {'model_name': 'VAE', 'batch_size': 414, 'iterations': 3396, 'learning_rate': 0.00030754195257403207, 'p_miss': 0.12187295811490562}. Best is trial 67 with value: 0.052399685375324176.
running
[I 2024-11-22 00:41:35,477] Trial 82 finished with value: 0.05238790147460809 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 4, 'imputation_order': 'ascending'}. Best is trial 82 with value: 0.05238790147460809.
running
[I 2024-11-22 00:43:53,656] Trial 83 finished with value: 0.05299954425037186 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 4, 'imputation_order': 'ascending'}. Best is trial 82 with value: 0.05238790147460809.
running
[I 2024-11-22 00:43:58,473] Trial 61 finished with value: 0.3639511186148659 and parameters: {'model_name': 'GAIN', 'batch_size': 878, 'hint_rate': 0.0217299144393166, 'alpha': 99, 'iterations': 6906, 'learning_rate': 0.00010440205778129338, 'p_miss': 0.15253171604145296}. Best is trial 82 with value: 0.05238790147460809.
running
[I 2024-11-22 00:44:26,899] Trial 55 finished with value: 0.362690161265267 and parameters: {'model_name': 'GAIN', 'batch_size': 604, 'hint_rate': 0.027908540445257812, 'alpha': 100, 'iterations': 7186, 'learning_rate': 0.00010995983766275587, 'p_miss': 0.14745554481965217}. Best is trial 82 with value: 0.05238790147460809.
running
[I 2024-11-22 00:44:46,569] Trial 84 finished with value: 0.05365683338526639 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 4, 'imputation_order': 'ascending'}. Best is trial 82 with value: 0.05238790147460809.
running
[I 2024-11-22 00:47:58,178] Trial 86 finished with value: 0.05236611673743462 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 4, 'imputation_order': 'ascending'}. Best is trial 86 with value: 0.05236611673743462.
running
[I 2024-11-22 00:48:08,935] Trial 93 finished with value: 0.060491975732776496 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Ridge', 'initial_strategy': 'most_frequent', 'n_nearest_features': 4, 'imputation_order': 'ascending'}. Best is trial 86 with value: 0.05236611673743462.
running
[I 2024-11-22 00:48:10,864] Trial 94 finished with value: 0.05705527133306748 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 21, 'weights': 'distance'}. Best is trial 86 with value: 0.05236611673743462.
running
[I 2024-11-22 00:54:05,063] Trial 87 finished with value: 0.05228574476999563 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 4, 'imputation_order': 'ascending'}. Best is trial 87 with value: 0.05228574476999563.
running
[I 2024-11-22 00:55:16,637] Trial 88 finished with value: 0.05363026067312918 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 4, 'imputation_order': 'ascending'}. Best is trial 87 with value: 0.05228574476999563.
running
[I 2024-11-22 00:57:04,288] Trial 89 finished with value: 0.05278094059208003 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 4, 'imputation_order': 'ascending'}. Best is trial 87 with value: 0.05228574476999563.
running
[I 2024-11-22 00:57:13,757] Trial 90 finished with value: 0.052931974243201355 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 4, 'imputation_order': 'ascending'}. Best is trial 87 with value: 0.05228574476999563.
running
[I 2024-11-22 00:57:31,386] Trial 98 finished with value: 0.08804254392190461 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Bayesian', 'initial_strategy': 'most_frequent', 'n_nearest_features': 4, 'imputation_order': 'descending', 'sample_posterior': True}. Best is trial 87 with value: 0.05228574476999563.
running
[I 2024-11-22 00:57:45,347] Trial 99 finished with value: 0.08804254392190461 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Bayesian', 'initial_strategy': 'most_frequent', 'n_nearest_features': 4, 'imputation_order': 'descending', 'sample_posterior': True}. Best is trial 87 with value: 0.05228574476999563.
running
[I 2024-11-22 00:58:21,315] Trial 91 finished with value: 0.05323428661996203 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 4, 'imputation_order': 'ascending'}. Best is trial 87 with value: 0.05228574476999563.
running
[I 2024-11-22 00:58:30,276] Trial 92 finished with value: 0.0529358720609031 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 4, 'imputation_order': 'descending'}. Best is trial 87 with value: 0.05228574476999563.
running
[I 2024-11-22 01:02:05,707] Trial 95 finished with value: 0.05297109829871969 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 5, 'imputation_order': 'ascending'}. Best is trial 87 with value: 0.05228574476999563.
running
[I 2024-11-22 01:02:07,971] Trial 44 finished with value: 0.3478678280481726 and parameters: {'model_name': 'GAIN', 'batch_size': 33, 'hint_rate': 0.01578620531587982, 'alpha': 0, 'iterations': 9530, 'learning_rate': 0.00017620369443857803, 'p_miss': 0.11092217078285774}. Best is trial 87 with value: 0.05228574476999563.
running
[I 2024-11-22 01:08:04,189] Trial 96 finished with value: 0.053226282387029165 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 4, 'imputation_order': 'descending'}. Best is trial 87 with value: 0.05228574476999563.
running
[I 2024-11-22 01:08:43,992] Trial 47 finished with value: 0.34834914195807404 and parameters: {'model_name': 'GAIN', 'batch_size': 98, 'hint_rate': 0.03244556677106847, 'alpha': 0, 'iterations': 9819, 'learning_rate': 0.00012019652525041864, 'p_miss': 0.12202937893280871}. Best is trial 87 with value: 0.05228574476999563.
running
[I 2024-11-22 01:09:19,402] Trial 97 finished with value: 0.052735772805910755 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 5, 'imputation_order': 'ascending'}. Best is trial 87 with value: 0.05228574476999563.
running
[I 2024-11-22 01:10:59,985] Trial 100 finished with value: 0.053312214254694526 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 5, 'imputation_order': 'arabic'}. Best is trial 87 with value: 0.05228574476999563.
running
[I 2024-11-22 01:11:21,013] Trial 101 finished with value: 0.05243367034348145 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 5, 'imputation_order': 'arabic'}. Best is trial 87 with value: 0.05228574476999563.
running
[I 2024-11-22 01:12:03,395] Trial 102 finished with value: 0.05261149362205014 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 5, 'imputation_order': 'arabic'}. Best is trial 87 with value: 0.05228574476999563.
running
[I 2024-11-22 01:12:09,100] Trial 103 finished with value: 0.05267123586223984 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 5, 'imputation_order': 'arabic'}. Best is trial 87 with value: 0.05228574476999563.
running
[I 2024-11-22 01:12:18,520] Trial 112 finished with value: 0.06049189311919985 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Ridge', 'initial_strategy': 'most_frequent', 'n_nearest_features': 5, 'imputation_order': 'arabic'}. Best is trial 87 with value: 0.05228574476999563.
running
[I 2024-11-22 01:16:02,858] Trial 104 finished with value: 0.05340280077273742 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 5, 'imputation_order': 'arabic'}. Best is trial 87 with value: 0.05228574476999563.
running
[I 2024-11-22 01:16:26,224] Trial 105 finished with value: 0.0532098618784614 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 5, 'imputation_order': 'arabic'}. Best is trial 87 with value: 0.05228574476999563.
running
[I 2024-11-22 01:16:29,195] Trial 115 finished with value: 0.06665416482181175 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 2559, 'weights': 'uniform'}. Best is trial 87 with value: 0.05228574476999563.
running
[I 2024-11-22 01:22:03,505] Trial 106 finished with value: 0.05230894079175595 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 5, 'imputation_order': 'arabic'}. Best is trial 87 with value: 0.05228574476999563.
running
[I 2024-11-22 01:22:38,961] Trial 107 finished with value: 0.05324947977199812 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 5, 'imputation_order': 'arabic'}. Best is trial 87 with value: 0.05228574476999563.
running
[I 2024-11-22 01:23:24,269] Trial 108 finished with value: 0.052698719811629643 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 5, 'imputation_order': 'ascending'}. Best is trial 87 with value: 0.05228574476999563.
running
[I 2024-11-22 01:24:11,242] Trial 110 finished with value: 0.05550442321593345 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 3, 'imputation_order': 'arabic'}. Best is trial 87 with value: 0.05228574476999563.
running
[I 2024-11-22 01:24:42,939] Trial 109 finished with value: 0.052340145819146075 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 5, 'imputation_order': 'ascending'}. Best is trial 87 with value: 0.05228574476999563.
running
[I 2024-11-22 01:24:43,417] Trial 121 finished with value: 0.06677776387424997 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'mean'}. Best is trial 87 with value: 0.05228574476999563.
running
[I 2024-11-22 01:24:44,886] Trial 113 finished with value: 0.05458218293203376 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'median', 'n_nearest_features': 3, 'imputation_order': 'arabic'}. Best is trial 87 with value: 0.05228574476999563.
running
[I 2024-11-22 01:24:50,997] Trial 111 finished with value: 0.05596152549226674 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 3, 'imputation_order': 'arabic'}. Best is trial 87 with value: 0.05228574476999563.
running
[I 2024-11-22 01:29:02,178] Trial 114 finished with value: 0.05569802566698433 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'median', 'n_nearest_features': 3, 'imputation_order': 'arabic'}. Best is trial 87 with value: 0.05228574476999563.
running
[I 2024-11-22 01:29:37,495] Trial 116 finished with value: 0.05419508003407525 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'median', 'n_nearest_features': 3, 'imputation_order': 'arabic'}. Best is trial 87 with value: 0.05228574476999563.
running
[I 2024-11-22 01:34:50,114] Trial 56 finished with value: 0.3335062860394603 and parameters: {'model_name': 'GAIN', 'batch_size': 866, 'hint_rate': 0.01124356812614774, 'alpha': 100, 'iterations': 8368, 'learning_rate': 0.00011907395587555895, 'p_miss': 0.14134357511827134}. Best is trial 87 with value: 0.05228574476999563.
running
[I 2024-11-22 01:35:46,877] Trial 118 finished with value: 0.055350848942644505 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'median', 'n_nearest_features': 3, 'imputation_order': 'arabic'}. Best is trial 87 with value: 0.05228574476999563.
running
[I 2024-11-22 01:36:13,540] Trial 117 finished with value: 0.05380783734332212 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 5, 'imputation_order': 'arabic'}. Best is trial 87 with value: 0.05228574476999563.
running
[I 2024-11-22 01:36:46,700] Trial 119 finished with value: 0.054419052873975214 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'median', 'n_nearest_features': 3, 'imputation_order': 'arabic'}. Best is trial 87 with value: 0.05228574476999563.
running
[I 2024-11-22 01:37:25,967] Trial 122 finished with value: 0.056213026315441464 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 3, 'imputation_order': 'arabic'}. Best is trial 87 with value: 0.05228574476999563.
running
[I 2024-11-22 01:37:58,803] Trial 131 finished with value: 0.0900063231469665 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Bayesian', 'initial_strategy': 'most_frequent', 'n_nearest_features': 5, 'imputation_order': 'ascending', 'sample_posterior': True}. Best is trial 87 with value: 0.05228574476999563.
running
[I 2024-11-22 01:38:33,562] Trial 120 finished with value: 0.05234326036597856 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'median', 'n_nearest_features': 5, 'imputation_order': 'arabic'}. Best is trial 87 with value: 0.05228574476999563.
running
[I 2024-11-22 01:38:45,884] Trial 123 finished with value: 0.05181360621362872 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 5, 'imputation_order': 'arabic'}. Best is trial 123 with value: 0.05181360621362872.
running
[I 2024-11-22 01:38:57,399] Trial 134 finished with value: 0.060491975732776496 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Ridge', 'initial_strategy': 'most_frequent', 'n_nearest_features': 5, 'imputation_order': 'ascending'}. Best is trial 123 with value: 0.05181360621362872.
running
[I 2024-11-22 01:39:16,299] Trial 124 finished with value: 0.05370038656880607 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'median', 'n_nearest_features': 5, 'imputation_order': 'arabic'}. Best is trial 123 with value: 0.05181360621362872.
running
[I 2024-11-22 01:43:23,397] Trial 125 finished with value: 0.051895474030220025 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 5, 'imputation_order': 'arabic'}. Best is trial 123 with value: 0.05181360621362872.
running
[I 2024-11-22 01:43:58,575] Trial 126 finished with value: 0.05302590618303564 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 5, 'imputation_order': 'ascending'}. Best is trial 123 with value: 0.05181360621362872.
running
[I 2024-11-22 01:45:15,635] Trial 28 finished with value: 0.09163811192947652 and parameters: {'model_name': 'VAE', 'batch_size': 1, 'iterations': 6864, 'learning_rate': 0.00012526997438261597, 'p_miss': 0.014283288125130217}. Best is trial 123 with value: 0.05181360621362872.
running
[I 2024-11-22 01:48:41,533] Trial 127 finished with value: 0.05198726833455388 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 5, 'imputation_order': 'ascending'}. Best is trial 123 with value: 0.05181360621362872.
running
[I 2024-11-22 01:49:34,718] Trial 128 finished with value: 0.052549745373695056 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 5, 'imputation_order': 'ascending'}. Best is trial 123 with value: 0.05181360621362872.
running
[I 2024-11-22 01:50:12,049] Trial 129 finished with value: 0.053840407513734256 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 5, 'imputation_order': 'ascending'}. Best is trial 123 with value: 0.05181360621362872.
running
[I 2024-11-22 01:50:53,373] Trial 130 finished with value: 0.052554066104168 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 5, 'imputation_order': 'ascending'}. Best is trial 123 with value: 0.05181360621362872.
running
[I 2024-11-22 01:50:56,257] Trial 143 finished with value: 0.061941739284699995 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 877, 'weights': 'distance'}. Best is trial 123 with value: 0.05181360621362872.
running
[I 2024-11-22 01:50:56,849] Trial 144 finished with value: 0.3459651936005973 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'most_frequent'}. Best is trial 123 with value: 0.05181360621362872.
running
[I 2024-11-22 01:51:17,763] Trial 132 finished with value: 0.0522998993391937 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 5, 'imputation_order': 'ascending'}. Best is trial 123 with value: 0.05181360621362872.
running
[I 2024-11-22 01:52:02,320] Trial 133 finished with value: 0.05383322322532028 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 5, 'imputation_order': 'ascending'}. Best is trial 123 with value: 0.05181360621362872.
running
[I 2024-11-22 01:52:13,523] Trial 135 finished with value: 0.052533774993447316 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 5, 'imputation_order': 'ascending'}. Best is trial 123 with value: 0.05181360621362872.
running
[I 2024-11-22 01:52:52,208] Trial 136 finished with value: 0.053162166666019806 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 5, 'imputation_order': 'arabic'}. Best is trial 123 with value: 0.05181360621362872.
running
[I 2024-11-22 01:55:59,981] Trial 53 finished with value: 0.4074086348153322 and parameters: {'model_name': 'GAIN', 'batch_size': 996, 'hint_rate': 0.0520586417595586, 'alpha': 99, 'iterations': 9387, 'learning_rate': 0.00015530914839741357, 'p_miss': 0.29741552646849645}. Best is trial 123 with value: 0.05181360621362872.
running
[I 2024-11-22 01:57:14,569] Trial 137 finished with value: 0.05232304570263868 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 5, 'imputation_order': 'ascending'}. Best is trial 123 with value: 0.05181360621362872.
running
[I 2024-11-22 01:57:42,299] Trial 138 finished with value: 0.05289930314861204 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 5, 'imputation_order': 'arabic'}. Best is trial 123 with value: 0.05181360621362872.
running
[I 2024-11-22 01:58:50,294] Trial 139 finished with value: 0.05252935460317646 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 5, 'imputation_order': 'arabic'}. Best is trial 123 with value: 0.05181360621362872.
running
[I 2024-11-22 02:02:39,525] Trial 140 finished with value: 0.052515598326587365 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 5, 'imputation_order': 'ascending'}. Best is trial 123 with value: 0.05181360621362872.
running
[I 2024-11-22 02:03:27,297] Trial 141 finished with value: 0.05334982182355389 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 5, 'imputation_order': 'ascending'}. Best is trial 123 with value: 0.05181360621362872.
running
[I 2024-11-22 02:04:08,528] Trial 142 finished with value: 0.052875775913351256 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 5, 'imputation_order': 'ascending'}. Best is trial 123 with value: 0.05181360621362872.
running
[I 2024-11-22 02:04:50,785] Trial 146 finished with value: 0.05276545803322176 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 5, 'imputation_order': 'ascending'}. Best is trial 123 with value: 0.05181360621362872.
running
[I 2024-11-22 02:04:54,642] Trial 145 finished with value: 0.05298743510643002 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 5, 'imputation_order': 'ascending'}. Best is trial 123 with value: 0.05181360621362872.
running
[I 2024-11-22 02:05:47,325] Trial 147 finished with value: 0.05288027448115028 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 5, 'imputation_order': 'ascending'}. Best is trial 123 with value: 0.05181360621362872.
running
[I 2024-11-22 02:05:51,441] Trial 148 finished with value: 0.05263152275264592 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 5, 'imputation_order': 'ascending'}. Best is trial 123 with value: 0.05181360621362872.
running
[I 2024-11-22 02:06:31,932] Trial 149 finished with value: 0.05305560838005474 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 5, 'imputation_order': 'ascending'}. Best is trial 123 with value: 0.05181360621362872.
running
[I 2024-11-22 02:09:30,604] Trial 150 finished with value: 0.0533747244362492 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 5, 'imputation_order': 'ascending'}. Best is trial 123 with value: 0.05181360621362872.
running
[I 2024-11-22 02:11:03,105] Trial 151 finished with value: 0.05310405186772158 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 5, 'imputation_order': 'ascending'}. Best is trial 123 with value: 0.05181360621362872.
running
[I 2024-11-22 02:11:13,932] Trial 163 finished with value: 0.057152853300699316 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'mean', 'n_nearest_features': 4, 'imputation_order': 'arabic'}. Best is trial 123 with value: 0.05181360621362872.
running
[I 2024-11-22 02:11:41,791] Trial 152 finished with value: 0.05294703580540526 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 5, 'imputation_order': 'ascending'}. Best is trial 123 with value: 0.05181360621362872.
running
[I 2024-11-22 02:12:26,067] Trial 153 finished with value: 0.05296856181750077 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 5, 'imputation_order': 'ascending'}. Best is trial 123 with value: 0.05181360621362872.
running
[I 2024-11-22 02:16:45,243] Trial 154 finished with value: 0.05303445068146889 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'mean', 'n_nearest_features': 5, 'imputation_order': 'ascending'}. Best is trial 123 with value: 0.05181360621362872.
running
[I 2024-11-22 02:17:10,765] Trial 155 finished with value: 0.05333875604025333 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'mean', 'n_nearest_features': 5, 'imputation_order': 'ascending'}. Best is trial 123 with value: 0.05181360621362872.
running
[I 2024-11-22 02:18:02,957] Trial 156 finished with value: 0.05224219800983332 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 5, 'imputation_order': 'ascending'}. Best is trial 123 with value: 0.05181360621362872.
running
[I 2024-11-22 02:18:21,931] Trial 157 finished with value: 0.053108251101835924 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'mean', 'n_nearest_features': 5, 'imputation_order': 'ascending'}. Best is trial 123 with value: 0.05181360621362872.
running
[I 2024-11-22 02:18:48,664] Trial 158 finished with value: 0.05422736655682919 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'mean', 'n_nearest_features': 5, 'imputation_order': 'ascending'}. Best is trial 123 with value: 0.05181360621362872.
running
[I 2024-11-22 02:18:54,983] Trial 170 finished with value: 0.05866281942308658 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Bayesian', 'initial_strategy': 'most_frequent', 'n_nearest_features': 5, 'imputation_order': 'random', 'sample_posterior': False}. Best is trial 123 with value: 0.05181360621362872.
running
[I 2024-11-22 02:19:19,664] Trial 171 finished with value: 0.058641221798712305 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Bayesian', 'initial_strategy': 'most_frequent', 'n_nearest_features': 5, 'imputation_order': 'arabic', 'sample_posterior': False}. Best is trial 123 with value: 0.05181360621362872.
running
[I 2024-11-22 02:20:11,695] Trial 160 finished with value: 0.053114890336400614 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'mean', 'n_nearest_features': 5, 'imputation_order': 'arabic'}. Best is trial 123 with value: 0.05181360621362872.
running
[I 2024-11-22 02:20:22,830] Trial 159 finished with value: 0.0528836748793603 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'mean', 'n_nearest_features': 5, 'imputation_order': 'ascending'}. Best is trial 123 with value: 0.05181360621362872.
running
[I 2024-11-22 02:20:53,262] Trial 161 finished with value: 0.052986007272787704 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'mean', 'n_nearest_features': 5, 'imputation_order': 'arabic'}. Best is trial 123 with value: 0.05181360621362872.
running
[I 2024-11-22 02:21:13,904] Trial 174 finished with value: 0.34822738761563043 and parameters: {'model_name': 'VAE', 'batch_size': 4, 'iterations': 18, 'learning_rate': 0.0008327243241855192, 'p_miss': 0.05051722305684894}. Best is trial 123 with value: 0.05181360621362872.
running
[I 2024-11-22 02:21:25,391] Trial 175 finished with value: 0.3430731717617046 and parameters: {'model_name': 'VAE', 'batch_size': 4, 'iterations': 19, 'learning_rate': 0.0009523072078265002, 'p_miss': 0.06989294991283342}. Best is trial 123 with value: 0.05181360621362872.
running
[I 2024-11-22 02:23:35,212] Trial 162 finished with value: 0.05288280825807168 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'mean', 'n_nearest_features': 5, 'imputation_order': 'arabic'}. Best is trial 123 with value: 0.05181360621362872.
running
[I 2024-11-22 02:25:32,646] Trial 164 finished with value: 0.05216917984680073 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 5, 'imputation_order': 'arabic'}. Best is trial 123 with value: 0.05181360621362872.
running
[I 2024-11-22 02:26:07,962] Trial 165 finished with value: 0.05247702512136763 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 5, 'imputation_order': 'random'}. Best is trial 123 with value: 0.05181360621362872.
running
[I 2024-11-22 02:26:10,572] Trial 181 finished with value: 0.06677776387424997 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3651, 'weights': 'uniform'}. Best is trial 123 with value: 0.05181360621362872.
running
[I 2024-11-22 02:26:23,345] Trial 182 finished with value: 0.060489491953223076 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Ridge', 'initial_strategy': 'most_frequent', 'n_nearest_features': 4, 'imputation_order': 'random'}. Best is trial 123 with value: 0.05181360621362872.
running
[I 2024-11-22 02:26:23,640] Trial 183 finished with value: 0.3459651936005973 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'constant'}. Best is trial 123 with value: 0.05181360621362872.
running
[I 2024-11-22 02:26:41,069] Trial 166 finished with value: 0.05327742476322134 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 5, 'imputation_order': 'random'}. Best is trial 123 with value: 0.05181360621362872.
running
[I 2024-11-22 02:31:21,233] Trial 167 finished with value: 0.052707261764741165 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 5, 'imputation_order': 'random'}. Best is trial 123 with value: 0.05181360621362872.
running
[I 2024-11-22 02:31:29,762] Trial 168 finished with value: 0.053197475069271416 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 5, 'imputation_order': 'random'}. Best is trial 123 with value: 0.05181360621362872.
running
[I 2024-11-22 02:32:30,810] Trial 172 finished with value: 0.052232590075936516 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 4, 'imputation_order': 'arabic'}. Best is trial 123 with value: 0.05181360621362872.
running
[I 2024-11-22 02:32:35,956] Trial 169 finished with value: 0.05365252605666123 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 5, 'imputation_order': 'random'}. Best is trial 123 with value: 0.05181360621362872.
running
[I 2024-11-22 02:34:26,070] Trial 176 finished with value: 0.052343688012223236 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 4, 'imputation_order': 'ascending'}. Best is trial 123 with value: 0.05181360621362872.
running
[I 2024-11-22 02:34:46,624] Trial 177 finished with value: 0.053088086220916555 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 4, 'imputation_order': 'ascending'}. Best is trial 123 with value: 0.05181360621362872.
running
[I 2024-11-22 02:35:26,868] Trial 178 finished with value: 0.052984887504506015 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 4, 'imputation_order': 'ascending'}. Best is trial 123 with value: 0.05181360621362872.
running
[I 2024-11-22 02:37:05,900] Trial 179 finished with value: 0.05317001363555014 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 4, 'imputation_order': 'ascending'}. Best is trial 123 with value: 0.05181360621362872.
running
[I 2024-11-22 02:39:31,863] Trial 180 finished with value: 0.05239526441991421 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 4, 'imputation_order': 'arabic'}. Best is trial 123 with value: 0.05181360621362872.
running
[I 2024-11-22 02:40:10,569] Trial 185 finished with value: 0.053691642170857055 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 4, 'imputation_order': 'random'}. Best is trial 123 with value: 0.05181360621362872.
running
[I 2024-11-22 02:40:11,321] Trial 184 finished with value: 0.052529967930435205 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 4, 'imputation_order': 'random'}. Best is trial 123 with value: 0.05181360621362872.
running
[I 2024-11-22 02:40:22,196] Trial 195 finished with value: 0.057664902240261086 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'median', 'n_nearest_features': 4, 'imputation_order': 'arabic'}. Best is trial 123 with value: 0.05181360621362872.
running
[I 2024-11-22 02:45:00,960] Trial 187 finished with value: 0.05170449712520007 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 5, 'imputation_order': 'arabic'}. Best is trial 187 with value: 0.05170449712520007.
running
[I 2024-11-22 02:45:06,133] Trial 186 finished with value: 0.053110215377312794 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 5, 'imputation_order': 'arabic'}. Best is trial 187 with value: 0.05170449712520007.
running
[I 2024-11-22 02:45:51,079] Trial 188 finished with value: 0.052037160887345404 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 4, 'imputation_order': 'arabic'}. Best is trial 187 with value: 0.05170449712520007.
[I 2024-11-22 02:46:23,342] Trial 189 finished with value: 0.05346007486050305 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 4, 'imputation_order': 'arabic'}. Best is trial 187 with value: 0.05170449712520007.
[I 2024-11-22 02:47:42,823] Trial 190 finished with value: 0.05193873841662673 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'median', 'n_nearest_features': 4, 'imputation_order': 'arabic'}. Best is trial 187 with value: 0.05170449712520007.
[I 2024-11-22 02:47:55,531] Trial 191 finished with value: 0.05320609960330678 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'median', 'n_nearest_features': 4, 'imputation_order': 'arabic'}. Best is trial 187 with value: 0.05170449712520007.
[I 2024-11-22 02:48:36,721] Trial 192 finished with value: 0.05312682836979875 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'median', 'n_nearest_features': 4, 'imputation_order': 'arabic'}. Best is trial 187 with value: 0.05170449712520007.
[I 2024-11-22 02:49:28,851] Trial 193 finished with value: 0.05333345228634016 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'median', 'n_nearest_features': 4, 'imputation_order': 'arabic'}. Best is trial 187 with value: 0.05170449712520007.
[I 2024-11-22 02:51:23,159] Trial 194 finished with value: 0.053876570272520755 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'median', 'n_nearest_features': 4, 'imputation_order': 'arabic'}. Best is trial 187 with value: 0.05170449712520007.
[I 2024-11-22 02:51:43,618] Trial 197 finished with value: 0.053343073332686085 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 4, 'imputation_order': 'arabic'}. Best is trial 187 with value: 0.05170449712520007.
[I 2024-11-22 02:51:47,493] Trial 196 finished with value: 0.05276712189951939 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'median', 'n_nearest_features': 4, 'imputation_order': 'arabic'}. Best is trial 187 with value: 0.05170449712520007.
[I 2024-11-22 02:54:20,435] Trial 198 finished with value: 0.0527285333554922 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'constant', 'n_nearest_features': 4, 'imputation_order': 'arabic'}. Best is trial 187 with value: 0.05170449712520007.
[I 2024-11-22 02:54:28,960] Trial 199 finished with value: 0.05271254804028486 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'constant', 'n_nearest_features': 4, 'imputation_order': 'arabic'}. Best is trial 187 with value: 0.05170449712520007.
[I 2024-11-22 02:55:02,477] Trial 173 finished with value: 0.07541972566964698 and parameters: {'model_name': 'VAE', 'batch_size': 2, 'iterations': 858, 'learning_rate': 0.0012663491548876619, 'p_miss': 0.06692043561400664}. Best is trial 187 with value: 0.05170449712520007.
[I 2024-11-22 02:57:36,909] Trial 62 finished with value: 0.06970271587709978 and parameters: {'model_name': 'VAE', 'batch_size': 646, 'iterations': 6354, 'learning_rate': 0.0001492404189177696, 'p_miss': 0.14544793270116108}. Best is trial 187 with value: 0.05170449712520007.
[I 2024-11-22 02:57:58,558] Trial 63 finished with value: 0.06921804386581851 and parameters: {'model_name': 'VAE', 'batch_size': 101, 'iterations': 7504, 'learning_rate': 0.005407359910733667, 'p_miss': 0.2932878560696415}. Best is trial 187 with value: 0.05170449712520007.
[I 2024-11-22 03:00:08,518] Trial 23 finished with value: 0.06960135507015938 and parameters: {'model_name': 'VAE', 'batch_size': 85, 'iterations': 8504, 'learning_rate': 0.02911259379868786, 'p_miss': 0.1677777783421846}. Best is trial 187 with value: 0.05170449712520007.
[I 2024-11-22 03:00:47,973] Trial 64 finished with value: 0.06997137994324457 and parameters: {'model_name': 'VAE', 'batch_size': 111, 'iterations': 8655, 'learning_rate': 0.005144142141453496, 'p_miss': 0.15997581116313836}. Best is trial 187 with value: 0.05170449712520007.
fit
auto fit
auto transform
0    0
1    0
2    0
3    0
4    0
dtype: int64
0    0
1    0
2    0
3    0
4    0
dtype: int64
0.05170449712520007
{'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 5, 'imputation_order': 'arabic'}
running experiment 2/3 - Does reconstruction give good automl predictions
Start est fit
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
  0%|          | 0/25 [00:00<?, ?it/s]Generation:   0%|          | 0/25 [00:00<?, ?it/s]Generation:  1
Best f1_score score: 0.8883008156743749
Generation:   4%|▍         | 1/25 [00:08<03:33,  8.88s/it]Generation:  2
Best f1_score score: 0.9024186491930026
Generation:   8%|▊         | 2/25 [00:18<03:31,  9.19s/it]Generation:  3
Best f1_score score: 0.903540471380302
Generation:  12%|█▏        | 3/25 [00:30<03:54, 10.68s/it]Generation:  4
Best f1_score score: 0.903540471380302
Generation:  16%|█▌        | 4/25 [00:41<03:48, 10.87s/it]Generation:  5
Best f1_score score: 0.9237225477351678
Generation:  20%|██        | 5/25 [01:08<05:33, 16.66s/it]Generation:  6
Best f1_score score: 0.9237225477351678
Generation:  24%|██▍       | 6/25 [01:21<04:52, 15.41s/it]Generation:  7
Best f1_score score: 0.9237225477351678
Generation:  28%|██▊       | 7/25 [01:32<04:11, 13.95s/it]Generation:  8
Best f1_score score: 0.9237225477351678
Generation:  32%|███▏      | 8/25 [01:52<04:29, 15.84s/it]Generation:  9
Best f1_score score: 0.9237225477351678
Generation:  36%|███▌      | 9/25 [02:05<03:56, 14.78s/it]Generation:  10
Best f1_score score: 0.9237225477351678
Generation:  40%|████      | 10/25 [02:19<03:39, 14.63s/it]Generation:  11
Best f1_score score: 0.9237225477351678
Generation:  44%|████▍     | 11/25 [02:32<03:17, 14.08s/it]Generation:  12
Best f1_score score: 0.9237225477351678
Generation:  48%|████▊     | 12/25 [02:46<03:04, 14.23s/it]Generation:  13
Best f1_score score: 0.9237225477351678
Generation:  52%|█████▏    | 13/25 [05:25<11:36, 58.07s/it]Generation:  14
Best f1_score score: 0.9237225477351678
Generation:  56%|█████▌    | 14/25 [05:41<08:19, 45.42s/it]Generation:  15
Best f1_score score: 0.9237225477351678
Generation:  60%|██████    | 15/25 [05:57<06:05, 36.56s/it]Generation:  16
Best f1_score score: 0.9237225477351678
Generation:  64%|██████▍   | 16/25 [06:13<04:31, 30.19s/it]Generation:  17
Best f1_score score: 0.9237225477351678
Generation:  68%|██████▊   | 17/25 [06:27<03:22, 25.31s/it]Generation:  18
Best f1_score score: 0.9237225477351678
Generation:  72%|███████▏  | 18/25 [06:41<02:34, 22.03s/it]Generation:  19
Best f1_score score: 0.9237225477351678
Generation:  76%|███████▌  | 19/25 [06:57<02:01, 20.26s/it]Generation:  20
Best f1_score score: 0.9237225477351678
Generation:  80%|████████  | 20/25 [07:13<01:35, 19.02s/it]Generation:  21
Best f1_score score: 0.9318038624626702
Generation:  84%|████████▍ | 21/25 [07:29<01:12, 18.00s/it]Generation:  22
Best f1_score score: 0.9318038624626702
Generation:  88%|████████▊ | 22/25 [08:15<01:19, 26.38s/it]Generation:  23
Best f1_score score: 0.9318038624626702
Generation:  92%|█████████▏| 23/25 [09:44<01:30, 45.22s/it]Generation:  24
Best f1_score score: 0.9318038624626702
Generation:  96%|█████████▌| 24/25 [11:18<00:59, 59.85s/it]Generation:  25
Best f1_score score: 0.9318038624626702
Generation: 100%|██████████| 25/25 [17:39<00:00, 156.25s/it]Generation: 100%|██████████| 25/25 [17:43<00:00, 42.52s/it] 
2024-11-22 03:19:57,804 - distributed.scheduler - ERROR - Removing worker 'tcp://127.0.0.1:36559' caused the cluster to lose scattered data, which can't be recovered: {'ndarray-ebd5ec05bb0f66b412969f9be33321b3', 'ndarray-6c83a9bfd656a5d8277e463008f1e0c6'} (stimulus_id='handle-worker-cleanup-1732274397.8046064')
Fitted
Pipeline(steps=[('mlpclassifier',
                 MLPClassifier(alpha=0.0141273645621, early_stopping=True,
                               hidden_layer_sizes=[53, 53, 53],
                               learning_rate_init=0.0273877856431,
                               n_iter_no_change=32))])
score start
train score: {'auroc': 0.9931639833907792, 'accuracy': 0.9881167656936192, 'balanced_accuracy': 0.9283008735781164, 'logloss': 0.0344177683087028, 'f1': 0.9402145301395104}
original test score: {'auroc': 0.9851570372858584, 'accuracy': 0.984504132231405, 'balanced_accuracy': 0.9011168962042324, 'logloss': 0.045058873719279836, 'f1': 0.9201596806387226}
imputed test score: {'auroc': 0.9823857910648304, 'accuracy': 0.9824380165289256, 'balanced_accuracy': 0.8818861269734632, 'logloss': 0.05404021751184031, 'f1': 0.9077490568047404}
score end
check intended
EXP2 Finished
running experiment 3/3 - What is the best automl settings?
<tpot2.search_spaces.pipelines.sequential.SequentialPipeline object at 0x155435014640>
Start tpot fit
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
  0%|          | 0/25 [00:00<?, ?it/s]Generation:   0%|          | 0/25 [00:00<?, ?it/s]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155474cd4ca0> 
 Input X contains NaN.
LinearSVC does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/svm/_classes.py", line 302, in fit
    X, y = self._validate_data(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 650, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1301, in check_X_y
    X = check_array(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1064, in check_array
    _assert_all_finite(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 123, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 172, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
LinearSVC does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Generation:  1
Best f1_score score: 0.9157336085332954
Generation:   4%|▍         | 1/25 [05:10<2:04:04, 310.17s/it]Generation:  2
Best f1_score score: 0.9157336085332954
Generation:   8%|▊         | 2/25 [05:56<59:24, 155.00s/it]  Generation:  3
Best f1_score score: 0.9320048930007921
Generation:  12%|█▏        | 3/25 [07:00<41:35, 113.45s/it]Generation:  4
Best f1_score score: 0.9320048930007921
Generation:  16%|█▌        | 4/25 [12:14<1:07:24, 192.58s/it]Generation:  5
Best f1_score score: 0.9337404356121357
Generation:  20%|██        | 5/25 [17:33<1:19:25, 238.26s/it]Generation:  6
Best f1_score score: 0.9337404356121357
Generation:  24%|██▍       | 6/25 [22:23<1:20:57, 255.66s/it]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x15545fe56920> 
 Input X contains NaN.
MLPClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/neural_network/_multilayer_perceptron.py", line 751, in fit
    return self._fit(X, y, incremental=False)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/neural_network/_multilayer_perceptron.py", line 441, in _fit
    X, y = self._validate_input(X, y, incremental, reset=first_pass)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/neural_network/_multilayer_perceptron.py", line 1096, in _validate_input
    X, y = self._validate_data(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 650, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1301, in check_X_y
    X = check_array(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1064, in check_array
    _assert_all_finite(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 123, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 172, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
MLPClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Generation:  7
Best f1_score score: 0.9337404356121357
Generation:  28%|██▊       | 7/25 [28:30<1:27:39, 292.17s/it]Generation:  8
Best f1_score score: 0.9421695690162336
Generation:  32%|███▏      | 8/25 [33:49<1:25:12, 300.71s/it]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x1554530cf6a0> 
 Input X contains NaN.
MLPClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/neural_network/_multilayer_perceptron.py", line 751, in fit
    return self._fit(X, y, incremental=False)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/neural_network/_multilayer_perceptron.py", line 441, in _fit
    X, y = self._validate_input(X, y, incremental, reset=first_pass)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/neural_network/_multilayer_perceptron.py", line 1096, in _validate_input
    X, y = self._validate_data(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 650, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1301, in check_X_y
    X = check_array(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1064, in check_array
    _assert_all_finite(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 123, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 172, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
MLPClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Generation:  9
Best f1_score score: 0.9421695690162336
Generation:  36%|███▌      | 9/25 [40:03<1:26:17, 323.61s/it]Generation:  10
Best f1_score score: 0.9421695690162336
Generation:  40%|████      | 10/25 [45:26<1:20:53, 323.54s/it]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x15545fe07700> 
 Input X contains NaN.
MLPClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/neural_network/_multilayer_perceptron.py", line 751, in fit
    return self._fit(X, y, incremental=False)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/neural_network/_multilayer_perceptron.py", line 441, in _fit
    X, y = self._validate_input(X, y, incremental, reset=first_pass)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/neural_network/_multilayer_perceptron.py", line 1096, in _validate_input
    X, y = self._validate_data(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 650, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1301, in check_X_y
    X = check_array(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1064, in check_array
    _assert_all_finite(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 123, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 172, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
MLPClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Generation:  11
Best f1_score score: 0.9421695690162336
Generation:  44%|████▍     | 11/25 [51:39<1:19:00, 338.63s/it]Generation:  12
Best f1_score score: 0.9421695690162336
Generation:  48%|████▊     | 12/25 [59:19<1:21:21, 375.52s/it]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155474447d90> 
 Input X contains NaN.
MLPClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/neural_network/_multilayer_perceptron.py", line 751, in fit
    return self._fit(X, y, incremental=False)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/neural_network/_multilayer_perceptron.py", line 441, in _fit
    X, y = self._validate_input(X, y, incremental, reset=first_pass)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/neural_network/_multilayer_perceptron.py", line 1096, in _validate_input
    X, y = self._validate_data(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 650, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1301, in check_X_y
    X = check_array(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1064, in check_array
    _assert_all_finite(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 123, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 172, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
MLPClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Generation:  13
Best f1_score score: 0.9421695690162336
Generation:  52%|█████▏    | 13/25 [1:04:46<1:12:08, 360.69s/it]Generation:  14
Best f1_score score: 0.9421695690162336
Generation:  56%|█████▌    | 14/25 [1:11:03<1:07:03, 365.76s/it]Generation:  15
Best f1_score score: 0.9421695690162336
Generation:  60%|██████    | 15/25 [1:17:40<1:02:32, 375.25s/it]Generation:  16
Best f1_score score: 0.9421695690162336
Generation:  64%|██████▍   | 16/25 [1:23:58<56:22, 375.85s/it]  Generation:  17
Best f1_score score: 0.9421695690162336
Generation:  68%|██████▊   | 17/25 [1:30:04<49:44, 373.08s/it]Generation:  18
Best f1_score score: 0.9421695690162336
Generation:  72%|███████▏  | 18/25 [1:35:22<41:34, 356.33s/it]Generation:  19
Best f1_score score: 0.948327180376855
Generation:  76%|███████▌  | 19/25 [1:41:33<36:05, 361.00s/it]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155410e17730> 
 Input X contains NaN.
MLPClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/neural_network/_multilayer_perceptron.py", line 751, in fit
    return self._fit(X, y, incremental=False)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/neural_network/_multilayer_perceptron.py", line 441, in _fit
    X, y = self._validate_input(X, y, incremental, reset=first_pass)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/neural_network/_multilayer_perceptron.py", line 1096, in _validate_input
    X, y = self._validate_data(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 650, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1301, in check_X_y
    X = check_array(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1064, in check_array
    _assert_all_finite(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 123, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 172, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
MLPClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Generation:  20
Best f1_score score: 0.948327180376855
Generation:  80%|████████  | 20/25 [1:47:50<30:28, 365.66s/it]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x15545ffa7820> 
 Input X contains NaN.
MLPClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/neural_network/_multilayer_perceptron.py", line 751, in fit
    return self._fit(X, y, incremental=False)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/neural_network/_multilayer_perceptron.py", line 441, in _fit
    X, y = self._validate_input(X, y, incremental, reset=first_pass)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/neural_network/_multilayer_perceptron.py", line 1096, in _validate_input
    X, y = self._validate_data(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 650, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1301, in check_X_y
    X = check_array(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1064, in check_array
    _assert_all_finite(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 123, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 172, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
MLPClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Generation:  21
Best f1_score score: 0.948327180376855
Generation:  84%|████████▍ | 21/25 [1:55:25<26:10, 392.59s/it]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155474d49240> 
 Input X contains NaN.
MLPClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/neural_network/_multilayer_perceptron.py", line 751, in fit
    return self._fit(X, y, incremental=False)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/neural_network/_multilayer_perceptron.py", line 441, in _fit
    X, y = self._validate_input(X, y, incremental, reset=first_pass)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/neural_network/_multilayer_perceptron.py", line 1096, in _validate_input
    X, y = self._validate_data(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 650, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1301, in check_X_y
    X = check_array(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1064, in check_array
    _assert_all_finite(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 123, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 172, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
MLPClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Generation:  22
Best f1_score score: 0.948327180376855
Generation:  88%|████████▊ | 22/25 [2:02:55<20:29, 409.87s/it]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x15545545ef50> 
 Input X contains NaN.
MLPClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/neural_network/_multilayer_perceptron.py", line 751, in fit
    return self._fit(X, y, incremental=False)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/neural_network/_multilayer_perceptron.py", line 441, in _fit
    X, y = self._validate_input(X, y, incremental, reset=first_pass)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/neural_network/_multilayer_perceptron.py", line 1096, in _validate_input
    X, y = self._validate_data(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 650, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1301, in check_X_y
    X = check_array(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1064, in check_array
    _assert_all_finite(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 123, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 172, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
MLPClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Generation:  23
Best f1_score score: 0.948327180376855
Generation:  92%|█████████▏| 23/25 [2:10:04<13:51, 415.60s/it]Generation:  24
Best f1_score score: 0.948327180376855
Generation:  96%|█████████▌| 24/25 [2:16:08<06:39, 399.90s/it]Generation:  25
Best f1_score score: 0.948327180376855
Generation: 100%|██████████| 25/25 [2:22:11<00:00, 388.83s/it]Generation: 100%|██████████| 25/25 [2:22:11<00:00, 341.25s/it]
2024-11-22 05:42:19,960 - distributed.scheduler - ERROR - Removing worker 'tcp://127.0.0.1:41649' caused the cluster to lose scattered data, which can't be recovered: {'ndarray-ebd5ec05bb0f66b412969f9be33321b3', 'DataFrame-6c1446bf3435c310e7e9e04ba36398de'} (stimulus_id='handle-worker-cleanup-1732282939.9599805')
Fitted
Pipeline(steps=[('knnimputer', KNNImputer(n_neighbors=77, weights='distance')),
                ('mlpclassifier',
                 MLPClassifier(alpha=0.0021046780525, early_stopping=True,
                               hidden_layer_sizes=[304, 304, 304],
                               learning_rate_init=0.0053545466158,
                               n_iter_no_change=32))])
transform worked
try transform
transform worked
score start
train score: {'auroc': 0.9965258088371717, 'accuracy': 0.9834668044432963, 'balanced_accuracy': 0.8694480230166798, 'logloss': 0.04011677059527303, 'f1': 0.9100953973534928}
test score: {'auroc': 0.9847791400739, 'accuracy': 0.9752066115702479, 'balanced_accuracy': 0.7964393684917702, 'logloss': 0.061221489155300665, 'f1': 0.8539786297925833}
original test score: {'auroc': 0.9854719516291568, 'accuracy': 0.9762396694214877, 'balanced_accuracy': 0.8060547531071549, 'logloss': 0.056465859836876235, 'f1': 0.8615965138036714}
score end
40983
lvl
0.01
type
MCAR
num_run
3
class_full
finished
all finished
full run takes
8.188405748208364
hours
DONE
