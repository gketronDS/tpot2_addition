Run: 30
/cm/local/apps/slurm/var/spool/job1011643/slurm_script: line 26: 
pip install -e tpot2
pip install -r tpot2/ImputerExperiments/requirements_.txt
: No such file or directory
RunStart
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
starting loops
../data/c/725/725.pkl
working on 
../data/c/725/class_full_MAR_0.1_2
4.857795238494873
running experiment 1/3 - Does large hyperparameter space improve reconstruction accuracy over simple
[I 2024-10-23 12:26:39,368] A new study created in memory with name: no-name-c945982f-532a-499b-b958-5f20db97b6d8
running
running
running
running
running
running
running
running
running
running
running
running
running
running
running
running
[I 2024-10-23 12:26:39,507] Trial 6 finished with value: 0.3989883559133548 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'constant'}. Best is trial 6 with value: 0.3989883559133548.
running
[I 2024-10-23 12:26:39,752] Trial 5 finished with value: 0.20286704700100322 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'mean'}. Best is trial 5 with value: 0.20286704700100322.
running
[I 2024-10-23 12:26:39,988] Trial 16 finished with value: 0.3962752012397615 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'most_frequent'}. Best is trial 5 with value: 0.20286704700100322.
running
[I 2024-10-23 12:26:41,204] Trial 17 finished with value: 0.20286704700100322 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 5448, 'weights': 'uniform'}. Best is trial 5 with value: 0.20286704700100322.
running
[I 2024-10-23 12:26:41,450] Trial 3 finished with value: 0.2025962265113682 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3857, 'weights': 'uniform'}. Best is trial 3 with value: 0.2025962265113682.
running
[I 2024-10-23 12:26:42,216] Trial 19 finished with value: 0.20400563984469713 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 428, 'weights': 'uniform'}. Best is trial 3 with value: 0.2025962265113682.
running
[I 2024-10-23 12:26:42,620] Trial 21 finished with value: 0.20286704700100322 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'mean'}. Best is trial 3 with value: 0.2025962265113682.
running
[I 2024-10-23 12:26:44,250] Trial 8 finished with value: 0.3739967779431537 and parameters: {'model_name': 'GAIN', 'batch_size': 18, 'hint_rate': 0.3926770901462453, 'alpha': 15, 'iterations': 2, 'learning_rate': 0.0352648724615797, 'p_miss': 0.10191373989636203}. Best is trial 3 with value: 0.2025962265113682.
running
[I 2024-10-23 12:26:44,704] Trial 23 finished with value: 0.20541388659798426 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 3 with value: 0.2025962265113682.
running
[I 2024-10-23 12:26:45,751] Trial 10 finished with value: 0.38224680486920326 and parameters: {'model_name': 'GAIN', 'batch_size': 304, 'hint_rate': 0.23707230745127084, 'alpha': 81, 'iterations': 3, 'learning_rate': 0.08370361633735222, 'p_miss': 0.1573390815576303}. Best is trial 3 with value: 0.2025962265113682.
running
[I 2024-10-23 12:26:46,370] Trial 4 finished with value: 0.3781457478902328 and parameters: {'model_name': 'GAIN', 'batch_size': 11, 'hint_rate': 0.3950685242896517, 'alpha': 76, 'iterations': 6, 'learning_rate': 0.0014304419295180172, 'p_miss': 0.2360944041716703}. Best is trial 3 with value: 0.2025962265113682.
running
[I 2024-10-23 12:26:51,345] Trial 2 finished with value: inf and parameters: {'model_name': 'GAIN', 'batch_size': 1, 'hint_rate': 0.1106121485743343, 'alpha': 58, 'iterations': 95, 'learning_rate': 0.011405950981991236, 'p_miss': 0.2017210216101893}. Best is trial 3 with value: 0.2025962265113682.
running
[I 2024-10-23 12:26:52,103] Trial 12 finished with value: 0.3510176219624654 and parameters: {'model_name': 'GAIN', 'batch_size': 36, 'hint_rate': 0.5743302620392017, 'alpha': 65, 'iterations': 22, 'learning_rate': 0.07936709962443785, 'p_miss': 0.2628025260913982}. Best is trial 3 with value: 0.2025962265113682.
running
[I 2024-10-23 12:26:53,259] Trial 11 finished with value: 0.3496500160710353 and parameters: {'model_name': 'VAE', 'batch_size': 7, 'iterations': 17, 'learning_rate': 0.0006018720073123987, 'p_miss': 0.2514972135654524}. Best is trial 3 with value: 0.2025962265113682.
running
[I 2024-10-23 12:27:08,535] Trial 25 finished with value: 0.22473098385898854 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'median', 'n_nearest_features': 7, 'imputation_order': 'descending'}. Best is trial 3 with value: 0.2025962265113682.
running
[I 2024-10-23 12:27:09,474] Trial 14 finished with value: 0.28993965556501894 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Bayesian', 'initial_strategy': 'median', 'n_nearest_features': 4, 'imputation_order': 'descending', 'sample_posterior': True}. Best is trial 3 with value: 0.2025962265113682.
running
[I 2024-10-23 12:27:11,015] Trial 27 finished with value: 0.2278538657139034 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'constant', 'n_nearest_features': 5, 'imputation_order': 'random'}. Best is trial 3 with value: 0.2025962265113682.
running
[I 2024-10-23 12:27:11,676] Trial 29 finished with value: 0.2260203166185017 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'median', 'n_nearest_features': 5, 'imputation_order': 'ascending'}. Best is trial 3 with value: 0.2025962265113682.
running
[I 2024-10-23 12:27:12,764] Trial 30 finished with value: 0.20280840158009078 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3703, 'weights': 'distance'}. Best is trial 3 with value: 0.2025962265113682.
running
[I 2024-10-23 12:27:13,162] Trial 31 finished with value: 0.20287211987610965 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3320, 'weights': 'distance'}. Best is trial 3 with value: 0.2025962265113682.
running
[I 2024-10-23 12:27:14,564] Trial 32 finished with value: 0.20280782088390495 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3616, 'weights': 'distance'}. Best is trial 3 with value: 0.2025962265113682.
running
[I 2024-10-23 12:27:15,650] Trial 33 finished with value: 0.20289437535803337 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3136, 'weights': 'distance'}. Best is trial 3 with value: 0.2025962265113682.
running
[I 2024-10-23 12:27:16,472] Trial 34 finished with value: 0.20280733573624626 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3702, 'weights': 'distance'}. Best is trial 3 with value: 0.2025962265113682.
running
[I 2024-10-23 12:27:16,903] Trial 15 finished with value: 0.37204482341140466 and parameters: {'model_name': 'GAIN', 'batch_size': 6, 'hint_rate': 0.9058782487988671, 'alpha': 48, 'iterations': 59, 'learning_rate': 0.000897457868811529, 'p_miss': 0.16018789095987365}. Best is trial 3 with value: 0.2025962265113682.
running
[I 2024-10-23 12:27:17,474] Trial 35 finished with value: 0.20273997850131092 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3944, 'weights': 'distance'}. Best is trial 3 with value: 0.2025962265113682.
running
[I 2024-10-23 12:27:18,735] Trial 36 finished with value: 0.20280946685294796 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3574, 'weights': 'distance'}. Best is trial 3 with value: 0.2025962265113682.
running
[I 2024-10-23 12:27:19,653] Trial 37 finished with value: 0.20280066155409188 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3766, 'weights': 'distance'}. Best is trial 3 with value: 0.2025962265113682.
running
[I 2024-10-23 12:27:20,577] Trial 38 finished with value: 0.20275495342153366 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 4194, 'weights': 'distance'}. Best is trial 3 with value: 0.2025962265113682.
running
[I 2024-10-23 12:27:20,992] Trial 39 finished with value: 0.2027606634552987 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 4318, 'weights': 'distance'}. Best is trial 3 with value: 0.2025962265113682.
running
[I 2024-10-23 12:27:21,448] Trial 40 finished with value: 0.20268985335357897 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 4624, 'weights': 'uniform'}. Best is trial 3 with value: 0.2025962265113682.
running
[I 2024-10-23 12:27:23,343] Trial 43 finished with value: 0.20286704700100322 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 5248, 'weights': 'uniform'}. Best is trial 3 with value: 0.2025962265113682.
running
[I 2024-10-23 12:27:24,196] Trial 45 finished with value: 0.20286704700100322 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 5333, 'weights': 'uniform'}. Best is trial 3 with value: 0.2025962265113682.
running
[I 2024-10-23 12:30:48,606] Trial 1 finished with value: 0.3413812611487339 and parameters: {'model_name': 'VAE', 'batch_size': 1, 'iterations': 110, 'learning_rate': 0.0001979864168709866, 'p_miss': 0.24548779710785318}. Best is trial 3 with value: 0.2025962265113682.
running
[I 2024-10-23 12:32:57,639] Trial 24 finished with value: 0.3975439654984906 and parameters: {'model_name': 'GAIN', 'batch_size': 87, 'hint_rate': 0.283955849982102, 'alpha': 86, 'iterations': 272, 'learning_rate': 0.07209088187246707, 'p_miss': 0.167104094543299}. Best is trial 3 with value: 0.2025962265113682.
running
[I 2024-10-23 12:37:06,098] Trial 18 finished with value: 0.38084581604392104 and parameters: {'model_name': 'GAIN', 'batch_size': 17, 'hint_rate': 0.39506997620263423, 'alpha': 15, 'iterations': 429, 'learning_rate': 0.0001892030618325605, 'p_miss': 0.1986101034154164}. Best is trial 3 with value: 0.2025962265113682.
running
[I 2024-10-23 12:51:14,064] Trial 9 finished with value: 0.240090938519491 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'mean', 'n_nearest_features': 2, 'imputation_order': 'random'}. Best is trial 3 with value: 0.2025962265113682.
running
[I 2024-10-23 12:52:26,093] Trial 20 finished with value: 0.20780197648026055 and parameters: {'model_name': 'VAE', 'batch_size': 20, 'iterations': 318, 'learning_rate': 0.014305052344269148, 'p_miss': 0.08161404711426844}. Best is trial 3 with value: 0.2025962265113682.
running
[I 2024-10-23 12:52:29,284] Trial 52 finished with value: 0.20277573981710245 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 2125, 'weights': 'uniform'}. Best is trial 3 with value: 0.2025962265113682.
running
[I 2024-10-23 13:00:21,268] Trial 28 finished with value: 0.215305001602787 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'mean', 'n_nearest_features': 5, 'imputation_order': 'descending'}. Best is trial 3 with value: 0.2025962265113682.
running
[I 2024-10-23 13:06:59,612] Trial 13 finished with value: 0.21496719808010484 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'median', 'n_nearest_features': 8, 'imputation_order': 'roman'}. Best is trial 3 with value: 0.2025962265113682.
running
[I 2024-10-23 13:08:07,338] Trial 22 finished with value: 0.21472219452955255 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 7, 'imputation_order': 'random'}. Best is trial 3 with value: 0.2025962265113682.
running
[I 2024-10-23 13:08:11,327] Trial 56 finished with value: 0.20267942320144283 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 4606, 'weights': 'uniform'}. Best is trial 3 with value: 0.2025962265113682.
running
[I 2024-10-23 13:08:15,367] Trial 57 finished with value: 0.20263463803049747 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 4489, 'weights': 'uniform'}. Best is trial 3 with value: 0.2025962265113682.
running
[I 2024-10-23 13:08:19,167] Trial 58 finished with value: 0.20271193641670707 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 4718, 'weights': 'uniform'}. Best is trial 3 with value: 0.2025962265113682.
running
[I 2024-10-23 13:20:25,598] Trial 7 finished with value: 0.4150756887344996 and parameters: {'model_name': 'GAIN', 'batch_size': 575, 'hint_rate': 0.5050665900239582, 'alpha': 58, 'iterations': 1539, 'learning_rate': 0.0004631235177120977, 'p_miss': 0.1240451144667949}. Best is trial 3 with value: 0.2025962265113682.
running
[I 2024-10-23 18:03:55,704] Trial 46 finished with value: 0.20638074428271552 and parameters: {'model_name': 'VAE', 'batch_size': 692, 'iterations': 3453, 'learning_rate': 0.00010656974142360476, 'p_miss': 0.02547373498577002}. Best is trial 3 with value: 0.2025962265113682.
running
[I 2024-10-23 18:03:59,396] Trial 61 finished with value: 0.20271740715211042 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 4752, 'weights': 'uniform'}. Best is trial 3 with value: 0.2025962265113682.
running
[I 2024-10-23 18:04:02,268] Trial 62 finished with value: 0.20286704700100322 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 6335, 'weights': 'uniform'}. Best is trial 3 with value: 0.2025962265113682.
running
[I 2024-10-23 18:04:05,661] Trial 63 finished with value: 0.20271559762544342 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 4697, 'weights': 'uniform'}. Best is trial 3 with value: 0.2025962265113682.
running
[I 2024-10-23 21:08:53,533] Trial 47 finished with value: 0.2064657175932505 and parameters: {'model_name': 'VAE', 'batch_size': 898, 'iterations': 5223, 'learning_rate': 0.00016014981336756574, 'p_miss': 0.02716198727714092}. Best is trial 3 with value: 0.2025962265113682.
running
[I 2024-10-23 21:08:56,143] Trial 65 finished with value: 0.20279835490354814 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 4886, 'weights': 'uniform'}. Best is trial 3 with value: 0.2025962265113682.
running
[I 2024-10-23 21:08:58,644] Trial 66 finished with value: 0.20266077243422637 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 4580, 'weights': 'uniform'}. Best is trial 3 with value: 0.2025962265113682.
running
[I 2024-10-23 21:09:01,275] Trial 67 finished with value: 0.20263004164510515 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 4497, 'weights': 'uniform'}. Best is trial 3 with value: 0.2025962265113682.
running
[I 2024-10-23 21:09:03,642] Trial 68 finished with value: 0.20286704700100322 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 5898, 'weights': 'uniform'}. Best is trial 3 with value: 0.2025962265113682.
running
[I 2024-10-23 21:09:06,068] Trial 69 finished with value: 0.20261226899147666 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 4334, 'weights': 'uniform'}. Best is trial 3 with value: 0.2025962265113682.
running
[I 2024-10-23 21:09:06,926] Trial 70 finished with value: 0.3962752012397615 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'most_frequent'}. Best is trial 3 with value: 0.2025962265113682.
running
[I 2024-10-23 21:09:09,721] Trial 71 finished with value: 0.2027322887317596 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 2737, 'weights': 'uniform'}. Best is trial 3 with value: 0.2025962265113682.
running
[I 2024-10-23 21:09:12,167] Trial 72 finished with value: 0.20260960923590754 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 4274, 'weights': 'uniform'}. Best is trial 3 with value: 0.2025962265113682.
running
[I 2024-10-23 21:09:19,863] Trial 73 finished with value: 0.3506871908386348 and parameters: {'model_name': 'VAE', 'batch_size': 2, 'iterations': 1, 'learning_rate': 0.003398503513225599, 'p_miss': 0.29816378330358806}. Best is trial 3 with value: 0.2025962265113682.
running
[I 2024-10-23 21:09:22,625] Trial 74 finished with value: 0.2025974104809866 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 4224, 'weights': 'uniform'}. Best is trial 3 with value: 0.2025962265113682.
running
[I 2024-10-23 21:31:24,018] Trial 0 finished with value: 0.2063421626859073 and parameters: {'model_name': 'VAE', 'batch_size': 214, 'iterations': 7231, 'learning_rate': 0.055265573961790375, 'p_miss': 0.06351595414312713}. Best is trial 3 with value: 0.2025962265113682.
running
[I 2024-10-23 21:31:26,696] Trial 76 finished with value: 0.202596829218927 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 4180, 'weights': 'uniform'}. Best is trial 3 with value: 0.2025962265113682.
running
[I 2024-10-23 21:31:29,523] Trial 77 finished with value: 0.20255077115585873 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 4081, 'weights': 'uniform'}. Best is trial 77 with value: 0.20255077115585873.
running
[I 2024-10-23 21:31:31,985] Trial 78 finished with value: 0.20261303920637705 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 4261, 'weights': 'uniform'}. Best is trial 77 with value: 0.20255077115585873.
running
[I 2024-10-23 21:31:34,586] Trial 79 finished with value: 0.20254424069255994 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 4050, 'weights': 'uniform'}. Best is trial 79 with value: 0.20254424069255994.
running
[I 2024-10-23 21:50:51,967] Trial 42 finished with value: 0.206401540640658 and parameters: {'model_name': 'VAE', 'batch_size': 564, 'iterations': 6693, 'learning_rate': 0.0001317138898888544, 'p_miss': 0.0187233548372015}. Best is trial 79 with value: 0.20254424069255994.
running
[I 2024-10-23 21:56:59,329] Trial 59 finished with value: 0.20667400996672516 and parameters: {'model_name': 'VAE', 'batch_size': 640, 'iterations': 6707, 'learning_rate': 0.005012360281874775, 'p_miss': 0.03341896209077991}. Best is trial 79 with value: 0.20254424069255994.
running
[I 2024-10-23 22:00:39,657] Trial 80 finished with value: 0.3873197171173005 and parameters: {'model_name': 'GAIN', 'batch_size': 63, 'hint_rate': 0.9797010194774812, 'alpha': 99, 'iterations': 950, 'learning_rate': 0.004331308684030333, 'p_miss': 0.1243839742497716}. Best is trial 79 with value: 0.20254424069255994.
running
[I 2024-10-23 22:00:40,004] Trial 83 finished with value: 0.3989883559133548 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'constant'}. Best is trial 79 with value: 0.20254424069255994.
running
[I 2024-10-23 22:00:42,298] Trial 84 finished with value: 0.20274105792206137 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 2863, 'weights': 'uniform'}. Best is trial 79 with value: 0.20254424069255994.
running
[I 2024-10-23 22:00:44,563] Trial 85 finished with value: 0.2025536486879783 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 4035, 'weights': 'uniform'}. Best is trial 79 with value: 0.20254424069255994.
running
[I 2024-10-23 22:00:47,008] Trial 86 finished with value: 0.20254801319263663 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 4005, 'weights': 'uniform'}. Best is trial 79 with value: 0.20254424069255994.
running
[I 2024-10-23 22:00:49,055] Trial 87 finished with value: 0.20254948844403686 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3990, 'weights': 'uniform'}. Best is trial 79 with value: 0.20254424069255994.
running
[I 2024-10-23 22:00:51,587] Trial 88 finished with value: 0.20255743876982685 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3939, 'weights': 'uniform'}. Best is trial 79 with value: 0.20254424069255994.
running
[I 2024-10-23 22:00:54,137] Trial 89 finished with value: 0.20268970189021593 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3292, 'weights': 'uniform'}. Best is trial 79 with value: 0.20254424069255994.
running
[I 2024-10-23 22:00:56,850] Trial 90 finished with value: 0.20256093830006233 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3931, 'weights': 'uniform'}. Best is trial 79 with value: 0.20254424069255994.
running
[I 2024-10-23 22:00:59,223] Trial 91 finished with value: 0.20256203729530328 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3908, 'weights': 'uniform'}. Best is trial 79 with value: 0.20254424069255994.
running
[I 2024-10-23 22:01:01,347] Trial 92 finished with value: 0.20258046029579826 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3866, 'weights': 'uniform'}. Best is trial 79 with value: 0.20254424069255994.
running
[I 2024-10-23 22:01:03,687] Trial 93 finished with value: 0.2026297473759593 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3442, 'weights': 'uniform'}. Best is trial 79 with value: 0.20254424069255994.
running
[I 2024-10-23 22:01:06,509] Trial 94 finished with value: 0.2025517309462513 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3969, 'weights': 'uniform'}. Best is trial 79 with value: 0.20254424069255994.
running
[I 2024-10-23 22:01:24,827] Trial 95 finished with value: 0.37390521392210463 and parameters: {'model_name': 'GAIN', 'batch_size': 4, 'hint_rate': 0.7376186840835126, 'alpha': 35, 'iterations': 9, 'learning_rate': 0.0018232844185438583, 'p_miss': 0.28498336296379806}. Best is trial 79 with value: 0.20254424069255994.
running
[I 2024-10-23 22:01:27,089] Trial 96 finished with value: 0.20260530019014014 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3818, 'weights': 'uniform'}. Best is trial 79 with value: 0.20254424069255994.
running
[I 2024-10-23 22:01:29,550] Trial 97 finished with value: 0.20254884807289616 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3972, 'weights': 'uniform'}. Best is trial 79 with value: 0.20254424069255994.
running
[I 2024-10-23 22:01:32,310] Trial 98 finished with value: 0.20271409127482695 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3098, 'weights': 'uniform'}. Best is trial 79 with value: 0.20254424069255994.
running
[I 2024-10-23 22:01:34,830] Trial 99 finished with value: 0.20255193641676467 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3967, 'weights': 'uniform'}. Best is trial 79 with value: 0.20254424069255994.
running
[I 2024-10-23 22:01:37,437] Trial 100 finished with value: 0.20262442465756947 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3688, 'weights': 'uniform'}. Best is trial 79 with value: 0.20254424069255994.
running
[I 2024-10-23 22:01:46,459] Trial 101 finished with value: 0.20351055369063578 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Ridge', 'initial_strategy': 'most_frequent', 'n_nearest_features': 1, 'imputation_order': 'arabic'}. Best is trial 79 with value: 0.20254424069255994.
running
[I 2024-10-23 22:01:48,895] Trial 102 finished with value: 0.20262405500414354 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3542, 'weights': 'uniform'}. Best is trial 79 with value: 0.20254424069255994.
running
[I 2024-10-23 22:01:49,484] Trial 103 finished with value: 0.20541388659798426 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 79 with value: 0.20254424069255994.
running
[I 2024-10-23 22:01:52,194] Trial 104 finished with value: 0.20254841427268086 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 4094, 'weights': 'uniform'}. Best is trial 79 with value: 0.20254424069255994.
running
[I 2024-10-23 22:01:54,548] Trial 105 finished with value: 0.20282627927014948 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 4945, 'weights': 'uniform'}. Best is trial 79 with value: 0.20254424069255994.
running
[I 2024-10-23 22:01:56,449] Trial 106 finished with value: 0.20254946666664134 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 4006, 'weights': 'uniform'}. Best is trial 79 with value: 0.20254424069255994.
running
[I 2024-10-23 22:01:58,958] Trial 107 finished with value: 0.20254656552826833 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 4049, 'weights': 'uniform'}. Best is trial 79 with value: 0.20254424069255994.
running
[I 2024-10-23 22:02:01,269] Trial 108 finished with value: 0.20262234202792612 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3579, 'weights': 'uniform'}. Best is trial 79 with value: 0.20254424069255994.
running
[I 2024-10-23 22:02:03,127] Trial 109 finished with value: 0.2041168717188137 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 420, 'weights': 'uniform'}. Best is trial 79 with value: 0.20254424069255994.
running
[I 2024-10-23 22:02:05,492] Trial 110 finished with value: 0.20255447841867094 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 4088, 'weights': 'uniform'}. Best is trial 79 with value: 0.20254424069255994.
running
[I 2024-10-23 22:02:06,947] Trial 111 finished with value: 0.21052718744655166 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 24, 'weights': 'uniform'}. Best is trial 79 with value: 0.20254424069255994.
running
[I 2024-10-23 22:02:10,009] Trial 112 finished with value: 0.2028756943578701 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3246, 'weights': 'distance'}. Best is trial 79 with value: 0.20254424069255994.
running
[I 2024-10-23 22:02:12,837] Trial 113 finished with value: 0.20262572216388275 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3736, 'weights': 'uniform'}. Best is trial 79 with value: 0.20254424069255994.
running
[I 2024-10-23 22:02:26,558] Trial 114 finished with value: 0.2050325677669695 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Ridge', 'initial_strategy': 'constant', 'n_nearest_features': 3, 'imputation_order': 'ascending'}. Best is trial 79 with value: 0.20254424069255994.
running
[I 2024-10-23 22:26:49,836] Trial 81 finished with value: 0.4003247258402946 and parameters: {'model_name': 'GAIN', 'batch_size': 75, 'hint_rate': 0.9585702707715121, 'alpha': 100, 'iterations': 1297, 'learning_rate': 0.003656216380011038, 'p_miss': 0.12306419557921894}. Best is trial 79 with value: 0.20254424069255994.
running
[I 2024-10-23 22:26:52,088] Trial 116 finished with value: 0.20255353372172397 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 4103, 'weights': 'uniform'}. Best is trial 79 with value: 0.20254424069255994.
running
[I 2024-10-23 22:26:54,516] Trial 117 finished with value: 0.2026168064152655 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 4409, 'weights': 'uniform'}. Best is trial 79 with value: 0.20254424069255994.
running
[I 2024-10-23 22:26:57,038] Trial 118 finished with value: 0.2025488374542545 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 4085, 'weights': 'uniform'}. Best is trial 79 with value: 0.20254424069255994.
running
[I 2024-10-23 22:26:59,651] Trial 119 finished with value: 0.20254656552826833 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 4049, 'weights': 'uniform'}. Best is trial 79 with value: 0.20254424069255994.
running
[I 2024-10-23 22:27:01,921] Trial 120 finished with value: 0.20286704700100322 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 5017, 'weights': 'uniform'}. Best is trial 79 with value: 0.20254424069255994.
running
[I 2024-10-23 22:27:04,291] Trial 121 finished with value: 0.20262079072272804 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 4396, 'weights': 'uniform'}. Best is trial 79 with value: 0.20254424069255994.
running
[I 2024-10-23 22:27:06,684] Trial 122 finished with value: 0.20261871582481722 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3467, 'weights': 'uniform'}. Best is trial 79 with value: 0.20254424069255994.
running
[I 2024-10-23 22:27:09,896] Trial 123 finished with value: 0.20280277485372392 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3735, 'weights': 'distance'}. Best is trial 79 with value: 0.20254424069255994.
running
[I 2024-10-23 22:27:12,472] Trial 124 finished with value: 0.20260001278457745 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 4188, 'weights': 'uniform'}. Best is trial 79 with value: 0.20254424069255994.
running
[I 2024-10-23 22:27:19,748] Trial 125 finished with value: 0.3326130220718684 and parameters: {'model_name': 'VAE', 'batch_size': 2, 'iterations': 1, 'learning_rate': 0.020412460082224207, 'p_miss': 0.20835935364638838}. Best is trial 79 with value: 0.20254424069255994.
running
[I 2024-10-23 22:27:22,505] Trial 126 finished with value: 0.20255979021551013 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3927, 'weights': 'uniform'}. Best is trial 79 with value: 0.20254424069255994.
running
[I 2024-10-23 22:27:25,022] Trial 127 finished with value: 0.20255355469821823 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 4029, 'weights': 'uniform'}. Best is trial 79 with value: 0.20254424069255994.
running
[I 2024-10-23 22:27:27,911] Trial 128 finished with value: 0.20263152622405323 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 4501, 'weights': 'uniform'}. Best is trial 79 with value: 0.20254424069255994.
running
[I 2024-10-23 22:27:30,543] Trial 129 finished with value: 0.20255214868245294 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 4110, 'weights': 'uniform'}. Best is trial 79 with value: 0.20254424069255994.
running
[I 2024-10-23 22:27:33,396] Trial 130 finished with value: 0.20302304529294263 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 1636, 'weights': 'uniform'}. Best is trial 79 with value: 0.20254424069255994.
running
[I 2024-10-23 22:27:35,990] Trial 131 finished with value: 0.20261712026519768 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3686, 'weights': 'uniform'}. Best is trial 79 with value: 0.20254424069255994.
running
[I 2024-10-23 22:27:36,428] Trial 132 finished with value: 0.20286704700100322 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'mean'}. Best is trial 79 with value: 0.20254424069255994.
running
[I 2024-10-23 22:27:38,791] Trial 133 finished with value: 0.20261012335694062 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 4273, 'weights': 'uniform'}. Best is trial 79 with value: 0.20254424069255994.
running
[I 2024-10-23 22:27:41,273] Trial 134 finished with value: 0.20268072319853378 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 4604, 'weights': 'uniform'}. Best is trial 79 with value: 0.20254424069255994.
running
[I 2024-10-23 22:28:43,308] Trial 135 finished with value: 0.38021531484444065 and parameters: {'model_name': 'GAIN', 'batch_size': 38, 'hint_rate': 0.05867864386007732, 'alpha': 2, 'iterations': 37, 'learning_rate': 0.007771256792744629, 'p_miss': 0.054845583979287585}. Best is trial 79 with value: 0.20254424069255994.
running
[I 2024-10-23 22:28:44,724] Trial 136 finished with value: 0.202551322781245 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 4099, 'weights': 'uniform'}. Best is trial 79 with value: 0.20254424069255994.
running
[I 2024-10-23 22:28:46,093] Trial 137 finished with value: 0.20254621101973846 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3955, 'weights': 'uniform'}. Best is trial 79 with value: 0.20254424069255994.
running
[I 2024-10-23 22:28:47,577] Trial 138 finished with value: 0.20262643682707765 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 4356, 'weights': 'uniform'}. Best is trial 79 with value: 0.20254424069255994.
running
[I 2024-10-23 22:28:49,236] Trial 139 finished with value: 0.20260321703170261 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3821, 'weights': 'uniform'}. Best is trial 79 with value: 0.20254424069255994.
running
[I 2024-10-23 22:28:51,070] Trial 140 finished with value: 0.20256592558472275 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 4140, 'weights': 'uniform'}. Best is trial 79 with value: 0.20254424069255994.
running
[I 2024-10-23 22:28:53,476] Trial 141 finished with value: 0.2026273003099001 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3410, 'weights': 'uniform'}. Best is trial 79 with value: 0.20254424069255994.
running
[I 2024-10-23 22:28:56,158] Trial 142 finished with value: 0.20262678398947748 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3595, 'weights': 'uniform'}. Best is trial 79 with value: 0.20254424069255994.
running
[I 2024-10-23 22:28:58,397] Trial 143 finished with value: 0.20274307438770028 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 4800, 'weights': 'uniform'}. Best is trial 79 with value: 0.20254424069255994.
running
[I 2024-10-23 22:29:01,546] Trial 144 finished with value: 0.2027667321324757 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3873, 'weights': 'distance'}. Best is trial 79 with value: 0.20254424069255994.
running
[I 2024-10-23 22:29:15,464] Trial 145 finished with value: 0.20356430596984784 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Bayesian', 'initial_strategy': 'most_frequent', 'n_nearest_features': 1, 'imputation_order': 'roman', 'sample_posterior': False}. Best is trial 79 with value: 0.20254424069255994.
running
[I 2024-10-23 22:29:18,122] Trial 146 finished with value: 0.20255426652048691 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 4071, 'weights': 'uniform'}. Best is trial 79 with value: 0.20254424069255994.
running
[I 2024-10-23 22:29:20,567] Trial 147 finished with value: 0.20254884807289616 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3972, 'weights': 'uniform'}. Best is trial 79 with value: 0.20254424069255994.
running
[I 2024-10-23 22:29:22,891] Trial 148 finished with value: 0.20262715680943444 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 4354, 'weights': 'uniform'}. Best is trial 79 with value: 0.20254424069255994.
running
[I 2024-10-23 22:29:25,124] Trial 149 finished with value: 0.20254896499437042 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3971, 'weights': 'uniform'}. Best is trial 79 with value: 0.20254424069255994.
running
[I 2024-10-23 22:29:27,119] Trial 150 finished with value: 0.20260136271758697 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 4236, 'weights': 'uniform'}. Best is trial 79 with value: 0.20254424069255994.
running
[I 2024-10-23 22:29:30,207] Trial 151 finished with value: 0.20260470842695338 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3840, 'weights': 'uniform'}. Best is trial 79 with value: 0.20254424069255994.
running
[I 2024-10-23 22:29:32,766] Trial 152 finished with value: 0.20262109635821285 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 4483, 'weights': 'uniform'}. Best is trial 79 with value: 0.20254424069255994.
running
[I 2024-10-23 22:29:47,276] Trial 49 finished with value: 0.2063365514886888 and parameters: {'model_name': 'VAE', 'batch_size': 974, 'iterations': 6562, 'learning_rate': 0.0068960358337259164, 'p_miss': 0.011530386330366765}. Best is trial 79 with value: 0.20254424069255994.
running
[I 2024-10-23 22:29:50,027] Trial 154 finished with value: 0.20254891490149243 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3997, 'weights': 'uniform'}. Best is trial 79 with value: 0.20254424069255994.
running
[I 2024-10-23 22:29:50,922] Trial 155 finished with value: 0.3962752012397615 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'most_frequent'}. Best is trial 79 with value: 0.20254424069255994.
running
[I 2024-10-23 22:29:52,909] Trial 156 finished with value: 0.20255464409939047 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 4027, 'weights': 'uniform'}. Best is trial 79 with value: 0.20254424069255994.
running
[I 2024-10-23 22:29:54,584] Trial 157 finished with value: 0.20261794905137975 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3670, 'weights': 'uniform'}. Best is trial 79 with value: 0.20254424069255994.
running
[I 2024-10-23 22:29:56,851] Trial 158 finished with value: 0.20260307658445903 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 4205, 'weights': 'uniform'}. Best is trial 79 with value: 0.20254424069255994.
running
[I 2024-10-23 22:29:59,416] Trial 159 finished with value: 0.2026033064200438 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3803, 'weights': 'uniform'}. Best is trial 79 with value: 0.20254424069255994.
running
[I 2024-10-23 22:30:02,010] Trial 160 finished with value: 0.20254981617054474 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 4096, 'weights': 'uniform'}. Best is trial 79 with value: 0.20254424069255994.
running
[I 2024-10-23 22:30:03,016] Trial 82 finished with value: 0.4054188168644625 and parameters: {'model_name': 'GAIN', 'batch_size': 63, 'hint_rate': 0.940054636339295, 'alpha': 32, 'iterations': 1197, 'learning_rate': 0.01793621215089236, 'p_miss': 0.1255932759206332}. Best is trial 79 with value: 0.20254424069255994.
running
[I 2024-10-23 22:30:04,436] Trial 161 finished with value: 0.20254825237069934 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 4007, 'weights': 'uniform'}. Best is trial 79 with value: 0.20254424069255994.
running
[I 2024-10-23 22:30:05,136] Trial 162 finished with value: 0.2025496487855008 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 4008, 'weights': 'uniform'}. Best is trial 79 with value: 0.20254424069255994.
running
[I 2024-10-23 22:30:06,885] Trial 163 finished with value: 0.2025563656087185 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3945, 'weights': 'uniform'}. Best is trial 79 with value: 0.20254424069255994.
running
[I 2024-10-23 22:30:07,713] Trial 164 finished with value: 0.20255772440344416 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3940, 'weights': 'uniform'}. Best is trial 79 with value: 0.20254424069255994.
running
[I 2024-10-23 22:30:10,392] Trial 166 finished with value: 0.20261095469937448 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 4268, 'weights': 'uniform'}. Best is trial 79 with value: 0.20254424069255994.
running
[I 2024-10-23 22:30:12,769] Trial 167 finished with value: 0.20263275151906085 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3760, 'weights': 'uniform'}. Best is trial 79 with value: 0.20254424069255994.
running
[I 2024-10-23 22:30:15,047] Trial 168 finished with value: 0.20261431133937177 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3529, 'weights': 'uniform'}. Best is trial 79 with value: 0.20254424069255994.
running
[I 2024-10-23 22:30:17,545] Trial 169 finished with value: 0.20261846643746315 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 4461, 'weights': 'uniform'}. Best is trial 79 with value: 0.20254424069255994.
running
[I 2024-10-23 22:39:03,080] Trial 165 finished with value: 0.3085366311073091 and parameters: {'model_name': 'VAE', 'batch_size': 133, 'iterations': 153, 'learning_rate': 0.00034489075252608305, 'p_miss': 0.22117897658415916}. Best is trial 79 with value: 0.20254424069255994.
running
[I 2024-10-23 22:39:05,392] Trial 171 finished with value: 0.20255458266169418 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 4021, 'weights': 'uniform'}. Best is trial 79 with value: 0.20254424069255994.
running
[I 2024-10-23 22:39:07,315] Trial 172 finished with value: 0.20262662697201722 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3646, 'weights': 'uniform'}. Best is trial 79 with value: 0.20254424069255994.
running
[I 2024-10-23 22:39:09,847] Trial 173 finished with value: 0.20258894095722374 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 4172, 'weights': 'uniform'}. Best is trial 79 with value: 0.20254424069255994.
running
[I 2024-10-23 22:39:13,045] Trial 174 finished with value: 0.20275610360293275 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 4338, 'weights': 'distance'}. Best is trial 79 with value: 0.20254424069255994.
running
[I 2024-10-23 22:39:43,277] Trial 153 finished with value: 0.28002979770925573 and parameters: {'model_name': 'VAE', 'batch_size': 166, 'iterations': 157, 'learning_rate': 0.0004113326493690982, 'p_miss': 0.18139784428920624}. Best is trial 79 with value: 0.20254424069255994.
running
[I 2024-10-23 22:39:44,273] Trial 170 finished with value: 0.3107798567239899 and parameters: {'model_name': 'VAE', 'batch_size': 2, 'iterations': 193, 'learning_rate': 0.0003339337063611887, 'p_miss': 0.2223482255286202}. Best is trial 79 with value: 0.20254424069255994.
running
[I 2024-10-23 22:39:46,118] Trial 176 finished with value: 0.2025564025833943 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 4031, 'weights': 'uniform'}. Best is trial 79 with value: 0.20254424069255994.
running
[I 2024-10-23 22:39:47,156] Trial 177 finished with value: 0.20255273632102386 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 4025, 'weights': 'uniform'}. Best is trial 79 with value: 0.20254424069255994.
running
[I 2024-10-23 22:39:49,467] Trial 178 finished with value: 0.20260518024530624 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3813, 'weights': 'uniform'}. Best is trial 79 with value: 0.20254424069255994.
running
[I 2024-10-23 22:39:50,428] Trial 179 finished with value: 0.2025984251163017 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3853, 'weights': 'uniform'}. Best is trial 79 with value: 0.20254424069255994.
running
[I 2024-10-23 22:39:52,576] Trial 180 finished with value: 0.20258894095722374 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 4172, 'weights': 'uniform'}. Best is trial 79 with value: 0.20254424069255994.
running
[I 2024-10-23 22:39:53,301] Trial 181 finished with value: 0.20258364000796075 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 4160, 'weights': 'uniform'}. Best is trial 79 with value: 0.20254424069255994.
running
[I 2024-10-23 22:39:54,774] Trial 175 finished with value: 0.30573258058779906 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Bayesian', 'initial_strategy': 'constant', 'n_nearest_features': 8, 'imputation_order': 'arabic', 'sample_posterior': True}. Best is trial 79 with value: 0.20254424069255994.
running
[I 2024-10-23 22:39:57,190] Trial 184 finished with value: 0.20262403094769438 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 4352, 'weights': 'uniform'}. Best is trial 79 with value: 0.20254424069255994.
running
[I 2024-10-23 22:40:00,389] Trial 185 finished with value: 0.20268643039826695 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 4619, 'weights': 'uniform'}. Best is trial 79 with value: 0.20254424069255994.
running
[I 2024-10-23 22:40:03,308] Trial 186 finished with value: 0.2025472874207658 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 4091, 'weights': 'uniform'}. Best is trial 79 with value: 0.20254424069255994.
running
[I 2024-10-23 22:40:03,999] Trial 183 finished with value: 0.2048304685272775 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Ridge', 'initial_strategy': 'constant', 'n_nearest_features': 3, 'imputation_order': 'arabic'}. Best is trial 79 with value: 0.20254424069255994.
running
[I 2024-10-23 22:40:06,526] Trial 187 finished with value: 0.20256159856385106 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3929, 'weights': 'uniform'}. Best is trial 79 with value: 0.20254424069255994.
running
[I 2024-10-23 22:40:06,912] Trial 188 finished with value: 0.20254791040139838 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3954, 'weights': 'uniform'}. Best is trial 79 with value: 0.20254424069255994.
running
[I 2024-10-23 22:40:09,937] Trial 189 finished with value: 0.2026352520070104 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3714, 'weights': 'uniform'}. Best is trial 79 with value: 0.20254424069255994.
running
[I 2024-10-23 22:40:10,433] Trial 190 finished with value: 0.202617981665676 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3679, 'weights': 'uniform'}. Best is trial 79 with value: 0.20254424069255994.
running
[I 2024-10-23 22:40:13,053] Trial 191 finished with value: 0.20256239942895599 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3904, 'weights': 'uniform'}. Best is trial 79 with value: 0.20254424069255994.
running
[I 2024-10-23 22:40:13,692] Trial 192 finished with value: 0.20261247976622077 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 4262, 'weights': 'uniform'}. Best is trial 79 with value: 0.20254424069255994.
running
[I 2024-10-23 22:40:16,380] Trial 194 finished with value: 0.37845549785873833 and parameters: {'model_name': 'GAIN', 'batch_size': 244, 'hint_rate': 0.7041662508992528, 'alpha': 39, 'iterations': 4, 'learning_rate': 0.03171083236042285, 'p_miss': 0.05346914908628245}. Best is trial 79 with value: 0.20254424069255994.
running
[I 2024-10-23 22:40:16,932] Trial 182 finished with value: 0.20452885143989685 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Bayesian', 'initial_strategy': 'constant', 'n_nearest_features': 3, 'imputation_order': 'arabic', 'sample_posterior': False}. Best is trial 79 with value: 0.20254424069255994.
running
[I 2024-10-23 22:40:19,291] Trial 195 finished with value: 0.20268874750000898 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3353, 'weights': 'uniform'}. Best is trial 79 with value: 0.20254424069255994.
running
[I 2024-10-23 22:40:19,741] Trial 196 finished with value: 0.20255191372342743 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 4062, 'weights': 'uniform'}. Best is trial 79 with value: 0.20254424069255994.
running
[I 2024-10-23 22:40:21,979] Trial 197 finished with value: 0.20254656552826833 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 4049, 'weights': 'uniform'}. Best is trial 79 with value: 0.20254424069255994.
running
[I 2024-10-23 22:40:22,215] Trial 198 finished with value: 0.2025616095125021 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 4119, 'weights': 'uniform'}. Best is trial 79 with value: 0.20254424069255994.
[I 2024-10-23 22:40:23,929] Trial 199 finished with value: 0.20256572819932073 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 4141, 'weights': 'uniform'}. Best is trial 79 with value: 0.20254424069255994.
[I 2024-10-23 22:51:16,206] Trial 44 finished with value: 0.20640207572176422 and parameters: {'model_name': 'VAE', 'batch_size': 956, 'iterations': 6884, 'learning_rate': 0.00016838626943778488, 'p_miss': 0.014692153302635375}. Best is trial 79 with value: 0.20254424069255994.
[I 2024-10-23 22:54:32,427] Trial 193 finished with value: 0.3963311083303603 and parameters: {'model_name': 'GAIN', 'batch_size': 273, 'hint_rate': 0.7170462839921998, 'alpha': 37, 'iterations': 562, 'learning_rate': 0.045302822970771574, 'p_miss': 0.09294523257018632}. Best is trial 79 with value: 0.20254424069255994.
[I 2024-10-23 22:55:05,287] Trial 115 finished with value: 0.40523171108634537 and parameters: {'model_name': 'GAIN', 'batch_size': 163, 'hint_rate': 0.70938375536142, 'alpha': 1, 'iterations': 2017, 'learning_rate': 0.016997781173476653, 'p_miss': 0.06259334142966133}. Best is trial 79 with value: 0.20254424069255994.
[I 2024-10-23 22:56:18,812] Trial 51 finished with value: 0.20642190050533643 and parameters: {'model_name': 'VAE', 'batch_size': 955, 'iterations': 6492, 'learning_rate': 0.00713242303633061, 'p_miss': 0.012805597879608804}. Best is trial 79 with value: 0.20254424069255994.
[I 2024-10-23 23:14:53,330] Trial 41 finished with value: 0.20672740117590274 and parameters: {'model_name': 'VAE', 'batch_size': 472, 'iterations': 9367, 'learning_rate': 0.00010123333044117824, 'p_miss': 0.01243587282319894}. Best is trial 79 with value: 0.20254424069255994.
[I 2024-10-23 23:14:55,099] Trial 48 finished with value: 0.2064236324432433 and parameters: {'model_name': 'VAE', 'batch_size': 965, 'iterations': 7094, 'learning_rate': 0.00011102941569532442, 'p_miss': 0.010548136357751342}. Best is trial 79 with value: 0.20254424069255994.
[I 2024-10-23 23:18:21,619] Trial 50 finished with value: 0.20631041837382388 and parameters: {'model_name': 'VAE', 'batch_size': 530, 'iterations': 7643, 'learning_rate': 0.006490434370118724, 'p_miss': 0.06558899290341824}. Best is trial 79 with value: 0.20254424069255994.
[I 2024-10-23 23:22:29,595] Trial 60 finished with value: 0.22052684895027674 and parameters: {'model_name': 'VAE', 'batch_size': 3, 'iterations': 7701, 'learning_rate': 0.0057838574915206895, 'p_miss': 0.025677820870025597}. Best is trial 79 with value: 0.20254424069255994.
[I 2024-10-23 23:34:04,069] Trial 53 finished with value: 0.20605230872096952 and parameters: {'model_name': 'VAE', 'batch_size': 797, 'iterations': 8912, 'learning_rate': 0.00397132515394283, 'p_miss': 0.020634091587839964}. Best is trial 79 with value: 0.20254424069255994.
[I 2024-10-23 23:35:30,080] Trial 26 finished with value: 0.27014153662737617 and parameters: {'model_name': 'VAE', 'batch_size': 1, 'iterations': 9552, 'learning_rate': 0.00012674195538354814, 'p_miss': 0.010328401655367914}. Best is trial 79 with value: 0.20254424069255994.
[I 2024-10-23 23:37:42,943] Trial 75 finished with value: 0.39358577315237026 and parameters: {'model_name': 'GAIN', 'batch_size': 86, 'hint_rate': 0.9448762527900798, 'alpha': 100, 'iterations': 9551, 'learning_rate': 0.003744266256562534, 'p_miss': 0.0752264377357396}. Best is trial 79 with value: 0.20254424069255994.
[I 2024-10-23 23:48:45,053] Trial 55 finished with value: 0.20643895437745954 and parameters: {'model_name': 'VAE', 'batch_size': 950, 'iterations': 9425, 'learning_rate': 0.0038615558214225554, 'p_miss': 0.013404648825467047}. Best is trial 79 with value: 0.20254424069255994.
[I 2024-10-23 23:50:35,252] Trial 54 finished with value: 0.20638695780275684 and parameters: {'model_name': 'VAE', 'batch_size': 834, 'iterations': 9728, 'learning_rate': 0.005083255060290253, 'p_miss': 0.03424261417847811}. Best is trial 79 with value: 0.20254424069255994.
[I 2024-10-23 23:50:41,354] Trial 64 finished with value: 0.21708583258909392 and parameters: {'model_name': 'VAE', 'batch_size': 3, 'iterations': 8631, 'learning_rate': 0.003937268965663874, 'p_miss': 0.01979894690759279}. Best is trial 79 with value: 0.20254424069255994.
fit
auto fit
auto transform
0    0
1    0
2    0
3    0
4    0
5    0
6    0
7    0
dtype: int64
0    0
1    0
2    0
3    0
4    0
5    0
6    0
7    0
dtype: int64
0.20254424069255994
{'model_name': 'KNNImputer', 'n_neighbors': 4050, 'weights': 'uniform'}
running experiment 2/3 - Does reconstruction give good automl predictions
Start est fit
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
  0%|          | 0/25 [00:00<?, ?it/s]Generation:   0%|          | 0/25 [00:00<?, ?it/s]Generation:  1
Best f1_score score: 0.9369022394789402
Generation:   4%|▍         | 1/25 [00:21<08:40, 21.68s/it]Generation:  2
Best f1_score score: 0.9369022394789402
Generation:   8%|▊         | 2/25 [00:32<05:57, 15.55s/it]Generation:  3
Best f1_score score: 0.9386294763153629
Generation:  12%|█▏        | 3/25 [02:09<19:15, 52.51s/it]Generation:  4
Best f1_score score: 0.9386294763153629
Generation:  16%|█▌        | 4/25 [02:29<13:56, 39.85s/it]Generation:  5
Best f1_score score: 0.9386294763153629
Generation:  20%|██        | 5/25 [02:49<10:49, 32.46s/it]Generation:  6
Best f1_score score: 0.9400898606261595
Generation:  24%|██▍       | 6/25 [03:17<09:52, 31.19s/it]Generation:  7
Best f1_score score: 0.9400898606261595
Generation:  28%|██▊       | 7/25 [04:38<14:12, 47.37s/it]Generation:  8
Best f1_score score: 0.9400898606261595
Generation:  32%|███▏      | 8/25 [09:56<37:49, 133.50s/it]Generation:  9
Best f1_score score: 0.9400898606261595
Generation:  36%|███▌      | 9/25 [13:50<44:00, 165.04s/it]Generation:  10
Best f1_score score: 0.9400898606261595
Generation:  40%|████      | 10/25 [16:59<43:03, 172.21s/it]Generation:  11
Best f1_score score: 0.9400898606261595
Generation:  44%|████▍     | 11/25 [20:29<42:54, 183.86s/it]Generation:  12
Best f1_score score: 0.9400898606261595
Generation:  48%|████▊     | 12/25 [22:31<35:45, 165.07s/it]Generation:  13
Best f1_score score: 0.9400898606261595
Generation:  52%|█████▏    | 13/25 [30:11<50:53, 254.50s/it]Generation:  14
Best f1_score score: 0.9400898606261595
Generation:  56%|█████▌    | 14/25 [30:45<34:24, 187.66s/it]Generation:  15
Best f1_score score: 0.9402474426924275
Generation:  60%|██████    | 15/25 [33:16<29:27, 176.74s/it]Generation:  16
Best f1_score score: 0.9402474426924275
Generation:  64%|██████▍   | 16/25 [34:02<20:35, 137.26s/it]Generation:  17
Best f1_score score: 0.9402474426924275
Generation:  68%|██████▊   | 17/25 [35:05<15:21, 115.15s/it]Generation:  18
Best f1_score score: 0.9402474426924275
Generation:  72%|███████▏  | 18/25 [37:17<14:00, 120.12s/it]Generation:  19
Best f1_score score: 0.9402474426924275
Generation:  76%|███████▌  | 19/25 [40:00<13:17, 132.88s/it]WARNING AN INDIVIDUAL TIMED OUT: 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155467ea47f0> 

WARNING AN INDIVIDUAL TIMED OUT: 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x1554655b4fd0> 

Generation:  20
Best f1_score score: 0.9412372666723858
Generation:  80%|████████  | 20/25 [50:13<23:05, 277.19s/it]Generation:  21
Best f1_score score: 0.9412372666723858
Generation:  84%|████████▍ | 21/25 [51:45<14:46, 221.58s/it]Generation:  22
Best f1_score score: 0.9412372666723858
Generation:  88%|████████▊ | 22/25 [57:16<12:42, 254.27s/it]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155464893e50> 
 The 'min_samples_split' parameter of DecisionTreeClassifier must be an int in the range [2, inf) or a float in the range (0.0, 1.0]. Got 1 instead. 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1466, in wrapper
    estimator._validate_params()
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 666, in _validate_params
    validate_parameter_constraints(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/_param_validation.py", line 95, in validate_parameter_constraints
    raise InvalidParameterError(
sklearn.utils._param_validation.InvalidParameterError: The 'min_samples_split' parameter of DecisionTreeClassifier must be an int in the range [2, inf) or a float in the range (0.0, 1.0]. Got 1 instead.

Generation:  23
Best f1_score score: 0.9412372666723858
Generation:  92%|█████████▏| 23/25 [1:03:07<09:26, 283.35s/it]Generation:  24
Best f1_score score: 0.9412372666723858
Generation:  96%|█████████▌| 24/25 [1:08:45<04:59, 299.76s/it]Generation:  25
Best f1_score score: 0.9412372666723858
Generation: 100%|██████████| 25/25 [1:16:36<00:00, 351.07s/it]Generation: 100%|██████████| 25/25 [1:16:39<00:00, 183.99s/it]
2024-10-24 01:08:10,176 - distributed.scheduler - ERROR - Removing worker 'tcp://127.0.0.1:44005' caused the cluster to lose scattered data, which can't be recovered: {'ndarray-422b2c53f5e51e71a00dd009dc06b86a', 'ndarray-d7b7aa08a0222bb476989d82ac61aa60'} (stimulus_id='handle-worker-cleanup-1729757290.1759117')
Fitted
Pipeline(steps=[('mlpclassifier',
                 MLPClassifier(alpha=0.0786067670743,
                               hidden_layer_sizes=[450, 450],
                               learning_rate_init=0.0009331008203,
                               n_iter_no_change=32))])
score start
train score: {'auroc': 0.9922532036460521, 'accuracy': 0.9450633297726232, 'balanced_accuracy': 0.9487477096083261, 'logloss': 0.12396449836820736, 'f1': 0.9435498228304628}
original test score: {'auroc': 0.9923914690448287, 'accuracy': 0.9469188529591214, 'balanced_accuracy': 0.9498750722818172, 'logloss': 0.12485038282028058, 'f1': 0.9453927149692962}
imputed test score: {'auroc': 0.985433860977714, 'accuracy': 0.9347162904209884, 'balanced_accuracy': 0.9381785600534345, 'logloss': 0.16313632002326683, 'f1': 0.9329502421083016}
score end
check intended
EXP2 Finished
running experiment 3/3 - What is the best automl settings?
<tpot2.search_spaces.pipelines.sequential.SequentialPipeline object at 0x1554350145b0>
Start tpot fit
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
  0%|          | 0/25 [00:00<?, ?it/s]Generation:   0%|          | 0/25 [00:00<?, ?it/s]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x1554746a5810> 
 Input X contains NaN.
MLPClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/neural_network/_multilayer_perceptron.py", line 751, in fit
    return self._fit(X, y, incremental=False)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/neural_network/_multilayer_perceptron.py", line 441, in _fit
    X, y = self._validate_input(X, y, incremental, reset=first_pass)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/neural_network/_multilayer_perceptron.py", line 1096, in _validate_input
    X, y = self._validate_data(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 650, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1301, in check_X_y
    X = check_array(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1064, in check_array
    _assert_all_finite(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 123, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 172, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
MLPClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Generation:  1
Best f1_score score: 0.9346964291513309
Generation:   4%|▍         | 1/25 [01:27<35:08, 87.86s/it]WARNING AN INDIVIDUAL TIMED OUT: 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155474704d60> 

Generation:  2
Best f1_score score: 0.9368913627923418
Generation:   8%|▊         | 2/25 [11:31<2:30:05, 391.55s/it]WARNING AN INDIVIDUAL TIMED OUT: 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x1554746a6b00> 

Generation:  3
Best f1_score score: 0.9368913627923418
Generation:  12%|█▏        | 3/25 [21:37<2:59:22, 489.21s/it]Generation:  4
Best f1_score score: 0.9369100599350014
Generation:  16%|█▌        | 4/25 [22:19<1:49:24, 312.58s/it]Generation:  5
Best f1_score score: 0.9369100599350014
Generation:  20%|██        | 5/25 [22:41<1:09:14, 207.73s/it]WARNING AN INDIVIDUAL TIMED OUT: 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x1554746a71c0> 

WARNING AN INDIVIDUAL TIMED OUT: 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155465951d50> 

Generation:  6
Best f1_score score: 0.9369100599350014
Generation:  24%|██▍       | 6/25 [32:45<1:48:30, 342.65s/it]WARNING AN INDIVIDUAL TIMED OUT: 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155465ab9f90> 

WARNING AN INDIVIDUAL TIMED OUT: 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155465b11cf0> 

Generation:  7
Best f1_score score: 0.9374624123763511
Generation:  28%|██▊       | 7/25 [42:50<2:08:29, 428.31s/it]Generation:  8
Best f1_score score: 0.9377879651185811
Generation:  32%|███▏      | 8/25 [45:50<1:39:00, 349.42s/it]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155467f36590> 
 Input X contains NaN.
LinearSVC does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/svm/_classes.py", line 302, in fit
    X, y = self._validate_data(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 650, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1301, in check_X_y
    X = check_array(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1064, in check_array
    _assert_all_finite(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 123, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 172, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
LinearSVC does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Generation:  9
Best f1_score score: 0.9377879651185811
Generation:  36%|███▌      | 9/25 [46:03<1:05:06, 244.15s/it]WARNING AN INDIVIDUAL TIMED OUT: 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155465343460> 

WARNING AN INDIVIDUAL TIMED OUT: 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x15546600d630> 

Generation:  10
Best f1_score score: 0.9377879651185811
Generation:  40%|████      | 10/25 [56:08<1:28:52, 355.47s/it]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x15545292e980> 
 Input X contains NaN.
LogisticRegression does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py", line 1223, in fit
    X, y = self._validate_data(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 650, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1301, in check_X_y
    X = check_array(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1064, in check_array
    _assert_all_finite(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 123, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 172, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
LogisticRegression does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

WARNING AN INDIVIDUAL TIMED OUT: 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155467be7f40> 

Generation:  11
Best f1_score score: 0.9377879651185811
Generation:  44%|████▍     | 11/25 [1:06:13<1:40:47, 431.95s/it]WARNING AN INDIVIDUAL TIMED OUT: 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155452bded70> 

Generation:  12
Best f1_score score: 0.9377879651185811
Generation:  48%|████▊     | 12/25 [1:16:19<1:45:02, 484.79s/it]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x1553fc4a5330> 
 Input X contains NaN.
LogisticRegression does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py", line 1223, in fit
    X, y = self._validate_data(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 650, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1301, in check_X_y
    X = check_array(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1064, in check_array
    _assert_all_finite(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 123, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 172, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
LogisticRegression does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

WARNING AN INDIVIDUAL TIMED OUT: 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x1554654e6da0> 

WARNING AN INDIVIDUAL TIMED OUT: 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x1554528e51b0> 

Generation:  13
Best f1_score score: 0.9377889961714547
Generation:  52%|█████▏    | 13/25 [1:26:24<1:44:13, 521.15s/it]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x1554527dfa30> 
 Input X contains NaN.
LogisticRegression does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py", line 1223, in fit
    X, y = self._validate_data(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 650, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1301, in check_X_y
    X = check_array(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1064, in check_array
    _assert_all_finite(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 123, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 172, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
LogisticRegression does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Generation:  14
Best f1_score score: 0.9377889961714547
Generation:  56%|█████▌    | 14/25 [1:26:44<1:07:50, 370.06s/it]Generation:  15
Best f1_score score: 0.9377889961714547
Generation:  60%|██████    | 15/25 [1:28:35<48:37, 291.77s/it]  WARNING AN INDIVIDUAL TIMED OUT: 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x15546577b880> 

Generation:  16
Best f1_score score: 0.9377889961714547
Generation:  64%|██████▍   | 16/25 [1:38:39<57:51, 385.69s/it]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x1554657bb6d0> 
 Input X contains NaN.
LogisticRegression does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py", line 1223, in fit
    X, y = self._validate_data(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 650, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1301, in check_X_y
    X = check_array(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1064, in check_array
    _assert_all_finite(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 123, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 172, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
LogisticRegression does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

WARNING AN INDIVIDUAL TIMED OUT: 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x15547471f7f0> 

Generation:  17
Best f1_score score: 0.9377889961714547
Generation:  68%|██████▊   | 17/25 [1:48:44<1:00:13, 451.68s/it]WARNING AN INDIVIDUAL TIMED OUT: 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155465104310> 

Generation:  18
Best f1_score score: 0.9377889961714547
Generation:  72%|███████▏  | 18/25 [1:58:48<58:03, 497.65s/it]  Generation:  19
Best f1_score score: 0.9377889961714547
Generation:  76%|███████▌  | 19/25 [1:58:59<35:07, 351.29s/it]Generation:  20
Best f1_score score: 0.9379597989375341
Generation:  80%|████████  | 20/25 [2:00:38<22:58, 275.68s/it]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x15547473e770> 
 Input X contains NaN.
LogisticRegression does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py", line 1223, in fit
    X, y = self._validate_data(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 650, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1301, in check_X_y
    X = check_array(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1064, in check_array
    _assert_all_finite(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 123, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 172, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
LogisticRegression does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155465a837f0> 
 Input X contains NaN.
LogisticRegression does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py", line 1223, in fit
    X, y = self._validate_data(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 650, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1301, in check_X_y
    X = check_array(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1064, in check_array
    _assert_all_finite(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 123, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 172, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
LogisticRegression does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

WARNING AN INDIVIDUAL TIMED OUT: 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155465c188b0> 

Generation:  21
Best f1_score score: 0.9379597989375341
Generation:  84%|████████▍ | 21/25 [2:10:45<24:59, 374.93s/it]Generation:  22
Best f1_score score: 0.9379597989375341
Generation:  88%|████████▊ | 22/25 [2:10:54<13:16, 265.38s/it]Generation:  23
Best f1_score score: 0.9379597989375341
Generation:  92%|█████████▏| 23/25 [2:11:06<06:18, 189.22s/it]Generation:  24
Best f1_score score: 0.9379597989375341
Generation:  96%|█████████▌| 24/25 [2:11:29<02:19, 139.36s/it]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x1554651fece0> 
 Input X contains NaN.
LogisticRegression does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py", line 1223, in fit
    X, y = self._validate_data(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 650, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1301, in check_X_y
    X = check_array(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1064, in check_array
    _assert_all_finite(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 123, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 172, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
LogisticRegression does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

WARNING AN INDIVIDUAL TIMED OUT: 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x15547472bdf0> 

Generation:  25
Best f1_score score: 0.9379597989375341
Generation: 100%|██████████| 25/25 [2:21:34<00:00, 279.03s/it]Generation: 100%|██████████| 25/25 [2:21:34<00:00, 339.78s/it]
2024-10-24 03:30:00,990 - distributed.scheduler - ERROR - Removing worker 'tcp://127.0.0.1:40601' caused the cluster to lose scattered data, which can't be recovered: {'ndarray-422b2c53f5e51e71a00dd009dc06b86a', 'DataFrame-2115624814fe4e3c91fa8171ce5a30a4'} (stimulus_id='handle-worker-cleanup-1729765800.9908216')
Fitted
Pipeline(steps=[('knnimputer', KNNImputer(n_neighbors=49, weights='distance')),
                ('logisticregression',
                 LogisticRegression(C=0.946670008229, class_weight='balanced',
                                    max_iter=1000, n_jobs=1, solver='saga'))])
transform worked
try transform
transform worked
score start
train score: {'auroc': 0.988460392428502, 'accuracy': 0.9404852739203419, 'balanced_accuracy': 0.9379448003513707, 'logloss': 0.2183666374427403, 'f1': 0.9381588529628349}
test score: {'auroc': 0.9830930123969115, 'accuracy': 0.9377669310555217, 'balanced_accuracy': 0.9370846694517714, 'logloss': 0.2319583934733356, 'f1': 0.9355947482779344}
original test score: {'auroc': 0.9902176030576367, 'accuracy': 0.9505796217205613, 'balanced_accuracy': 0.9497799849715666, 'logloss': 0.21405383910945402, 'f1': 0.9487947822431186}
score end
725
lvl
0.1
type
MAR
num_run
2
class_full
finished
all finished
full run takes
15.060965564714538
hours
DONE
