Run: 2
/cm/local/apps/slurm/var/spool/job1046144/slurm_script: line 27: 
pip install -e tpot2
pip install -r tpot2/ImputerExperiments/requirements_.txt
: No such file or directory
RunStart
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
starting loops
../data/c/1496/1496.pkl
working on 
../data/c/1496/class_full_MCAR_0.1_1
4.834553956985474
running experiment 1/3 - Does large hyperparameter space improve reconstruction accuracy over simple
[I 2024-11-12 08:58:44,637] A new study created in memory with name: no-name-5a5b174c-d5e9-40aa-a5cf-e8ccbfdea2b3
running
running
running
running
running
running
running
running
running
running
running
running
running
running
running
running
[I 2024-11-12 08:58:44,901] Trial 1 finished with value: 0.5140579204383919 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'constant'}. Best is trial 1 with value: 0.5140579204383919.
running
[I 2024-11-12 08:58:45,100] Trial 6 finished with value: 0.10399882552330983 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 08:58:45,259] Trial 10 finished with value: 0.10399882552330983 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 6 with value: 0.10399882552330983.
[I 2024-11-12 08:58:45,394] Trial 16 finished with value: 0.5140579204383919 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'constant'}. Best is trial 6 with value: 0.10399882552330983.
running
running
[I 2024-11-12 08:58:50,034] Trial 13 finished with value: 0.11585142239354243 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 4872, 'weights': 'uniform'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 08:58:51,101] Trial 0 finished with value: 0.11513713110685479 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 112, 'weights': 'uniform'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 08:58:51,536] Trial 17 finished with value: 0.11585142239354243 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 5843, 'weights': 'uniform'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 08:58:51,690] Trial 21 finished with value: 0.11585142239354243 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'mean'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 08:58:53,590] Trial 18 finished with value: 0.11583468686891563 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 4378, 'weights': 'uniform'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 08:58:53,784] Trial 20 finished with value: 0.4532280803455346 and parameters: {'model_name': 'GAIN', 'batch_size': 4, 'hint_rate': 0.8700846618475448, 'alpha': 54, 'iterations': 1, 'learning_rate': 0.00035972530079807214, 'p_miss': 0.23325060558266605}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 08:58:54,061] Trial 15 finished with value: 0.4875296266254828 and parameters: {'model_name': 'GAIN', 'batch_size': 10, 'hint_rate': 0.9416083988635765, 'alpha': 21, 'iterations': 1, 'learning_rate': 0.04764517260068806, 'p_miss': 0.08078002898937386}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 08:58:55,742] Trial 2 finished with value: 0.11530246412597253 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3096, 'weights': 'distance'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 08:58:55,965] Trial 8 finished with value: 0.11548687338550263 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3806, 'weights': 'distance'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 08:58:57,345] Trial 19 finished with value: 0.48145627969281807 and parameters: {'model_name': 'GAIN', 'batch_size': 5, 'hint_rate': 0.2948357384420496, 'alpha': 33, 'iterations': 5, 'learning_rate': 0.08682935989519511, 'p_miss': 0.09165216409144511}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 08:59:00,149] Trial 4 finished with value: 0.48781654523980855 and parameters: {'model_name': 'GAIN', 'batch_size': 309, 'hint_rate': 0.6886928115623382, 'alpha': 30, 'iterations': 7, 'learning_rate': 0.00300364503911561, 'p_miss': 0.07274080697569035}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 08:59:26,411] Trial 7 finished with value: 0.116168942745059 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Ridge', 'initial_strategy': 'constant', 'n_nearest_features': 10, 'imputation_order': 'arabic'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 08:59:29,546] Trial 14 finished with value: 0.11637106257599605 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Ridge', 'initial_strategy': 'most_frequent', 'n_nearest_features': 11, 'imputation_order': 'arabic'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 08:59:31,767] Trial 12 finished with value: 0.11642263453971516 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Ridge', 'initial_strategy': 'median', 'n_nearest_features': 18, 'imputation_order': 'arabic'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 08:59:42,312] Trial 25 finished with value: 0.14006327457071066 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'constant', 'n_nearest_features': 2, 'imputation_order': 'random'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 08:59:43,958] Trial 27 finished with value: 0.13952483372949664 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'median', 'n_nearest_features': 2, 'imputation_order': 'ascending'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 08:59:45,136] Trial 24 finished with value: 0.21192692586924805 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Bayesian', 'initial_strategy': 'most_frequent', 'n_nearest_features': 1, 'imputation_order': 'descending', 'sample_posterior': True}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 09:00:59,663] Trial 28 finished with value: 0.13827873884092895 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'most_frequent', 'n_nearest_features': 12, 'imputation_order': 'roman'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 09:02:28,969] Trial 22 finished with value: 0.21424154987160407 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Bayesian', 'initial_strategy': 'constant', 'n_nearest_features': 15, 'imputation_order': 'arabic', 'sample_posterior': True}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 09:02:50,964] Trial 11 finished with value: 0.14701731668997134 and parameters: {'model_name': 'VAE', 'batch_size': 3, 'iterations': 334, 'learning_rate': 0.0007401720228681282, 'p_miss': 0.06382709150335372}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 09:02:51,258] Trial 39 finished with value: 0.10399882552330983 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 09:02:51,513] Trial 40 finished with value: 0.10399882552330983 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 09:02:51,801] Trial 41 finished with value: 0.10399882552330983 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 09:02:52,032] Trial 42 finished with value: 0.10399882552330983 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 09:02:52,440] Trial 43 finished with value: 0.5140579204383919 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'most_frequent'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 09:03:33,797] Trial 9 finished with value: 0.1247174166886662 and parameters: {'model_name': 'VAE', 'batch_size': 18, 'iterations': 355, 'learning_rate': 0.00017223499202812198, 'p_miss': 0.19216392739519988}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 09:03:34,018] Trial 45 finished with value: 0.10399882552330983 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 09:03:34,259] Trial 46 finished with value: 0.10399882552330983 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 09:03:34,504] Trial 47 finished with value: 0.10399882552330983 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 09:03:34,741] Trial 48 finished with value: 0.10399882552330983 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 09:03:35,006] Trial 49 finished with value: 0.10399882552330983 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 09:03:35,242] Trial 50 finished with value: 0.10399882552330983 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 09:03:35,460] Trial 51 finished with value: 0.10399882552330983 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 09:13:40,764] Trial 23 finished with value: 0.45552797284549723 and parameters: {'model_name': 'GAIN', 'batch_size': 22, 'hint_rate': 0.15918359955969594, 'alpha': 56, 'iterations': 3156, 'learning_rate': 0.00014894729901425638, 'p_miss': 0.2711312414710579}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 09:13:40,990] Trial 53 finished with value: 0.11585142239354243 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'mean'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 09:36:49,805] Trial 5 finished with value: 0.49420409037961177 and parameters: {'model_name': 'GAIN', 'batch_size': 903, 'hint_rate': 0.9058723641447933, 'alpha': 34, 'iterations': 5406, 'learning_rate': 0.0002568279771667896, 'p_miss': 0.13061849484083865}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 09:37:08,589] Trial 55 finished with value: 0.1859602994811808 and parameters: {'model_name': 'VAE', 'batch_size': 1, 'iterations': 35, 'learning_rate': 0.012274108021796742, 'p_miss': 0.01839251276019996}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 09:37:08,839] Trial 56 finished with value: 0.10399882552330983 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 09:37:09,057] Trial 57 finished with value: 0.10399882552330983 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 09:37:09,270] Trial 58 finished with value: 0.10399882552330983 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 09:37:09,625] Trial 59 finished with value: 0.5140579204383919 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'most_frequent'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 09:42:25,573] Trial 3 finished with value: 0.12876748005493896 and parameters: {'model_name': 'VAE', 'batch_size': 223, 'iterations': 1816, 'learning_rate': 0.00012813323880956495, 'p_miss': 0.05949079856927794}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 09:42:25,862] Trial 61 finished with value: 0.10399882552330983 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 09:43:43,372] Trial 62 finished with value: 0.129036387834692 and parameters: {'model_name': 'VAE', 'batch_size': 90, 'iterations': 79, 'learning_rate': 0.001828057322694067, 'p_miss': 0.16896453749052873}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 09:43:43,642] Trial 63 finished with value: 0.10399882552330983 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 09:43:43,858] Trial 64 finished with value: 0.10399882552330983 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 09:43:45,896] Trial 65 finished with value: 0.11457665197481626 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 996, 'weights': 'distance'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 09:43:46,124] Trial 66 finished with value: 0.10399882552330983 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 09:43:46,393] Trial 67 finished with value: 0.10399882552330983 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 09:43:46,619] Trial 68 finished with value: 0.10399882552330983 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 09:43:46,852] Trial 69 finished with value: 0.10399882552330983 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 09:43:47,107] Trial 70 finished with value: 0.10399882552330983 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 09:47:54,567] Trial 71 finished with value: 0.2102190321180216 and parameters: {'model_name': 'VAE', 'batch_size': 1, 'iterations': 456, 'learning_rate': 0.012221729556310937, 'p_miss': 0.2843524629499827}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 09:47:54,762] Trial 72 finished with value: 0.11585142239354243 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'mean'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 09:47:57,251] Trial 73 finished with value: 0.11480223797430252 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 1693, 'weights': 'distance'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 09:48:05,457] Trial 74 finished with value: 0.45992936401447704 and parameters: {'model_name': 'GAIN', 'batch_size': 61, 'hint_rate': 0.4817929830196397, 'alpha': 99, 'iterations': 31, 'learning_rate': 0.012262383449450968, 'p_miss': 0.20302441589352965}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 09:48:05,856] Trial 75 finished with value: 0.5140579204383919 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'most_frequent'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 09:48:06,114] Trial 76 finished with value: 0.10399882552330983 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 09:48:06,294] Trial 77 finished with value: 0.5140579204383919 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'constant'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 09:48:06,498] Trial 78 finished with value: 0.10399882552330983 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 09:48:06,743] Trial 79 finished with value: 0.10399882552330983 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 09:48:06,949] Trial 80 finished with value: 0.5140579204383919 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'constant'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 09:48:07,188] Trial 81 finished with value: 0.10399882552330983 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 09:48:07,411] Trial 82 finished with value: 0.10399882552330983 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 09:48:10,240] Trial 83 finished with value: 0.4776059678150742 and parameters: {'model_name': 'GAIN', 'batch_size': 798, 'hint_rate': 0.015515057272918131, 'alpha': 0, 'iterations': 5, 'learning_rate': 0.0009257400968407305, 'p_miss': 0.1308827695568227}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 09:48:10,464] Trial 84 finished with value: 0.5140579204383919 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'constant'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 09:48:12,779] Trial 85 finished with value: 0.1149858623570272 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 1997, 'weights': 'uniform'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 09:48:13,027] Trial 86 finished with value: 0.10399882552330983 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 09:48:13,251] Trial 87 finished with value: 0.10399882552330983 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 09:48:13,491] Trial 88 finished with value: 0.10399882552330983 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 09:48:13,738] Trial 89 finished with value: 0.10399882552330983 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 09:49:32,240] Trial 60 finished with value: 0.13043842766585123 and parameters: {'model_name': 'VAE', 'batch_size': 111, 'iterations': 762, 'learning_rate': 0.0027938101953931685, 'p_miss': 0.2961303339588327}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 09:49:32,422] Trial 91 finished with value: 0.11585142239354243 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'mean'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 09:49:32,684] Trial 92 finished with value: 0.10399882552330983 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 10:49:04,893] Trial 44 finished with value: 0.12770375070411943 and parameters: {'model_name': 'VAE', 'batch_size': 955, 'iterations': 1402, 'learning_rate': 0.012548303512840605, 'p_miss': 0.2961989007857346}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 10:50:59,794] Trial 93 finished with value: 0.12537655947006313 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'mean', 'n_nearest_features': 6, 'imputation_order': 'ascending'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 10:51:00,045] Trial 95 finished with value: 0.10399882552330983 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 10:51:00,256] Trial 96 finished with value: 0.10399882552330983 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 10:51:00,497] Trial 97 finished with value: 0.10399882552330983 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 10:51:00,735] Trial 98 finished with value: 0.10399882552330983 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 10:51:01,066] Trial 99 finished with value: 0.5140579204383919 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'most_frequent'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 10:51:01,316] Trial 100 finished with value: 0.10399882552330983 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 10:51:01,604] Trial 101 finished with value: 0.10399882552330983 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 10:51:01,843] Trial 102 finished with value: 0.10399882552330983 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 10:51:02,075] Trial 103 finished with value: 0.10399882552330983 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 11:19:34,376] Trial 29 finished with value: 0.12774339358215037 and parameters: {'model_name': 'VAE', 'batch_size': 957, 'iterations': 1753, 'learning_rate': 0.0001249367471053047, 'p_miss': 0.2946755946501019}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 11:25:51,297] Trial 105 finished with value: inf and parameters: {'model_name': 'GAIN', 'batch_size': 10, 'hint_rate': 0.5164873116127507, 'alpha': 98, 'iterations': 8685, 'learning_rate': 0.030690082075649334, 'p_miss': 0.021957486642856988}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 11:25:51,550] Trial 106 finished with value: 0.10399882552330983 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 11:25:51,780] Trial 107 finished with value: 0.10399882552330983 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 11:25:52,010] Trial 108 finished with value: 0.10399882552330983 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 11:25:52,236] Trial 109 finished with value: 0.10399882552330983 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 11:29:01,080] Trial 104 finished with value: 0.4549164724689372 and parameters: {'model_name': 'GAIN', 'batch_size': 43, 'hint_rate': 0.5272247038041087, 'alpha': 100, 'iterations': 9967, 'learning_rate': 0.025732698971863224, 'p_miss': 0.24533577870874623}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 11:29:03,946] Trial 111 finished with value: 0.1152213525608943 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 2873, 'weights': 'distance'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 11:38:29,393] Trial 90 finished with value: 0.1307806711006899 and parameters: {'model_name': 'VAE', 'batch_size': 59, 'iterations': 9833, 'learning_rate': 0.025579173976245456, 'p_miss': 0.011962482733611501}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 11:49:55,782] Trial 94 finished with value: 0.12409109565562026 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'mean', 'n_nearest_features': 6, 'imputation_order': 'descending'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 11:49:56,029] Trial 114 finished with value: 0.11585142239354243 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'mean'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 11:49:56,257] Trial 115 finished with value: 0.10399882552330983 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 11:49:56,524] Trial 116 finished with value: 0.10399882552330983 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 11:49:56,765] Trial 117 finished with value: 0.10399882552330983 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 11:49:57,003] Trial 118 finished with value: 0.10399882552330983 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 11:49:57,247] Trial 119 finished with value: 0.10399882552330983 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 11:49:57,566] Trial 120 finished with value: 0.5140579204383919 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'most_frequent'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 11:49:57,817] Trial 121 finished with value: 0.10399882552330983 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 11:49:58,074] Trial 122 finished with value: 0.10399882552330983 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 11:49:58,338] Trial 123 finished with value: 0.10399882552330983 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 11:49:58,603] Trial 124 finished with value: 0.10399882552330983 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 11:49:58,808] Trial 125 finished with value: 0.5140579204383919 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'constant'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 11:49:59,028] Trial 126 finished with value: 0.10399882552330983 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 11:49:59,276] Trial 127 finished with value: 0.10399882552330983 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 11:49:59,520] Trial 128 finished with value: 0.10399882552330983 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 11:49:59,748] Trial 129 finished with value: 0.10399882552330983 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 11:49:59,986] Trial 130 finished with value: 0.10399882552330983 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 11:51:13,637] Trial 131 finished with value: 0.11590377815804347 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Bayesian', 'initial_strategy': 'median', 'n_nearest_features': 20, 'imputation_order': 'random', 'sample_posterior': False}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 11:51:16,895] Trial 132 finished with value: 0.11564530657008806 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 5643, 'weights': 'distance'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 11:51:17,115] Trial 133 finished with value: 0.11585142239354243 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'mean'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 11:51:44,813] Trial 134 finished with value: 0.17305205258729334 and parameters: {'model_name': 'VAE', 'batch_size': 2, 'iterations': 68, 'learning_rate': 0.006091803331422345, 'p_miss': 0.12014554802278776}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 11:51:45,007] Trial 135 finished with value: 0.10399882552330983 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 11:51:45,197] Trial 136 finished with value: 0.10399882552330983 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 11:51:45,392] Trial 137 finished with value: 0.10399882552330983 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 11:51:45,582] Trial 138 finished with value: 0.10399882552330983 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 11:51:45,836] Trial 139 finished with value: 0.10399882552330983 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 11:51:46,130] Trial 140 finished with value: 0.10399882552330983 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 11:51:46,439] Trial 141 finished with value: 0.5140579204383919 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'most_frequent'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 11:51:46,715] Trial 142 finished with value: 0.10399882552330983 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 11:51:46,895] Trial 143 finished with value: 0.5140579204383919 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'constant'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 11:51:47,160] Trial 144 finished with value: 0.10399882552330983 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 11:51:51,125] Trial 145 finished with value: 0.467778417135401 and parameters: {'model_name': 'GAIN', 'batch_size': 422, 'hint_rate': 0.6964117082708658, 'alpha': 74, 'iterations': 11, 'learning_rate': 0.0008132005157336164, 'p_miss': 0.16565040566010703}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 11:51:51,332] Trial 146 finished with value: 0.10399882552330983 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 11:51:51,533] Trial 147 finished with value: 0.10399882552330983 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 11:51:51,794] Trial 148 finished with value: 0.10399882552330983 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 11:51:52,009] Trial 149 finished with value: 0.10399882552330983 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 11:51:52,276] Trial 150 finished with value: 0.10399882552330983 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 11:51:52,521] Trial 151 finished with value: 0.10399882552330983 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 11:51:52,732] Trial 152 finished with value: 0.10399882552330983 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 11:51:52,933] Trial 153 finished with value: 0.10399882552330983 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 12:27:30,362] Trial 32 finished with value: 0.1285865747610387 and parameters: {'model_name': 'VAE', 'batch_size': 539, 'iterations': 4507, 'learning_rate': 0.00010648554534927786, 'p_miss': 0.2995662925426712}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 12:47:53,292] Trial 31 finished with value: 0.1280929534035647 and parameters: {'model_name': 'VAE', 'batch_size': 763, 'iterations': 3521, 'learning_rate': 0.00010649323383326961, 'p_miss': 0.2871636977817893}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 12:47:53,565] Trial 156 finished with value: 0.10399882552330983 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 12:47:53,762] Trial 157 finished with value: 0.10399882552330983 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 12:47:53,978] Trial 158 finished with value: 0.10399882552330983 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 13:17:04,913] Trial 34 finished with value: 0.1284955434843123 and parameters: {'model_name': 'VAE', 'batch_size': 422, 'iterations': 7230, 'learning_rate': 0.00024356218359212613, 'p_miss': 0.2855767175935868}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 13:17:05,152] Trial 160 finished with value: 0.10399882552330983 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 13:17:07,273] Trial 161 finished with value: 0.11499711478592933 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 136, 'weights': 'uniform'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 13:38:11,393] Trial 155 finished with value: 0.12535706758172352 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'mean', 'n_nearest_features': 7, 'imputation_order': 'roman'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 13:38:11,631] Trial 163 finished with value: 0.10399882552330983 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 13:38:11,815] Trial 164 finished with value: 0.10399882552330983 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 13:38:12,000] Trial 165 finished with value: 0.11585142239354243 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'mean'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 13:38:12,274] Trial 166 finished with value: 0.10399882552330983 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 13:38:12,527] Trial 167 finished with value: 0.10399882552330983 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 13:38:12,801] Trial 168 finished with value: 0.10399882552330983 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 13:38:13,067] Trial 169 finished with value: 0.10399882552330983 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 13:38:13,377] Trial 170 finished with value: 0.5140579204383919 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'most_frequent'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 13:38:13,569] Trial 171 finished with value: 0.10399882552330983 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 13:38:13,789] Trial 172 finished with value: 0.10399882552330983 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 13:38:13,994] Trial 173 finished with value: 0.10399882552330983 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 13:38:14,177] Trial 174 finished with value: 0.5140579204383919 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'constant'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 13:38:15,233] Trial 175 finished with value: 0.49408852458193786 and parameters: {'model_name': 'GAIN', 'batch_size': 161, 'hint_rate': 0.29574265919346676, 'alpha': 78, 'iterations': 2, 'learning_rate': 0.005819238781164354, 'p_miss': 0.0429504120840281}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 13:38:15,464] Trial 176 finished with value: 0.10399882552330983 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 13:38:15,647] Trial 177 finished with value: 0.10399882552330983 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 13:38:15,868] Trial 178 finished with value: 0.10399882552330983 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 13:38:16,106] Trial 179 finished with value: 0.10399882552330983 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 13:38:16,292] Trial 180 finished with value: 0.10399882552330983 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 13:38:16,504] Trial 181 finished with value: 0.10399882552330983 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 13:38:16,768] Trial 182 finished with value: 0.10399882552330983 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 13:39:04,824] Trial 183 finished with value: 0.17761987314385888 and parameters: {'model_name': 'VAE', 'batch_size': 2, 'iterations': 132, 'learning_rate': 0.08615909721845723, 'p_miss': 0.10468083391816028}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 13:39:05,060] Trial 184 finished with value: 0.10399882552330983 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 13:39:05,341] Trial 185 finished with value: 0.10399882552330983 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 13:39:05,600] Trial 186 finished with value: 0.10399882552330983 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 13:39:05,823] Trial 187 finished with value: 0.10399882552330983 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 13:39:06,106] Trial 188 finished with value: 0.10399882552330983 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 13:39:06,325] Trial 189 finished with value: 0.10399882552330983 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 13:39:06,498] Trial 190 finished with value: 0.11585142239354243 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'mean'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 13:44:38,450] Trial 54 finished with value: 0.12836707188115876 and parameters: {'model_name': 'VAE', 'batch_size': 464, 'iterations': 7765, 'learning_rate': 0.012116255319556856, 'p_miss': 0.011473866347129436}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 13:44:41,181] Trial 192 finished with value: 0.11518293294212192 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 2771, 'weights': 'distance'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 13:58:33,166] Trial 159 finished with value: 0.1252112333705729 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'mean', 'n_nearest_features': 7, 'imputation_order': 'roman'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 13:58:33,413] Trial 194 finished with value: 0.10399882552330983 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 13:58:33,634] Trial 195 finished with value: 0.10399882552330983 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 13:58:33,870] Trial 196 finished with value: 0.10399882552330983 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 13:58:34,174] Trial 197 finished with value: 0.10399882552330983 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 13:58:34,457] Trial 198 finished with value: 0.10399882552330983 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 6 with value: 0.10399882552330983.
running
[I 2024-11-12 13:58:34,698] Trial 199 finished with value: 0.10399882552330983 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 6 with value: 0.10399882552330983.
[I 2024-11-12 14:11:47,494] Trial 154 finished with value: 0.12412162992020415 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'mean', 'n_nearest_features': 15, 'imputation_order': 'roman'}. Best is trial 6 with value: 0.10399882552330983.
[I 2024-11-12 14:22:40,194] Trial 110 finished with value: 0.12341181694941321 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'mean', 'n_nearest_features': 20, 'imputation_order': 'descending'}. Best is trial 6 with value: 0.10399882552330983.
[I 2024-11-12 14:25:24,737] Trial 112 finished with value: 0.12417534820141785 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'mean', 'n_nearest_features': 19, 'imputation_order': 'descending'}. Best is trial 6 with value: 0.10399882552330983.
[I 2024-11-12 14:27:35,557] Trial 162 finished with value: 0.1250050859876526 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'mean', 'n_nearest_features': 7, 'imputation_order': 'roman'}. Best is trial 6 with value: 0.10399882552330983.
[I 2024-11-12 14:33:58,588] Trial 33 finished with value: 0.12803464852968632 and parameters: {'model_name': 'VAE', 'batch_size': 525, 'iterations': 9666, 'learning_rate': 0.00013062807608887276, 'p_miss': 0.29431588090495175}. Best is trial 6 with value: 0.10399882552330983.
[I 2024-11-12 14:34:51,018] Trial 113 finished with value: 0.123611137222467 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'mean', 'n_nearest_features': 19, 'imputation_order': 'descending'}. Best is trial 6 with value: 0.10399882552330983.
[I 2024-11-12 14:37:37,684] Trial 37 finished with value: 0.12833505674481677 and parameters: {'model_name': 'VAE', 'batch_size': 531, 'iterations': 9784, 'learning_rate': 0.00013191938024094733, 'p_miss': 0.2870121417723938}. Best is trial 6 with value: 0.10399882552330983.
[I 2024-11-12 14:52:05,860] Trial 38 finished with value: 0.12771109538760153 and parameters: {'model_name': 'VAE', 'batch_size': 664, 'iterations': 8806, 'learning_rate': 0.00013435881457692496, 'p_miss': 0.2901766535792074}. Best is trial 6 with value: 0.10399882552330983.
[I 2024-11-12 14:53:42,527] Trial 30 finished with value: 0.12840052706421332 and parameters: {'model_name': 'VAE', 'batch_size': 798, 'iterations': 7208, 'learning_rate': 0.00012633227200870494, 'p_miss': 0.2887872597075765}. Best is trial 6 with value: 0.10399882552330983.
[I 2024-11-12 14:55:34,904] Trial 52 finished with value: 0.12856601479676402 and parameters: {'model_name': 'VAE', 'batch_size': 648, 'iterations': 9375, 'learning_rate': 0.00824901493869604, 'p_miss': 0.2995188841787795}. Best is trial 6 with value: 0.10399882552330983.
[I 2024-11-12 14:59:21,248] Trial 26 finished with value: 0.12791206347324485 and parameters: {'model_name': 'VAE', 'batch_size': 964, 'iterations': 6360, 'learning_rate': 0.08785877227651565, 'p_miss': 0.29065087390676314}. Best is trial 6 with value: 0.10399882552330983.
[I 2024-11-12 15:00:16,073] Trial 36 finished with value: 0.127897669648197 and parameters: {'model_name': 'VAE', 'batch_size': 795, 'iterations': 8804, 'learning_rate': 0.000246980451197395, 'p_miss': 0.29006293018707624}. Best is trial 6 with value: 0.10399882552330983.
[I 2024-11-12 15:01:29,269] Trial 35 finished with value: 0.12803241340526134 and parameters: {'model_name': 'VAE', 'batch_size': 765, 'iterations': 9627, 'learning_rate': 0.00010948193814710312, 'p_miss': 0.2853374674789857}. Best is trial 6 with value: 0.10399882552330983.
[I 2024-11-12 15:50:14,862] Trial 191 finished with value: 0.12416266025636995 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'mean', 'n_nearest_features': 15, 'imputation_order': 'roman'}. Best is trial 6 with value: 0.10399882552330983.
[I 2024-11-12 15:54:53,356] Trial 193 finished with value: 0.12405239541681765 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'mean', 'n_nearest_features': 15, 'imputation_order': 'descending'}. Best is trial 6 with value: 0.10399882552330983.
fit
auto fit
auto transform
0     0
1     0
2     0
3     0
4     0
5     0
6     0
7     0
8     0
9     0
10    0
11    0
12    0
13    0
14    0
15    0
16    0
17    0
18    0
19    0
dtype: int64
0     0
1     0
2     0
3     0
4     0
5     0
6     0
7     0
8     0
9     0
10    0
11    0
12    0
13    0
14    0
15    0
16    0
17    0
18    0
19    0
dtype: int64
0.10399882552330983
{'model_name': 'SimpleImputer', 'strategy': 'median'}
running experiment 2/3 - Does reconstruction give good automl predictions
Start est fit
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
  0%|          | 0/25 [00:00<?, ?it/s]Generation:   0%|          | 0/25 [00:00<?, ?it/s]Generation:  1
Best f1_score score: 0.9697466148482146
Generation:   4%|▍         | 1/25 [01:03<25:21, 63.41s/it]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x1554743a6800> 
 Argument 'metric' has incorrect type (expected str, got numpy.str_) 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 31, in cross_val_score_objective
    this_fold_scores = [sklearn.metrics.get_scorer(scorer)(this_fold_pipeline, X_test, y_test) for scorer in scorers]
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 31, in <listcomp>
    this_fold_scores = [sklearn.metrics.get_scorer(scorer)(this_fold_pipeline, X_test, y_test) for scorer in scorers]
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/metrics/_scorer.py", line 279, in __call__
    return self._score(partial(_cached_call, None), estimator, X, y_true, **_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/metrics/_scorer.py", line 371, in _score
    y_pred = method_caller(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/metrics/_scorer.py", line 89, in _cached_call
    result, _ = _get_response_values(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/_response.py", line 211, in _get_response_values
    y_pred = prediction_method(X)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 601, in predict
    return self.steps[-1][1].predict(Xt, **params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 259, in predict
    probabilities = self.predict_proba(X)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 343, in predict_proba
    probabilities = ArgKminClassMode.compute(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/metrics/_pairwise_distances_reduction/_dispatcher.py", line 584, in compute
    return ArgKminClassMode64.compute(
TypeError: Argument 'metric' has incorrect type (expected str, got numpy.str_)

Generation:  2
Best f1_score score: 0.9697466148482146
Generation:   8%|▊         | 2/25 [01:39<18:13, 47.56s/it]Generation:  3
Best f1_score score: 0.9697466148482146
Generation:  12%|█▏        | 3/25 [02:29<17:45, 48.42s/it]Generation:  4
Best f1_score score: 0.9697466148482146
Generation:  16%|█▌        | 4/25 [03:08<15:39, 44.74s/it]Generation:  5
Best f1_score score: 0.9697466148482146
Generation:  20%|██        | 5/25 [04:14<17:32, 52.61s/it]Generation:  6
Best f1_score score: 0.9697466148482146
Generation:  24%|██▍       | 6/25 [05:23<18:25, 58.16s/it]Generation:  7
Best f1_score score: 0.9697466148482146
Generation:  28%|██▊       | 7/25 [05:48<14:09, 47.17s/it]Generation:  8
Best f1_score score: 0.9697466148482146
Generation:  32%|███▏      | 8/25 [06:15<11:32, 40.71s/it]Generation:  9
Best f1_score score: 0.9697466148482146
Generation:  36%|███▌      | 9/25 [06:57<11:00, 41.28s/it]Generation:  10
Best f1_score score: 0.9697466148482146
Generation:  40%|████      | 10/25 [07:28<09:31, 38.11s/it]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x15546f67ad10> 
 Argument 'metric' has incorrect type (expected str, got numpy.str_) 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 31, in cross_val_score_objective
    this_fold_scores = [sklearn.metrics.get_scorer(scorer)(this_fold_pipeline, X_test, y_test) for scorer in scorers]
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 31, in <listcomp>
    this_fold_scores = [sklearn.metrics.get_scorer(scorer)(this_fold_pipeline, X_test, y_test) for scorer in scorers]
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/metrics/_scorer.py", line 279, in __call__
    return self._score(partial(_cached_call, None), estimator, X, y_true, **_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/metrics/_scorer.py", line 371, in _score
    y_pred = method_caller(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/metrics/_scorer.py", line 89, in _cached_call
    result, _ = _get_response_values(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/_response.py", line 211, in _get_response_values
    y_pred = prediction_method(X)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 601, in predict
    return self.steps[-1][1].predict(Xt, **params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 259, in predict
    probabilities = self.predict_proba(X)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 343, in predict_proba
    probabilities = ArgKminClassMode.compute(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/metrics/_pairwise_distances_reduction/_dispatcher.py", line 584, in compute
    return ArgKminClassMode64.compute(
TypeError: Argument 'metric' has incorrect type (expected str, got numpy.str_)

Generation:  11
Best f1_score score: 0.9697466148482146
Generation:  44%|████▍     | 11/25 [07:58<08:18, 35.59s/it]Generation:  12
Best f1_score score: 0.9697466148482146
Generation:  48%|████▊     | 12/25 [08:46<08:31, 39.35s/it]Generation:  13
Best f1_score score: 0.9697466148482146
Generation:  52%|█████▏    | 13/25 [09:33<08:19, 41.66s/it]Generation:  14
Best f1_score score: 0.9697466148482146
Generation:  56%|█████▌    | 14/25 [10:06<07:09, 39.02s/it]Generation:  15
Best f1_score score: 0.9697466148482146
Generation:  60%|██████    | 15/25 [10:40<06:15, 37.57s/it]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x15546f02a1a0> 
 The 'min_samples_split' parameter of DecisionTreeClassifier must be an int in the range [2, inf) or a float in the range (0.0, 1.0]. Got 1 instead. 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1466, in wrapper
    estimator._validate_params()
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 666, in _validate_params
    validate_parameter_constraints(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/_param_validation.py", line 95, in validate_parameter_constraints
    raise InvalidParameterError(
sklearn.utils._param_validation.InvalidParameterError: The 'min_samples_split' parameter of DecisionTreeClassifier must be an int in the range [2, inf) or a float in the range (0.0, 1.0]. Got 1 instead.

Generation:  16
Best f1_score score: 0.9697466148482146
Generation:  64%|██████▍   | 16/25 [11:28<06:04, 40.47s/it]Generation:  17
Best f1_score score: 0.9697466148482146
Generation:  68%|██████▊   | 17/25 [12:01<05:07, 38.45s/it]Generation:  18
Best f1_score score: 0.9697466148482146
Generation:  72%|███████▏  | 18/25 [14:21<08:02, 68.97s/it]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x15547438b3a0> 
 Argument 'metric' has incorrect type (expected str, got numpy.str_) 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 31, in cross_val_score_objective
    this_fold_scores = [sklearn.metrics.get_scorer(scorer)(this_fold_pipeline, X_test, y_test) for scorer in scorers]
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 31, in <listcomp>
    this_fold_scores = [sklearn.metrics.get_scorer(scorer)(this_fold_pipeline, X_test, y_test) for scorer in scorers]
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/metrics/_scorer.py", line 279, in __call__
    return self._score(partial(_cached_call, None), estimator, X, y_true, **_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/metrics/_scorer.py", line 371, in _score
    y_pred = method_caller(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/metrics/_scorer.py", line 89, in _cached_call
    result, _ = _get_response_values(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/_response.py", line 211, in _get_response_values
    y_pred = prediction_method(X)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 601, in predict
    return self.steps[-1][1].predict(Xt, **params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 259, in predict
    probabilities = self.predict_proba(X)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 343, in predict_proba
    probabilities = ArgKminClassMode.compute(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/metrics/_pairwise_distances_reduction/_dispatcher.py", line 584, in compute
    return ArgKminClassMode64.compute(
TypeError: Argument 'metric' has incorrect type (expected str, got numpy.str_)

Generation:  19
Best f1_score score: 0.9697466148482146
Generation:  76%|███████▌  | 19/25 [15:03<06:04, 60.68s/it]Generation:  20
Best f1_score score: 0.9697466148482146
Generation:  80%|████████  | 20/25 [15:34<04:19, 51.91s/it]Generation:  21
Best f1_score score: 0.9697466148482146
Generation:  84%|████████▍ | 21/25 [17:08<04:18, 64.59s/it]Generation:  22
Best f1_score score: 0.9697466148482146
Generation:  88%|████████▊ | 22/25 [18:26<03:25, 68.64s/it]Generation:  23
Best f1_score score: 0.9697466148482146
Generation:  92%|█████████▏| 23/25 [22:04<03:46, 113.22s/it]Generation:  24
Best f1_score score: 0.9697466148482146
Generation:  96%|█████████▌| 24/25 [22:58<01:35, 95.65s/it] Generation:  25
Best f1_score score: 0.9697466148482146
Generation: 100%|██████████| 25/25 [28:51<00:00, 172.79s/it]Generation: 100%|██████████| 25/25 [28:54<00:00, 69.37s/it] 
2024-11-12 16:23:57,142 - distributed.scheduler - ERROR - Removing worker 'tcp://127.0.0.1:35255' caused the cluster to lose scattered data, which can't be recovered: {'ndarray-bf1cec47a674472c86451d53959b3cd3', 'ndarray-4cb56bbbe4ce60b80e8b59051bc5b8d8'} (stimulus_id='handle-worker-cleanup-1731457437.1424198')
Fitted
Pipeline(steps=[('gaussiannb', GaussianNB())])
score start
train score: {'auroc': 0.9943990012737481, 'accuracy': 0.9697635135135135, 'balanced_accuracy': 0.9696232369820925, 'logloss': 0.0913412594197656, 'f1': 0.9697463513288317}
original test score: {'auroc': 0.997408460581754, 'accuracy': 0.977027027027027, 'balanced_accuracy': 0.9770633237817117, 'logloss': 0.05999281547834224, 'f1': 0.977026355773726}
imputed test score: {'auroc': 0.9956643308111939, 'accuracy': 0.9716216216216216, 'balanced_accuracy': 0.9714912400853984, 'logloss': 0.07607901385048432, 'f1': 0.9716066368116116}
score end
check intended
EXP2 Finished
running experiment 3/3 - What is the best automl settings?
<tpot2.search_spaces.pipelines.sequential.SequentialPipeline object at 0x155434ce84f0>
Start tpot fit
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
  0%|          | 0/25 [00:00<?, ?it/s]Generation:   0%|          | 0/25 [00:00<?, ?it/s]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x1554745508b0> 
 Negative values in data passed to MultinomialNB (input X) 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/naive_bayes.py", line 759, in fit
    self._count(X, Y)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/naive_bayes.py", line 881, in _count
    check_non_negative(X, "MultinomialNB (input X)")
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1689, in check_non_negative
    raise ValueError("Negative values in data passed to %s" % whom)
ValueError: Negative values in data passed to MultinomialNB (input X)

Generation:  1
Best f1_score score: 0.949633148319543
Generation:   4%|▍         | 1/25 [01:13<29:26, 73.61s/it]Generation:  2
Best f1_score score: 0.9692393601192049
Generation:   8%|▊         | 2/25 [02:53<34:12, 89.25s/it]WARNING AN INDIVIDUAL TIMED OUT: 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x1554745523b0> 

Generation:  3
Best f1_score score: 0.9697466468852147
Generation:  12%|█▏        | 3/25 [12:56<1:58:44, 323.86s/it]Generation:  4
Best f1_score score: 0.9704218364454158
Generation:  16%|█▌        | 4/25 [13:31<1:13:21, 209.61s/it]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155474553700> 
 Input X contains NaN.
ExtraTreesClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 377, in fit
    estimator._compute_missing_values_in_feature_mask(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/tree/_classes.py", line 214, in _compute_missing_values_in_feature_mask
    assert_all_finite(X, **common_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 213, in assert_all_finite
    _assert_all_finite(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 123, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 172, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
ExtraTreesClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Generation:  5
Best f1_score score: 0.9704218364454158
Generation:  20%|██        | 5/25 [13:52<47:16, 141.82s/it]  WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155474552290> 
 Input X contains NaN.
GaussianNB does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/naive_bayes.py", line 263, in fit
    return self._partial_fit(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/naive_bayes.py", line 423, in _partial_fit
    X, y = self._validate_data(X, y, reset=first_call)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 650, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1301, in check_X_y
    X = check_array(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1064, in check_array
    _assert_all_finite(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 123, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 172, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
GaussianNB does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

WARNING AN INDIVIDUAL TIMED OUT: 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x1554745f1360> 

Generation:  6
Best f1_score score: 0.9704218364454158
Generation:  24%|██▍       | 6/25 [23:58<1:34:49, 299.46s/it]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155459dc29e0> 
 Input X contains NaN.
GaussianNB does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/naive_bayes.py", line 263, in fit
    return self._partial_fit(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/naive_bayes.py", line 423, in _partial_fit
    X, y = self._validate_data(X, y, reset=first_call)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 650, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1301, in check_X_y
    X = check_array(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1064, in check_array
    _assert_all_finite(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 123, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 172, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
GaussianNB does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

WARNING AN INDIVIDUAL TIMED OUT: 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155465b6fa90> 

Generation:  7
Best f1_score score: 0.9705904851324846
Generation:  28%|██▊       | 7/25 [34:04<1:59:52, 399.56s/it]WARNING AN INDIVIDUAL TIMED OUT: 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x1554597f2680> 

WARNING AN INDIVIDUAL TIMED OUT: 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x1554746152d0> 

Generation:  8
Best f1_score score: 0.9705904851324846
Generation:  32%|███▏      | 8/25 [44:10<2:11:51, 465.36s/it]WARNING AN INDIVIDUAL TIMED OUT: 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x15547424bcd0> 

Generation:  9
Best f1_score score: 0.9705904851324846
Generation:  36%|███▌      | 9/25 [54:16<2:15:49, 509.32s/it]WARNING AN INDIVIDUAL TIMED OUT: 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x15545b39d7b0> 

WARNING AN INDIVIDUAL TIMED OUT: 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155474cfbc40> 

WARNING AN INDIVIDUAL TIMED OUT: 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x15547410f2e0> 

WARNING AN INDIVIDUAL TIMED OUT: 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x1554653b8c70> 

WARNING AN INDIVIDUAL TIMED OUT: 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155465d64700> 

WARNING AN INDIVIDUAL TIMED OUT: 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155465aa6a40> 

Generation:  10
Best f1_score score: 0.9705904851324846
Generation:  40%|████      | 10/25 [1:04:23<2:14:51, 539.43s/it]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x1554659005e0> 
 Input X contains NaN.
GaussianNB does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/naive_bayes.py", line 263, in fit
    return self._partial_fit(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/naive_bayes.py", line 423, in _partial_fit
    X, y = self._validate_data(X, y, reset=first_call)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 650, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1301, in check_X_y
    X = check_array(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1064, in check_array
    _assert_all_finite(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 123, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 172, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
GaussianNB does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Generation:  11
Best f1_score score: 0.9705904851324846
Generation:  44%|████▍     | 11/25 [1:05:05<1:30:21, 387.26s/it]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155467d38880> 
 Input X contains NaN.
GaussianNB does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/naive_bayes.py", line 263, in fit
    return self._partial_fit(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/naive_bayes.py", line 423, in _partial_fit
    X, y = self._validate_data(X, y, reset=first_call)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 650, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1301, in check_X_y
    X = check_array(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1064, in check_array
    _assert_all_finite(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 123, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 172, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
GaussianNB does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

WARNING AN INDIVIDUAL TIMED OUT: 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155465625540> 

WARNING AN INDIVIDUAL TIMED OUT: 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x15545bfe3a90> 

WARNING AN INDIVIDUAL TIMED OUT: 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x15546581acb0> 

WARNING AN INDIVIDUAL TIMED OUT: 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x1554745f43a0> 

Generation:  12
Best f1_score score: 0.970761206215372
Generation:  48%|████▊     | 12/25 [1:15:13<1:38:27, 454.40s/it]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x1554598d6500> 
 Input X contains NaN.
GaussianNB does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/naive_bayes.py", line 263, in fit
    return self._partial_fit(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/naive_bayes.py", line 423, in _partial_fit
    X, y = self._validate_data(X, y, reset=first_call)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 650, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1301, in check_X_y
    X = check_array(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1064, in check_array
    _assert_all_finite(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 123, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 172, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
GaussianNB does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

WARNING AN INDIVIDUAL TIMED OUT: 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x15544cde6dd0> 

WARNING AN INDIVIDUAL TIMED OUT: 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155465d11ae0> 

Generation:  13
Best f1_score score: 0.9710989470411595
Generation:  52%|█████▏    | 13/25 [1:25:21<1:40:11, 500.92s/it]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155465b6fa60> 
 Input X contains NaN.
GaussianNB does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/naive_bayes.py", line 263, in fit
    return self._partial_fit(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/naive_bayes.py", line 423, in _partial_fit
    X, y = self._validate_data(X, y, reset=first_call)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 650, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1301, in check_X_y
    X = check_array(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1064, in check_array
    _assert_all_finite(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 123, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 172, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
GaussianNB does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Generation:  14
Best f1_score score: 0.9710989470411595
Generation:  56%|█████▌    | 14/25 [1:25:37<1:04:59, 354.53s/it]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155467b2b790> 
 Input X contains NaN.
GaussianNB does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/naive_bayes.py", line 263, in fit
    return self._partial_fit(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/naive_bayes.py", line 423, in _partial_fit
    X, y = self._validate_data(X, y, reset=first_call)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 650, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1301, in check_X_y
    X = check_array(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1064, in check_array
    _assert_all_finite(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 123, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 172, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
GaussianNB does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Generation:  15
Best f1_score score: 0.9710989470411595
Generation:  60%|██████    | 15/25 [1:25:51<41:58, 251.88s/it]  Generation:  16
Best f1_score score: 0.9710989470411595
Generation:  64%|██████▍   | 16/25 [1:26:59<29:27, 196.42s/it]WARNING AN INDIVIDUAL TIMED OUT: 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x15546530ee90> 

WARNING AN INDIVIDUAL TIMED OUT: 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x1554591a7910> 

Generation:  17
Best f1_score score: 0.9710989470411595
Generation:  68%|██████▊   | 17/25 [1:37:05<42:37, 319.68s/it]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x1554658dd690> 
 Input X contains NaN.
GaussianNB does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/naive_bayes.py", line 263, in fit
    return self._partial_fit(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/naive_bayes.py", line 423, in _partial_fit
    X, y = self._validate_data(X, y, reset=first_call)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 650, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1301, in check_X_y
    X = check_array(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1064, in check_array
    _assert_all_finite(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 123, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 172, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
GaussianNB does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Generation:  18
Best f1_score score: 0.9710989470411595
Generation:  72%|███████▏  | 18/25 [1:37:41<27:21, 234.46s/it]WARNING AN INDIVIDUAL TIMED OUT: 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x15545906ca90> 

WARNING AN INDIVIDUAL TIMED OUT: 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x1554654e6a70> 

Generation:  19
Best f1_score score: 0.9710989470411595
Generation:  76%|███████▌  | 19/25 [1:47:49<34:39, 346.56s/it]WARNING AN INDIVIDUAL TIMED OUT: 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x15546577a9b0> 

Generation:  20
Best f1_score score: 0.9710989470411595
Generation:  80%|████████  | 20/25 [1:57:53<35:19, 423.87s/it]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155465e40a30> 
 Input X contains NaN.
GaussianNB does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/naive_bayes.py", line 263, in fit
    return self._partial_fit(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/naive_bayes.py", line 423, in _partial_fit
    X, y = self._validate_data(X, y, reset=first_call)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 650, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1301, in check_X_y
    X = check_array(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1064, in check_array
    _assert_all_finite(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 123, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 172, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
GaussianNB does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

WARNING AN INDIVIDUAL TIMED OUT: 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155434b64040> 

WARNING AN INDIVIDUAL TIMED OUT: 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155465e0e860> 

WARNING AN INDIVIDUAL TIMED OUT: 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155465048100> 

Generation:  21
Best f1_score score: 0.9710989470411595
Generation:  84%|████████▍ | 21/25 [2:08:01<31:56, 479.10s/it]WARNING AN INDIVIDUAL TIMED OUT: 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155476ef8550> 
WARNING AN INDIVIDUAL TIMED OUT: 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x1553fb11f340> 


WARNING AN INDIVIDUAL TIMED OUT: 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155459099d50> 

Generation:  22
Best f1_score score: 0.9710989470411595
Generation:  88%|████████▊ | 22/25 [2:18:09<25:53, 517.88s/it]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155465a62620> 
 The 'min_samples_split' parameter of DecisionTreeClassifier must be an int in the range [2, inf) or a float in the range (0.0, 1.0]. Got 1 instead. 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1466, in wrapper
    estimator._validate_params()
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 666, in _validate_params
    validate_parameter_constraints(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/_param_validation.py", line 95, in validate_parameter_constraints
    raise InvalidParameterError(
sklearn.utils._param_validation.InvalidParameterError: The 'min_samples_split' parameter of DecisionTreeClassifier must be an int in the range [2, inf) or a float in the range (0.0, 1.0]. Got 1 instead.

Generation:  23
Best f1_score score: 0.9710989470411595
Generation:  92%|█████████▏| 23/25 [2:18:23<12:13, 366.82s/it]Generation:  24
Best f1_score score: 0.9710989470411595
Generation:  96%|█████████▌| 24/25 [2:19:14<04:31, 271.92s/it]WARNING AN INDIVIDUAL TIMED OUT: 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155474cf9090> 

WARNING AN INDIVIDUAL TIMED OUT: 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155419a02b30> 

WARNING AN INDIVIDUAL TIMED OUT: 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155465a17d00> 

Generation:  25
Best f1_score score: 0.9710989470411595
Generation: 100%|██████████| 25/25 [2:29:20<00:00, 372.12s/it]Generation: 100%|██████████| 25/25 [2:29:20<00:00, 358.42s/it]
2024-11-12 18:53:28,322 - distributed.scheduler - ERROR - Removing worker 'tcp://127.0.0.1:43643' caused the cluster to lose scattered data, which can't be recovered: {'ndarray-4cb56bbbe4ce60b80e8b59051bc5b8d8', 'DataFrame-88b9dc3b44e1e5afe8e5143700ea73dc'} (stimulus_id='handle-worker-cleanup-1731466408.3223562')
Fitted
Pipeline(steps=[('iterativeimputer',
                 IterativeImputer(estimator=KNeighborsRegressor(),
                                  imputation_order='arabic',
                                  initial_strategy='most_frequent',
                                  n_nearest_features=7)),
                ('gaussiannb', GaussianNB())])
transform worked
try transform
transform worked
score start
train score: {'auroc': 0.9948547837008187, 'accuracy': 0.9706081081081082, 'balanced_accuracy': 0.9704794984087566, 'logloss': 0.08711806864715382, 'f1': 0.970593041472239}
test score: {'auroc': 0.9959875883707636, 'accuracy': 0.9736486486486486, 'balanced_accuracy': 0.9735248406084547, 'logloss': 0.07205476870035073, 'f1': 0.9736355410446482}
original test score: {'auroc': 0.9974468131735674, 'accuracy': 0.9804054054054054, 'balanced_accuracy': 0.9803972597986306, 'logloss': 0.056209945535200645, 'f1': 0.9804033924229799}
score end
1496
lvl
0.1
type
MCAR
num_run
1
class_full
finished
all finished
full run takes
9.921491349405713
hours
DONE
