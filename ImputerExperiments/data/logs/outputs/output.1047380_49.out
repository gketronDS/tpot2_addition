Run: 49
/cm/local/apps/slurm/var/spool/job1047380/slurm_script: line 27: 
pip install -e tpot2
pip install -r tpot2/ImputerExperiments/requirements_.txt
: No such file or directory
RunStart
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
starting loops
../data/c/1496/1496.pkl
working on 
../data/c/1496/class_full_MCAR_0.01_3
4.385849237442017
running experiment 1/3 - Does large hyperparameter space improve reconstruction accuracy over simple
[I 2024-11-13 05:26:29,657] A new study created in memory with name: no-name-87883763-6d2b-4759-b2d9-50fc3416903f
running
running
running
running
running
running
running
running
running
running
running
running
running
running
running
running
[I 2024-11-13 05:26:30,105] Trial 10 finished with value: 0.5356747308804859 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'constant'}. Best is trial 10 with value: 0.5356747308804859.
running
[I 2024-11-13 05:26:30,417] Trial 12 finished with value: 0.10839518403841167 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 12 with value: 0.10839518403841167.
running
[I 2024-11-13 05:26:30,720] Trial 5 finished with value: 0.5356747308804859 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'most_frequent'}. Best is trial 12 with value: 0.10839518403841167.
running
[I 2024-11-13 05:26:35,613] Trial 2 finished with value: 0.10836209307477498 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 820, 'weights': 'uniform'}. Best is trial 2 with value: 0.10836209307477498.
running
[I 2024-11-13 05:26:35,882] Trial 19 finished with value: 0.5356747308804859 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'constant'}. Best is trial 2 with value: 0.10836209307477498.
running
[I 2024-11-13 05:26:36,224] Trial 20 finished with value: 0.5356747308804859 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'constant'}. Best is trial 2 with value: 0.10836209307477498.
running
[I 2024-11-13 05:26:36,808] Trial 6 finished with value: 0.10832551185835704 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 1872, 'weights': 'uniform'}. Best is trial 6 with value: 0.10832551185835704.
running
[I 2024-11-13 05:26:36,977] Trial 9 finished with value: 0.10832045917332875 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 1921, 'weights': 'uniform'}. Best is trial 9 with value: 0.10832045917332875.
running
[I 2024-11-13 05:26:37,472] Trial 8 finished with value: 0.10828697840611134 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 5482, 'weights': 'distance'}. Best is trial 8 with value: 0.10828697840611134.
running
[I 2024-11-13 05:26:38,591] Trial 7 finished with value: 0.10827652474131681 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3926, 'weights': 'distance'}. Best is trial 7 with value: 0.10827652474131681.
running
[I 2024-11-13 05:26:38,984] Trial 13 finished with value: 0.10827247679115903 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3979, 'weights': 'distance'}. Best is trial 13 with value: 0.10827247679115903.
running
[I 2024-11-13 05:27:01,073] Trial 14 finished with value: 0.11537233770266922 and parameters: {'model_name': 'VAE', 'batch_size': 490, 'iterations': 2, 'learning_rate': 0.014864396669034097, 'p_miss': 0.05266748612438647}. Best is trial 13 with value: 0.10827247679115903.
running
[I 2024-11-13 05:27:04,038] Trial 16 finished with value: 0.11830575037302582 and parameters: {'model_name': 'VAE', 'batch_size': 149, 'iterations': 3, 'learning_rate': 0.005317896915998459, 'p_miss': 0.12298650623533107}. Best is trial 13 with value: 0.10827247679115903.
running
[I 2024-11-13 05:27:04,649] Trial 21 finished with value: 0.3108972700758713 and parameters: {'model_name': 'GAIN', 'batch_size': 4, 'hint_rate': 0.13174067564968123, 'alpha': 49, 'iterations': 14, 'learning_rate': 0.006191689373044686, 'p_miss': 0.23663153686663793}. Best is trial 13 with value: 0.10827247679115903.
running
[I 2024-11-13 05:27:15,002] Trial 17 finished with value: 0.11513318929686375 and parameters: {'model_name': 'VAE', 'batch_size': 214, 'iterations': 2, 'learning_rate': 0.007311929406026939, 'p_miss': 0.2927621054411047}. Best is trial 13 with value: 0.10827247679115903.
running
[I 2024-11-13 05:27:20,321] Trial 26 finished with value: 0.31381072968369195 and parameters: {'model_name': 'GAIN', 'batch_size': 12, 'hint_rate': 0.3021975088161329, 'alpha': 75, 'iterations': 22, 'learning_rate': 0.0001879731416665205, 'p_miss': 0.28725510235672114}. Best is trial 13 with value: 0.10827247679115903.
running
[I 2024-11-13 05:27:34,562] Trial 11 finished with value: 0.31616087767800005 and parameters: {'model_name': 'GAIN', 'batch_size': 20, 'hint_rate': 0.4294631983758344, 'alpha': 84, 'iterations': 30, 'learning_rate': 0.011851299310929762, 'p_miss': 0.20193098604670892}. Best is trial 13 with value: 0.10827247679115903.
running
[I 2024-11-13 05:27:38,106] Trial 29 finished with value: 0.12030327734070596 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'most_frequent', 'n_nearest_features': 1, 'imputation_order': 'arabic'}. Best is trial 13 with value: 0.10827247679115903.
running
[I 2024-11-13 05:27:51,246] Trial 33 finished with value: 0.10828699975927261 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 4525, 'weights': 'distance'}. Best is trial 13 with value: 0.10827247679115903.
running
[I 2024-11-13 05:27:55,665] Trial 0 finished with value: 0.11676948645434607 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'mean', 'n_nearest_features': 14, 'imputation_order': 'random'}. Best is trial 13 with value: 0.10827247679115903.
running
[I 2024-11-13 05:28:01,742] Trial 31 finished with value: 0.10854053468655851 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Ridge', 'initial_strategy': 'mean', 'n_nearest_features': 6, 'imputation_order': 'ascending'}. Best is trial 13 with value: 0.10827247679115903.
running
[I 2024-11-13 05:28:08,117] Trial 15 finished with value: 0.16194786926087545 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Bayesian', 'initial_strategy': 'most_frequent', 'n_nearest_features': 19, 'imputation_order': 'ascending', 'sample_posterior': True}. Best is trial 13 with value: 0.10827247679115903.
running
[I 2024-11-13 05:28:09,997] Trial 35 finished with value: 0.10827031282055229 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3832, 'weights': 'distance'}. Best is trial 35 with value: 0.10827031282055229.
running
[I 2024-11-13 05:28:14,311] Trial 36 finished with value: 0.10828697840611134 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 5054, 'weights': 'distance'}. Best is trial 35 with value: 0.10827031282055229.
running
[I 2024-11-13 05:28:19,889] Trial 37 finished with value: 0.10828697840611134 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 5183, 'weights': 'distance'}. Best is trial 35 with value: 0.10827031282055229.
running
[I 2024-11-13 05:28:22,387] Trial 38 finished with value: 0.10826750987573475 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3787, 'weights': 'distance'}. Best is trial 38 with value: 0.10826750987573475.
running
[I 2024-11-13 05:28:26,919] Trial 39 finished with value: 0.10827628599624668 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3583, 'weights': 'distance'}. Best is trial 38 with value: 0.10826750987573475.
running
[I 2024-11-13 05:28:29,120] Trial 34 finished with value: 0.10843340281259004 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Bayesian', 'initial_strategy': 'constant', 'n_nearest_features': 20, 'imputation_order': 'random', 'sample_posterior': False}. Best is trial 38 with value: 0.10826750987573475.
running
[I 2024-11-13 05:28:32,627] Trial 40 finished with value: 0.1082815740490665 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3410, 'weights': 'distance'}. Best is trial 38 with value: 0.10826750987573475.
running
[I 2024-11-13 05:28:34,468] Trial 41 finished with value: 0.10827757494726228 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3467, 'weights': 'distance'}. Best is trial 38 with value: 0.10826750987573475.
running
[I 2024-11-13 05:28:38,897] Trial 42 finished with value: 0.10829936372027657 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3026, 'weights': 'distance'}. Best is trial 38 with value: 0.10826750987573475.
running
[I 2024-11-13 05:28:39,320] Trial 3 finished with value: 0.11731393239973056 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'most_frequent', 'n_nearest_features': 16, 'imputation_order': 'roman'}. Best is trial 38 with value: 0.10826750987573475.
running
[I 2024-11-13 05:28:39,953] Trial 43 finished with value: 0.10830191750411097 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 2962, 'weights': 'distance'}. Best is trial 38 with value: 0.10826750987573475.
running
[I 2024-11-13 05:28:42,836] Trial 22 finished with value: 0.11714633087352291 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'constant', 'n_nearest_features': 18, 'imputation_order': 'ascending'}. Best is trial 38 with value: 0.10826750987573475.
running
[I 2024-11-13 05:28:43,788] Trial 30 finished with value: 0.16237135957773133 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Bayesian', 'initial_strategy': 'median', 'n_nearest_features': 16, 'imputation_order': 'ascending', 'sample_posterior': True}. Best is trial 38 with value: 0.10826750987573475.
running
[I 2024-11-13 05:28:44,546] Trial 45 finished with value: 0.10830538362847082 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 2335, 'weights': 'distance'}. Best is trial 38 with value: 0.10826750987573475.
running
[I 2024-11-13 05:28:45,243] Trial 44 finished with value: 0.10827736486214179 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 4173, 'weights': 'distance'}. Best is trial 38 with value: 0.10826750987573475.
running
[I 2024-11-13 05:28:50,240] Trial 32 finished with value: 0.10851079701773185 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Bayesian', 'initial_strategy': 'constant', 'n_nearest_features': 11, 'imputation_order': 'descending', 'sample_posterior': False}. Best is trial 38 with value: 0.10826750987573475.
running
[I 2024-11-13 05:28:51,053] Trial 46 finished with value: 0.10827650685764294 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 4108, 'weights': 'distance'}. Best is trial 38 with value: 0.10826750987573475.
running
[I 2024-11-13 05:28:51,502] Trial 47 finished with value: 0.1082847107253329 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 4246, 'weights': 'distance'}. Best is trial 38 with value: 0.10826750987573475.
running
[I 2024-11-13 05:28:51,815] Trial 48 finished with value: 0.10827434924926756 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 4002, 'weights': 'distance'}. Best is trial 38 with value: 0.10826750987573475.
running
[I 2024-11-13 05:28:54,665] Trial 49 finished with value: 0.10828348978999949 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 4230, 'weights': 'distance'}. Best is trial 38 with value: 0.10826750987573475.
running
[I 2024-11-13 05:28:55,230] Trial 50 finished with value: 0.10827765800355102 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 4155, 'weights': 'distance'}. Best is trial 38 with value: 0.10826750987573475.
running
[I 2024-11-13 05:28:55,664] Trial 51 finished with value: 0.1082854631146071 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 4259, 'weights': 'distance'}. Best is trial 38 with value: 0.10826750987573475.
running
[I 2024-11-13 05:28:56,101] Trial 52 finished with value: 0.10828585589513177 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 4253, 'weights': 'distance'}. Best is trial 38 with value: 0.10826750987573475.
running
[I 2024-11-13 05:29:00,470] Trial 54 finished with value: 0.10828697840611134 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 4571, 'weights': 'distance'}. Best is trial 38 with value: 0.10826750987573475.
running
[I 2024-11-13 05:29:01,374] Trial 53 finished with value: 0.10828816759445059 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 4333, 'weights': 'distance'}. Best is trial 38 with value: 0.10826750987573475.
running
[I 2024-11-13 05:29:02,099] Trial 55 finished with value: 0.1082739772586329 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3519, 'weights': 'distance'}. Best is trial 38 with value: 0.10826750987573475.
running
[I 2024-11-13 05:29:02,258] Trial 56 finished with value: 0.10827280991057213 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3630, 'weights': 'distance'}. Best is trial 38 with value: 0.10826750987573475.
running
[I 2024-11-13 05:29:05,652] Trial 58 finished with value: 0.1082786385294681 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3458, 'weights': 'distance'}. Best is trial 38 with value: 0.10826750987573475.
running
[I 2024-11-13 05:29:06,067] Trial 57 finished with value: 0.10827647446395483 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3557, 'weights': 'distance'}. Best is trial 38 with value: 0.10826750987573475.
running
[I 2024-11-13 05:29:06,407] Trial 59 finished with value: 0.10828033379789379 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3449, 'weights': 'distance'}. Best is trial 38 with value: 0.10826750987573475.
running
[I 2024-11-13 05:29:06,742] Trial 60 finished with value: 0.10827338334115735 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3529, 'weights': 'distance'}. Best is trial 38 with value: 0.10826750987573475.
running
[I 2024-11-13 05:34:31,191] Trial 4 finished with value: 0.35878374461068474 and parameters: {'model_name': 'GAIN', 'batch_size': 434, 'hint_rate': 0.2277824994421253, 'alpha': 96, 'iterations': 258, 'learning_rate': 0.06846301864430909, 'p_miss': 0.2971514737627967}. Best is trial 38 with value: 0.10826750987573475.
running
[I 2024-11-13 05:37:29,508] Trial 25 finished with value: 0.3127810817212012 and parameters: {'model_name': 'GAIN', 'batch_size': 3, 'hint_rate': 0.908283399032821, 'alpha': 47, 'iterations': 559, 'learning_rate': 0.001318941673965417, 'p_miss': 0.22668652161194708}. Best is trial 38 with value: 0.10826750987573475.
running
[I 2024-11-13 05:40:14,851] Trial 18 finished with value: 0.32144400675507967 and parameters: {'model_name': 'GAIN', 'batch_size': 17, 'hint_rate': 0.7710805138992439, 'alpha': 54, 'iterations': 629, 'learning_rate': 0.0006720945653540411, 'p_miss': 0.18253945792194534}. Best is trial 38 with value: 0.10826750987573475.
running
[I 2024-11-13 05:53:48,568] Trial 64 finished with value: inf and parameters: {'model_name': 'GAIN', 'batch_size': 1, 'hint_rate': 0.8860346552721929, 'alpha': 0, 'iterations': 6375, 'learning_rate': 0.00042228398457719036, 'p_miss': 0.024638362003514325}. Best is trial 38 with value: 0.10826750987573475.
running
[I 2024-11-13 05:55:39,323] Trial 67 finished with value: inf and parameters: {'model_name': 'GAIN', 'batch_size': 1, 'hint_rate': 0.9707427084616891, 'alpha': 3, 'iterations': 6726, 'learning_rate': 0.08329841962975892, 'p_miss': 0.013092342913801264}. Best is trial 38 with value: 0.10826750987573475.
running
[I 2024-11-13 06:00:28,231] Trial 73 finished with value: 0.1283059306783883 and parameters: {'model_name': 'VAE', 'batch_size': 69, 'iterations': 108, 'learning_rate': 0.00011604156785678112, 'p_miss': 0.11422110662161844}. Best is trial 38 with value: 0.10826750987573475.
running
[I 2024-11-13 06:00:28,614] Trial 74 finished with value: 0.10845710744553105 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'mean'}. Best is trial 38 with value: 0.10826750987573475.
running
[I 2024-11-13 06:58:08,003] Trial 1 finished with value: 0.11539169746917648 and parameters: {'model_name': 'VAE', 'batch_size': 46, 'iterations': 2338, 'learning_rate': 0.00015110039838762312, 'p_miss': 0.2580382707383763}. Best is trial 38 with value: 0.10826750987573475.
running
[I 2024-11-13 06:58:18,092] Trial 76 finished with value: 0.10838649990471463 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3821, 'weights': 'uniform'}. Best is trial 38 with value: 0.10826750987573475.
running
[I 2024-11-13 06:58:31,388] Trial 77 finished with value: 0.10829598645143002 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3089, 'weights': 'distance'}. Best is trial 38 with value: 0.10826750987573475.
running
[I 2024-11-13 06:58:35,200] Trial 78 finished with value: 0.1355609466468399 and parameters: {'model_name': 'VAE', 'batch_size': 3, 'iterations': 1, 'learning_rate': 0.032564788993908, 'p_miss': 0.09593843883726041}. Best is trial 38 with value: 0.10826750987573475.
running
[I 2024-11-13 06:58:43,832] Trial 79 finished with value: 0.10839038154606466 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3863, 'weights': 'uniform'}. Best is trial 38 with value: 0.10826750987573475.
running
[I 2024-11-13 06:58:55,310] Trial 80 finished with value: 0.10830575448544813 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 2427, 'weights': 'distance'}. Best is trial 38 with value: 0.10826750987573475.
running
[I 2024-11-13 06:59:08,133] Trial 81 finished with value: 0.10828697840611134 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 4822, 'weights': 'distance'}. Best is trial 38 with value: 0.10826750987573475.
running
[I 2024-11-13 06:59:08,874] Trial 82 finished with value: 0.10839518403841167 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 38 with value: 0.10826750987573475.
running
[I 2024-11-13 06:59:19,245] Trial 83 finished with value: 0.1083859926469889 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3831, 'weights': 'uniform'}. Best is trial 38 with value: 0.10826750987573475.
running
[I 2024-11-13 06:59:26,546] Trial 84 finished with value: 0.10837914214056688 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 125, 'weights': 'distance'}. Best is trial 38 with value: 0.10826750987573475.
running
[I 2024-11-13 06:59:42,454] Trial 85 finished with value: 0.12800416560026423 and parameters: {'model_name': 'VAE', 'batch_size': 7, 'iterations': 6, 'learning_rate': 0.0028071476299549323, 'p_miss': 0.06795071081053497}. Best is trial 38 with value: 0.10826750987573475.
running
[I 2024-11-13 06:59:57,472] Trial 86 finished with value: 0.10827015155719547 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3681, 'weights': 'distance'}. Best is trial 38 with value: 0.10826750987573475.
running
[I 2024-11-13 07:00:09,858] Trial 87 finished with value: 0.10828664900970146 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3189, 'weights': 'distance'}. Best is trial 38 with value: 0.10826750987573475.
running
[I 2024-11-13 07:00:21,977] Trial 88 finished with value: 0.10827216402254432 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3718, 'weights': 'distance'}. Best is trial 38 with value: 0.10826750987573475.
running
[I 2024-11-13 07:00:34,164] Trial 89 finished with value: 0.1083093710060005 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 2630, 'weights': 'distance'}. Best is trial 38 with value: 0.10826750987573475.
running
[I 2024-11-13 07:00:47,273] Trial 90 finished with value: 0.10827235935819901 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3727, 'weights': 'distance'}. Best is trial 38 with value: 0.10826750987573475.
running
[I 2024-11-13 07:01:01,416] Trial 91 finished with value: 0.10826700280437802 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3786, 'weights': 'distance'}. Best is trial 91 with value: 0.10826700280437802.
running
[I 2024-11-13 07:01:15,264] Trial 92 finished with value: 0.10826966359721343 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3804, 'weights': 'distance'}. Best is trial 91 with value: 0.10826700280437802.
running
[I 2024-11-13 07:01:27,327] Trial 93 finished with value: 0.10828697840611134 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 4613, 'weights': 'distance'}. Best is trial 91 with value: 0.10826700280437802.
running
[I 2024-11-13 07:01:28,803] Trial 94 finished with value: 0.5356747308804859 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'most_frequent'}. Best is trial 91 with value: 0.10826700280437802.
running
[I 2024-11-13 07:01:38,914] Trial 95 finished with value: 0.10838930808010361 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3842, 'weights': 'uniform'}. Best is trial 91 with value: 0.10826700280437802.
running
[I 2024-11-13 07:01:52,650] Trial 96 finished with value: 0.10826915234813164 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3692, 'weights': 'distance'}. Best is trial 91 with value: 0.10826700280437802.
running
[I 2024-11-13 07:02:03,913] Trial 97 finished with value: 0.10828655638978316 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3266, 'weights': 'distance'}. Best is trial 91 with value: 0.10826700280437802.
running
[I 2024-11-13 07:02:17,694] Trial 98 finished with value: 0.10827050768459423 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3839, 'weights': 'distance'}. Best is trial 91 with value: 0.10826700280437802.
running
[I 2024-11-13 07:02:31,928] Trial 99 finished with value: 0.10827057180539228 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3808, 'weights': 'distance'}. Best is trial 91 with value: 0.10826700280437802.
running
[I 2024-11-13 07:02:44,399] Trial 100 finished with value: 0.1083071169524494 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 2782, 'weights': 'distance'}. Best is trial 91 with value: 0.10826700280437802.
running
[I 2024-11-13 07:02:57,690] Trial 101 finished with value: 0.1082859444168652 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3222, 'weights': 'distance'}. Best is trial 91 with value: 0.10826700280437802.
running
[I 2024-11-13 07:03:12,219] Trial 102 finished with value: 0.10827136386274756 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3847, 'weights': 'distance'}. Best is trial 91 with value: 0.10826700280437802.
running
[I 2024-11-13 07:10:03,369] Trial 75 finished with value: 0.11369131383857786 and parameters: {'model_name': 'VAE', 'batch_size': 65, 'iterations': 1668, 'learning_rate': 0.028822431743445925, 'p_miss': 0.1041914295408542}. Best is trial 91 with value: 0.10826700280437802.
running
[I 2024-11-13 07:10:20,700] Trial 61 finished with value: 0.16457554763955037 and parameters: {'model_name': 'VAE', 'batch_size': 1, 'iterations': 2502, 'learning_rate': 0.09552502874256075, 'p_miss': 0.03433058787235255}. Best is trial 91 with value: 0.10826700280437802.
running
[I 2024-11-13 07:21:38,802] Trial 70 finished with value: 0.1601109908247254 and parameters: {'model_name': 'VAE', 'batch_size': 1, 'iterations': 3075, 'learning_rate': 0.00015650683070310526, 'p_miss': 0.010025920963863788}. Best is trial 91 with value: 0.10826700280437802.
running
[I 2024-11-13 07:21:51,294] Trial 106 finished with value: 0.10827410390232009 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 4003, 'weights': 'distance'}. Best is trial 91 with value: 0.10826700280437802.
running
[I 2024-11-13 07:21:53,175] Trial 72 finished with value: 0.11397947151005305 and parameters: {'model_name': 'VAE', 'batch_size': 70, 'iterations': 2168, 'learning_rate': 0.07293823137652908, 'p_miss': 0.11149324726226836}. Best is trial 91 with value: 0.10826700280437802.
running
[I 2024-11-13 07:22:01,931] Trial 107 finished with value: 0.10827188801542069 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3723, 'weights': 'distance'}. Best is trial 91 with value: 0.10826700280437802.
running
[I 2024-11-13 07:22:04,211] Trial 108 finished with value: 0.10827089935065275 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3730, 'weights': 'distance'}. Best is trial 91 with value: 0.10826700280437802.
running
[I 2024-11-13 07:22:13,225] Trial 109 finished with value: 0.10828697840611134 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 5743, 'weights': 'distance'}. Best is trial 91 with value: 0.10826700280437802.
running
[I 2024-11-13 07:22:17,250] Trial 110 finished with value: 0.10827199998770701 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3978, 'weights': 'distance'}. Best is trial 91 with value: 0.10826700280437802.
running
[I 2024-11-13 07:22:28,346] Trial 112 finished with value: 0.10828559704517522 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 4390, 'weights': 'distance'}. Best is trial 91 with value: 0.10826700280437802.
running
[I 2024-11-13 07:23:39,935] Trial 28 finished with value: 0.11039014006288114 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'mean', 'n_nearest_features': 8, 'imputation_order': 'ascending'}. Best is trial 91 with value: 0.10826700280437802.
running
[I 2024-11-13 07:42:51,188] Trial 23 finished with value: 0.11006131835897819 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'median', 'n_nearest_features': 10, 'imputation_order': 'random'}. Best is trial 91 with value: 0.10826700280437802.
running
[I 2024-11-13 07:43:04,175] Trial 115 finished with value: 0.10828750465651496 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3285, 'weights': 'distance'}. Best is trial 91 with value: 0.10826700280437802.
running
[I 2024-11-13 07:43:18,145] Trial 116 finished with value: 0.10827496136451056 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3993, 'weights': 'distance'}. Best is trial 91 with value: 0.10826700280437802.
running
[I 2024-11-13 07:43:31,000] Trial 117 finished with value: 0.10826939479385209 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3694, 'weights': 'distance'}. Best is trial 91 with value: 0.10826700280437802.
running
[I 2024-11-13 07:43:42,897] Trial 118 finished with value: 0.10826918664303539 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3686, 'weights': 'distance'}. Best is trial 91 with value: 0.10826700280437802.
running
[I 2024-11-13 07:43:56,981] Trial 119 finished with value: 0.10828705282099853 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3329, 'weights': 'distance'}. Best is trial 91 with value: 0.10826700280437802.
running
[I 2024-11-13 07:45:16,685] Trial 120 finished with value: 0.33570324863191614 and parameters: {'model_name': 'GAIN', 'batch_size': 173, 'hint_rate': 0.646022846703105, 'alpha': 29, 'iterations': 60, 'learning_rate': 0.002205213640631056, 'p_miss': 0.15806733708091725}. Best is trial 91 with value: 0.10826700280437802.
running
[I 2024-11-13 07:45:29,742] Trial 121 finished with value: 0.10827387760251642 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 4077, 'weights': 'distance'}. Best is trial 91 with value: 0.10826700280437802.
running
[I 2024-11-13 07:45:42,484] Trial 122 finished with value: 0.10826950218509508 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3674, 'weights': 'distance'}. Best is trial 91 with value: 0.10826700280437802.
running
[I 2024-11-13 07:45:54,643] Trial 123 finished with value: 0.10827515941189855 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3589, 'weights': 'distance'}. Best is trial 91 with value: 0.10826700280437802.
running
[I 2024-11-13 07:46:07,884] Trial 124 finished with value: 0.10828623020967025 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 4441, 'weights': 'distance'}. Best is trial 91 with value: 0.10826700280437802.
running
[I 2024-11-13 07:46:20,197] Trial 125 finished with value: 0.10830032771118929 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 2863, 'weights': 'distance'}. Best is trial 91 with value: 0.10826700280437802.
running
[I 2024-11-13 07:46:32,911] Trial 126 finished with value: 0.10827092918651049 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3655, 'weights': 'distance'}. Best is trial 91 with value: 0.10826700280437802.
running
[I 2024-11-13 07:46:45,920] Trial 127 finished with value: 0.10828187358236989 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3412, 'weights': 'distance'}. Best is trial 91 with value: 0.10826700280437802.
running
[I 2024-11-13 07:46:58,593] Trial 128 finished with value: 0.10827707310977841 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 4109, 'weights': 'distance'}. Best is trial 91 with value: 0.10826700280437802.
running
[I 2024-11-13 07:47:16,271] Trial 129 finished with value: 0.108402100042019 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Ridge', 'initial_strategy': 'median', 'n_nearest_features': 1, 'imputation_order': 'roman'}. Best is trial 91 with value: 0.10826700280437802.
running
[I 2024-11-13 07:47:28,307] Trial 130 finished with value: 0.10827094108388505 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3659, 'weights': 'distance'}. Best is trial 91 with value: 0.10826700280437802.
running
[I 2024-11-13 07:47:40,428] Trial 131 finished with value: 0.10827656148274804 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3913, 'weights': 'distance'}. Best is trial 91 with value: 0.10826700280437802.
running
[I 2024-11-13 07:47:40,859] Trial 132 finished with value: 0.10845710744553105 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'mean'}. Best is trial 91 with value: 0.10826700280437802.
running
[I 2024-11-13 07:47:53,076] Trial 133 finished with value: 0.10827399836830039 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3487, 'weights': 'distance'}. Best is trial 91 with value: 0.10826700280437802.
running
[I 2024-11-13 07:48:05,585] Trial 134 finished with value: 0.10828084591619969 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 4205, 'weights': 'distance'}. Best is trial 91 with value: 0.10826700280437802.
running
[I 2024-11-13 07:48:14,477] Trial 135 finished with value: 0.10837912737099005 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3768, 'weights': 'uniform'}. Best is trial 91 with value: 0.10826700280437802.
running
[I 2024-11-13 07:48:26,425] Trial 136 finished with value: 0.10827154993314017 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3643, 'weights': 'distance'}. Best is trial 91 with value: 0.10826700280437802.
running
[I 2024-11-13 07:48:39,076] Trial 137 finished with value: 0.10827506268245801 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3614, 'weights': 'distance'}. Best is trial 91 with value: 0.10826700280437802.
running
[I 2024-11-13 07:48:47,999] Trial 138 finished with value: 0.10834967388475732 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 1508, 'weights': 'distance'}. Best is trial 91 with value: 0.10826700280437802.
running
[I 2024-11-13 07:49:01,566] Trial 139 finished with value: 0.10827259410972778 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3970, 'weights': 'distance'}. Best is trial 91 with value: 0.10826700280437802.
running
[I 2024-11-13 07:49:15,204] Trial 140 finished with value: 0.10828283191358261 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3398, 'weights': 'distance'}. Best is trial 91 with value: 0.10826700280437802.
running
[I 2024-11-13 07:49:37,580] Trial 141 finished with value: 0.3272565887940282 and parameters: {'model_name': 'GAIN', 'batch_size': 995, 'hint_rate': 0.021771636986519127, 'alpha': 23, 'iterations': 7, 'learning_rate': 0.000416425881467642, 'p_miss': 0.13850305586132072}. Best is trial 91 with value: 0.10826700280437802.
running
[I 2024-11-13 07:49:50,979] Trial 142 finished with value: 0.1082685960673853 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3790, 'weights': 'distance'}. Best is trial 91 with value: 0.10826700280437802.
running
[I 2024-11-13 07:50:03,229] Trial 143 finished with value: 0.10827130100145448 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3817, 'weights': 'distance'}. Best is trial 91 with value: 0.10826700280437802.
running
[I 2024-11-13 07:50:29,624] Trial 144 finished with value: 0.10854270950674882 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Ridge', 'initial_strategy': 'constant', 'n_nearest_features': 4, 'imputation_order': 'descending'}. Best is trial 91 with value: 0.10826700280437802.
running
[I 2024-11-13 07:50:41,018] Trial 145 finished with value: 0.10829654093873275 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3076, 'weights': 'distance'}. Best is trial 91 with value: 0.10826700280437802.
running
[I 2024-11-13 07:50:53,811] Trial 146 finished with value: 0.10826929845663202 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3691, 'weights': 'distance'}. Best is trial 91 with value: 0.10826700280437802.
running
[I 2024-11-13 07:51:07,051] Trial 147 finished with value: 0.10827707310977841 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 4109, 'weights': 'distance'}. Best is trial 91 with value: 0.10826700280437802.
running
[I 2024-11-13 07:51:19,891] Trial 148 finished with value: 0.10827652474131681 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3926, 'weights': 'distance'}. Best is trial 91 with value: 0.10826700280437802.
running
[I 2024-11-13 07:51:30,757] Trial 149 finished with value: 0.10827397401823358 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3492, 'weights': 'distance'}. Best is trial 91 with value: 0.10826700280437802.
running
[I 2024-11-13 07:51:44,134] Trial 150 finished with value: 0.10827212648334088 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3719, 'weights': 'distance'}. Best is trial 91 with value: 0.10826700280437802.
running
[I 2024-11-13 07:52:00,107] Trial 151 finished with value: 0.1082852808607683 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 4275, 'weights': 'distance'}. Best is trial 91 with value: 0.10826700280437802.
running
[I 2024-11-13 07:52:11,817] Trial 152 finished with value: 0.1082689866705661 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3771, 'weights': 'distance'}. Best is trial 91 with value: 0.10826700280437802.
running
[I 2024-11-13 07:52:24,175] Trial 153 finished with value: 0.10827332370616313 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3877, 'weights': 'distance'}. Best is trial 91 with value: 0.10826700280437802.
running
[I 2024-11-13 07:52:34,506] Trial 154 finished with value: 0.10837627146519695 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3556, 'weights': 'uniform'}. Best is trial 91 with value: 0.10826700280437802.
running
[I 2024-11-13 07:52:48,063] Trial 155 finished with value: 0.10827359587615029 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 4075, 'weights': 'distance'}. Best is trial 91 with value: 0.10826700280437802.
running
[I 2024-11-13 07:53:01,125] Trial 156 finished with value: 0.10826762556116058 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3784, 'weights': 'distance'}. Best is trial 91 with value: 0.10826700280437802.
running
[I 2024-11-13 07:53:12,360] Trial 157 finished with value: 0.1082685037197357 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3797, 'weights': 'distance'}. Best is trial 91 with value: 0.10826700280437802.
running
[I 2024-11-13 07:53:24,926] Trial 158 finished with value: 0.10828394580158747 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3388, 'weights': 'distance'}. Best is trial 91 with value: 0.10826700280437802.
running
[I 2024-11-13 07:53:35,201] Trial 159 finished with value: 0.10827512690768279 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3561, 'weights': 'distance'}. Best is trial 91 with value: 0.10826700280437802.
running
[I 2024-11-13 07:53:35,845] Trial 160 finished with value: 0.10839518403841167 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 91 with value: 0.10826700280437802.
running
[I 2024-11-13 07:53:48,995] Trial 161 finished with value: 0.10827722403259185 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3908, 'weights': 'distance'}. Best is trial 91 with value: 0.10826700280437802.
running
[I 2024-11-13 07:54:00,780] Trial 162 finished with value: 0.10826867787816094 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3752, 'weights': 'distance'}. Best is trial 91 with value: 0.10826700280437802.
running
[I 2024-11-13 07:54:13,808] Trial 163 finished with value: 0.10828689537750913 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3190, 'weights': 'distance'}. Best is trial 91 with value: 0.10826700280437802.
running
[I 2024-11-13 07:54:25,134] Trial 164 finished with value: 0.10827211795678815 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3720, 'weights': 'distance'}. Best is trial 91 with value: 0.10826700280437802.
running
[I 2024-11-13 07:54:36,989] Trial 165 finished with value: 0.10827199998770701 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3978, 'weights': 'distance'}. Best is trial 91 with value: 0.10826700280437802.
running
[I 2024-11-13 07:54:49,702] Trial 166 finished with value: 0.10826939364738371 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3772, 'weights': 'distance'}. Best is trial 91 with value: 0.10826700280437802.
running
[I 2024-11-13 07:55:02,544] Trial 167 finished with value: 0.10827274313128647 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3631, 'weights': 'distance'}. Best is trial 91 with value: 0.10826700280437802.
running
[I 2024-11-13 07:55:14,518] Trial 168 finished with value: 0.10827073326398222 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3740, 'weights': 'distance'}. Best is trial 91 with value: 0.10826700280437802.
running
[I 2024-11-13 07:55:26,188] Trial 169 finished with value: 0.10828682416449234 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3323, 'weights': 'distance'}. Best is trial 91 with value: 0.10826700280437802.
running
[I 2024-11-13 07:55:39,057] Trial 170 finished with value: 0.10827798631975154 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 4166, 'weights': 'distance'}. Best is trial 91 with value: 0.10826700280437802.
running
[I 2024-11-13 07:59:19,501] Trial 171 finished with value: 0.3202117146936653 and parameters: {'model_name': 'GAIN', 'batch_size': 34, 'hint_rate': 0.5541177456478235, 'alpha': 67, 'iterations': 196, 'learning_rate': 0.0010776916498100207, 'p_miss': 0.1621620818539057}. Best is trial 91 with value: 0.10826700280437802.
running
[I 2024-11-13 07:59:32,173] Trial 172 finished with value: 0.108275112827297 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3481, 'weights': 'distance'}. Best is trial 91 with value: 0.10826700280437802.
running
[I 2024-11-13 07:59:46,194] Trial 173 finished with value: 0.10827454753956096 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 4012, 'weights': 'distance'}. Best is trial 91 with value: 0.10826700280437802.
running
[I 2024-11-13 07:59:58,688] Trial 174 finished with value: 0.10827091019488719 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3819, 'weights': 'distance'}. Best is trial 91 with value: 0.10826700280437802.
running
[I 2024-11-13 08:04:59,217] Trial 114 finished with value: 0.13300616063617549 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'median', 'n_nearest_features': 1, 'imputation_order': 'arabic'}. Best is trial 91 with value: 0.10826700280437802.
running
[I 2024-11-13 08:05:11,000] Trial 176 finished with value: 0.10827050393158726 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3829, 'weights': 'distance'}. Best is trial 91 with value: 0.10826700280437802.
running
[I 2024-11-13 08:05:21,905] Trial 177 finished with value: 0.10827558074518026 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3602, 'weights': 'distance'}. Best is trial 91 with value: 0.10826700280437802.
running
[I 2024-11-13 08:05:32,981] Trial 178 finished with value: 0.10827500132225527 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3884, 'weights': 'distance'}. Best is trial 91 with value: 0.10826700280437802.
running
[I 2024-11-13 08:05:44,920] Trial 179 finished with value: 0.10827153382867302 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3724, 'weights': 'distance'}. Best is trial 91 with value: 0.10826700280437802.
running
[I 2024-11-13 08:05:56,178] Trial 180 finished with value: 0.1082741786066977 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3538, 'weights': 'distance'}. Best is trial 91 with value: 0.10826700280437802.
running
[I 2024-11-13 08:06:06,930] Trial 181 finished with value: 0.10827549873515437 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 4090, 'weights': 'distance'}. Best is trial 91 with value: 0.10826700280437802.
running
[I 2024-11-13 08:06:15,903] Trial 182 finished with value: 0.10838204776201385 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3800, 'weights': 'uniform'}. Best is trial 91 with value: 0.10826700280437802.
running
[I 2024-11-13 08:06:27,627] Trial 183 finished with value: 0.10827117347886502 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3658, 'weights': 'distance'}. Best is trial 91 with value: 0.10826700280437802.
running
[I 2024-11-13 08:06:32,566] Trial 184 finished with value: 0.13246726118639357 and parameters: {'model_name': 'VAE', 'batch_size': 2, 'iterations': 1, 'learning_rate': 0.020236597737759682, 'p_miss': 0.07227915447360315}. Best is trial 91 with value: 0.10826700280437802.
running
[I 2024-11-13 08:06:45,362] Trial 185 finished with value: 0.10827617379865362 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3946, 'weights': 'distance'}. Best is trial 91 with value: 0.10826700280437802.
running
[I 2024-11-13 08:06:57,460] Trial 186 finished with value: 0.10827130100145448 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3817, 'weights': 'distance'}. Best is trial 91 with value: 0.10826700280437802.
running
[I 2024-11-13 08:07:09,107] Trial 187 finished with value: 0.10828316427213039 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3403, 'weights': 'distance'}. Best is trial 91 with value: 0.10826700280437802.
running
[I 2024-11-13 08:07:22,339] Trial 188 finished with value: 0.10827454753956096 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 4012, 'weights': 'distance'}. Best is trial 91 with value: 0.10826700280437802.
running
[I 2024-11-13 08:07:34,866] Trial 189 finished with value: 0.10827038912889937 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3744, 'weights': 'distance'}. Best is trial 91 with value: 0.10826700280437802.
running
[I 2024-11-13 08:07:47,707] Trial 190 finished with value: 0.10827015155719547 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3681, 'weights': 'distance'}. Best is trial 91 with value: 0.10826700280437802.
running
[I 2024-11-13 08:07:58,616] Trial 191 finished with value: 0.10827122431505172 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3657, 'weights': 'distance'}. Best is trial 91 with value: 0.10826700280437802.
running
[I 2024-11-13 08:07:59,120] Trial 192 finished with value: 0.10845710744553105 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'mean'}. Best is trial 91 with value: 0.10826700280437802.
running
[I 2024-11-13 08:08:11,610] Trial 193 finished with value: 0.10827350970941571 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3488, 'weights': 'distance'}. Best is trial 91 with value: 0.10826700280437802.
running
[I 2024-11-13 08:08:24,651] Trial 194 finished with value: 0.10827130391679696 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3742, 'weights': 'distance'}. Best is trial 91 with value: 0.10826700280437802.
running
[I 2024-11-13 08:08:36,166] Trial 195 finished with value: 0.10827637404301671 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3555, 'weights': 'distance'}. Best is trial 91 with value: 0.10826700280437802.
running
[I 2024-11-13 08:08:49,419] Trial 196 finished with value: 0.10827332875769277 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3880, 'weights': 'distance'}. Best is trial 91 with value: 0.10826700280437802.
running
[I 2024-11-13 08:09:00,735] Trial 197 finished with value: 0.10826876004593614 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3769, 'weights': 'distance'}. Best is trial 91 with value: 0.10826700280437802.
running
[I 2024-11-13 08:09:14,048] Trial 198 finished with value: 0.10827077785116224 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3662, 'weights': 'distance'}. Best is trial 91 with value: 0.10826700280437802.
running
[I 2024-11-13 08:09:25,464] Trial 199 finished with value: 0.1082688164769765 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3764, 'weights': 'distance'}. Best is trial 91 with value: 0.10826700280437802.
[I 2024-11-13 08:16:52,035] Trial 27 finished with value: 0.10965229745702021 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'mean', 'n_nearest_features': 13, 'imputation_order': 'descending'}. Best is trial 91 with value: 0.10826700280437802.
[I 2024-11-13 08:31:55,021] Trial 104 finished with value: 0.11145450212005141 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'median', 'n_nearest_features': 5, 'imputation_order': 'descending'}. Best is trial 91 with value: 0.10826700280437802.
[I 2024-11-13 08:31:56,902] Trial 65 finished with value: 0.16532119307327459 and parameters: {'model_name': 'VAE', 'batch_size': 1, 'iterations': 5043, 'learning_rate': 0.08767752534416783, 'p_miss': 0.04745492423745154}. Best is trial 91 with value: 0.10826700280437802.
[I 2024-11-13 08:34:03,432] Trial 71 finished with value: 0.1617477367197254 and parameters: {'model_name': 'VAE', 'batch_size': 1, 'iterations': 5057, 'learning_rate': 0.00012325829684027288, 'p_miss': 0.03773601661541112}. Best is trial 91 with value: 0.10826700280437802.
[I 2024-11-13 08:34:57,142] Trial 103 finished with value: 0.1115406730697879 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'median', 'n_nearest_features': 6, 'imputation_order': 'descending'}. Best is trial 91 with value: 0.10826700280437802.
[I 2024-11-13 08:41:25,647] Trial 105 finished with value: 0.1117639768268474 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'median', 'n_nearest_features': 6, 'imputation_order': 'descending'}. Best is trial 91 with value: 0.10826700280437802.
[I 2024-11-13 08:44:15,984] Trial 66 finished with value: 0.16352783750580632 and parameters: {'model_name': 'VAE', 'batch_size': 1, 'iterations': 6450, 'learning_rate': 0.0003691388965178593, 'p_miss': 0.02438317627378117}. Best is trial 91 with value: 0.10826700280437802.
[I 2024-11-13 08:45:00,940] Trial 24 finished with value: 0.10965071851645569 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'median', 'n_nearest_features': 16, 'imputation_order': 'arabic'}. Best is trial 91 with value: 0.10826700280437802.
[I 2024-11-13 08:45:19,367] Trial 63 finished with value: 0.16803274096920254 and parameters: {'model_name': 'VAE', 'batch_size': 1, 'iterations': 6319, 'learning_rate': 0.07422140944815772, 'p_miss': 0.012296921969256497}. Best is trial 91 with value: 0.10826700280437802.
[I 2024-11-13 08:47:59,803] Trial 111 finished with value: 0.1116129214459606 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'median', 'n_nearest_features': 6, 'imputation_order': 'descending'}. Best is trial 91 with value: 0.10826700280437802.
[I 2024-11-13 08:49:09,793] Trial 113 finished with value: 0.11185757619431531 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'median', 'n_nearest_features': 6, 'imputation_order': 'descending'}. Best is trial 91 with value: 0.10826700280437802.
[I 2024-11-13 08:49:45,904] Trial 62 finished with value: 0.16388741247702376 and parameters: {'model_name': 'VAE', 'batch_size': 1, 'iterations': 8803, 'learning_rate': 0.07756676920496922, 'p_miss': 0.025587371429460076}. Best is trial 91 with value: 0.10826700280437802.
[I 2024-11-13 08:50:14,087] Trial 69 finished with value: 0.16437792550044011 and parameters: {'model_name': 'VAE', 'batch_size': 1, 'iterations': 9801, 'learning_rate': 0.00033872408653812155, 'p_miss': 0.011848207928170373}. Best is trial 91 with value: 0.10826700280437802.
[I 2024-11-13 08:50:31,868] Trial 68 finished with value: 0.16931845076157986 and parameters: {'model_name': 'VAE', 'batch_size': 1, 'iterations': 9659, 'learning_rate': 0.0831286008936421, 'p_miss': 0.018141949787906203}. Best is trial 91 with value: 0.10826700280437802.
[I 2024-11-13 10:07:54,764] Trial 175 finished with value: 0.11020279956563861 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 12, 'imputation_order': 'arabic'}. Best is trial 91 with value: 0.10826700280437802.
fit
auto fit
auto transform
0     0
1     0
2     0
3     0
4     0
5     0
6     0
7     0
8     0
9     0
10    0
11    0
12    0
13    0
14    0
15    0
16    0
17    0
18    0
19    0
dtype: int64
0     0
1     0
2     0
3     0
4     0
5     0
6     0
7     0
8     0
9     0
10    0
11    0
12    0
13    0
14    0
15    0
16    0
17    0
18    0
19    0
dtype: int64
0.10826700280437802
{'model_name': 'KNNImputer', 'n_neighbors': 3786, 'weights': 'distance'}
running experiment 2/3 - Does reconstruction give good automl predictions
Start est fit
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
  0%|          | 0/25 [00:00<?, ?it/s]Generation:   0%|          | 0/25 [00:00<?, ?it/s]Generation:  1
Best f1_score score: 0.9790472948498122
Generation:   4%|▍         | 1/25 [00:20<08:19, 20.79s/it]Generation:  2
Best f1_score score: 0.9790472948498122
Generation:   8%|▊         | 2/25 [00:34<06:26, 16.79s/it]Generation:  3
Best f1_score score: 0.9790472948498122
Generation:  12%|█▏        | 3/25 [01:20<10:55, 29.80s/it]Generation:  4
Best f1_score score: 0.9790472948498122
Generation:  16%|█▌        | 4/25 [03:09<21:25, 61.23s/it]Generation:  5
Best f1_score score: 0.9790472948498122
Generation:  20%|██        | 5/25 [03:24<14:52, 44.62s/it]Generation:  6
Best f1_score score: 0.9790472948498122
Generation:  24%|██▍       | 6/25 [05:22<21:58, 69.41s/it]Generation:  7
Best f1_score score: 0.9790472948498122
Generation:  28%|██▊       | 7/25 [06:18<19:35, 65.29s/it]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155467fc2530> 
 Argument 'metric' has incorrect type (expected str, got numpy.str_) 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 31, in cross_val_score_objective
    this_fold_scores = [sklearn.metrics.get_scorer(scorer)(this_fold_pipeline, X_test, y_test) for scorer in scorers]
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 31, in <listcomp>
    this_fold_scores = [sklearn.metrics.get_scorer(scorer)(this_fold_pipeline, X_test, y_test) for scorer in scorers]
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/metrics/_scorer.py", line 279, in __call__
    return self._score(partial(_cached_call, None), estimator, X, y_true, **_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/metrics/_scorer.py", line 371, in _score
    y_pred = method_caller(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/metrics/_scorer.py", line 89, in _cached_call
    result, _ = _get_response_values(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/_response.py", line 211, in _get_response_values
    y_pred = prediction_method(X)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 601, in predict
    return self.steps[-1][1].predict(Xt, **params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 259, in predict
    probabilities = self.predict_proba(X)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 343, in predict_proba
    probabilities = ArgKminClassMode.compute(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/metrics/_pairwise_distances_reduction/_dispatcher.py", line 584, in compute
    return ArgKminClassMode64.compute(
TypeError: Argument 'metric' has incorrect type (expected str, got numpy.str_)

Generation:  8
Best f1_score score: 0.9790472948498122
Generation:  32%|███▏      | 8/25 [10:03<32:50, 115.91s/it]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x1554657bca30> 
 Argument 'metric' has incorrect type (expected str, got numpy.str_) 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 31, in cross_val_score_objective
    this_fold_scores = [sklearn.metrics.get_scorer(scorer)(this_fold_pipeline, X_test, y_test) for scorer in scorers]
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 31, in <listcomp>
    this_fold_scores = [sklearn.metrics.get_scorer(scorer)(this_fold_pipeline, X_test, y_test) for scorer in scorers]
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/metrics/_scorer.py", line 279, in __call__
    return self._score(partial(_cached_call, None), estimator, X, y_true, **_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/metrics/_scorer.py", line 371, in _score
    y_pred = method_caller(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/metrics/_scorer.py", line 89, in _cached_call
    result, _ = _get_response_values(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/_response.py", line 211, in _get_response_values
    y_pred = prediction_method(X)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 601, in predict
    return self.steps[-1][1].predict(Xt, **params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 259, in predict
    probabilities = self.predict_proba(X)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 343, in predict_proba
    probabilities = ArgKminClassMode.compute(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/metrics/_pairwise_distances_reduction/_dispatcher.py", line 584, in compute
    return ArgKminClassMode64.compute(
TypeError: Argument 'metric' has incorrect type (expected str, got numpy.str_)

Generation:  9
Best f1_score score: 0.9790472948498122
Generation:  36%|███▌      | 9/25 [11:19<27:36, 103.56s/it]Generation:  10
Best f1_score score: 0.9790472948498122
Generation:  40%|████      | 10/25 [11:59<20:59, 83.95s/it]Generation:  11
Best f1_score score: 0.9790472948498122
Generation:  44%|████▍     | 11/25 [12:34<16:05, 68.93s/it]Generation:  12
Best f1_score score: 0.9790472948498122
Generation:  48%|████▊     | 12/25 [14:23<17:33, 81.04s/it]Generation:  13
Best f1_score score: 0.9790472948498122
Generation:  52%|█████▏    | 13/25 [15:50<16:34, 82.90s/it]Generation:  14
Best f1_score score: 0.9790472948498122
Generation:  56%|█████▌    | 14/25 [16:30<12:48, 69.91s/it]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x1554656c9720> 
 The 'min_samples_split' parameter of DecisionTreeClassifier must be an int in the range [2, inf) or a float in the range (0.0, 1.0]. Got 1 instead. 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1466, in wrapper
    estimator._validate_params()
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 666, in _validate_params
    validate_parameter_constraints(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/_param_validation.py", line 95, in validate_parameter_constraints
    raise InvalidParameterError(
sklearn.utils._param_validation.InvalidParameterError: The 'min_samples_split' parameter of DecisionTreeClassifier must be an int in the range [2, inf) or a float in the range (0.0, 1.0]. Got 1 instead.

Generation:  15
Best f1_score score: 0.9790472948498122
Generation:  60%|██████    | 15/25 [16:59<09:35, 57.55s/it]Generation:  16
Best f1_score score: 0.9790472948498122
Generation:  64%|██████▍   | 16/25 [17:28<07:22, 49.12s/it]Generation:  17
Best f1_score score: 0.9790472948498122
Generation:  68%|██████▊   | 17/25 [19:20<09:04, 68.02s/it]Generation:  18
Best f1_score score: 0.9790472948498122
Generation:  72%|███████▏  | 18/25 [20:24<07:46, 66.71s/it]Generation:  19
Best f1_score score: 0.9790472948498122
Generation:  76%|███████▌  | 19/25 [21:01<05:46, 57.71s/it]Generation:  20
Best f1_score score: 0.9790472948498122
Generation:  80%|████████  | 20/25 [21:23<03:54, 46.98s/it]Generation:  21
Best f1_score score: 0.9790472948498122
Generation:  84%|████████▍ | 21/25 [21:53<02:47, 41.99s/it]Generation:  22
Best f1_score score: 0.9790472948498122
Generation:  88%|████████▊ | 22/25 [22:08<01:41, 33.94s/it]Generation:  23
Best f1_score score: 0.9790472948498122
Generation:  92%|█████████▏| 23/25 [22:24<00:57, 28.54s/it]Generation:  24
Best f1_score score: 0.9790472948498122
Generation:  96%|█████████▌| 24/25 [23:12<00:34, 34.41s/it]Generation:  25
Best f1_score score: 0.9790472948498122
Generation: 100%|██████████| 25/25 [24:36<00:00, 49.23s/it]Generation: 100%|██████████| 25/25 [24:39<00:00, 59.19s/it]
2024-11-13 10:32:49,970 - distributed.scheduler - ERROR - Removing worker 'tcp://127.0.0.1:36333' caused the cluster to lose scattered data, which can't be recovered: {'ndarray-0beb8ee99793c400dfbe7fc98ac86ab6', 'ndarray-4cb56bbbe4ce60b80e8b59051bc5b8d8'} (stimulus_id='handle-worker-cleanup-1731522769.970406')
Fitted
Pipeline(steps=[('gaussiannb', GaussianNB())])
score start
train score: {'auroc': 0.9975302368208051, 'accuracy': 0.9787162162162162, 'balanced_accuracy': 0.9786347278814541, 'logloss': 0.05762020178755011, 'f1': 0.9787093903713424}
original test score: {'auroc': 0.997439507917984, 'accuracy': 0.981081081081081, 'balanced_accuracy': 0.981002682855113, 'logloss': 0.052845150233578886, 'f1': 0.9810752405325969}
imputed test score: {'auroc': 0.9973847185011075, 'accuracy': 0.9804054054054054, 'balanced_accuracy': 0.9803205546150039, 'logloss': 0.055116337369800344, 'f1': 0.9803988818411533}
score end
check intended
EXP2 Finished
running experiment 3/3 - What is the best automl settings?
<tpot2.search_spaces.pipelines.sequential.SequentialPipeline object at 0x155435010610>
Start tpot fit
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
  0%|          | 0/25 [00:00<?, ?it/s]Generation:   0%|          | 0/25 [00:00<?, ?it/s]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155474d1c340> 
 Argument 'metric' has incorrect type (expected str, got numpy.str_) 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 31, in cross_val_score_objective
    this_fold_scores = [sklearn.metrics.get_scorer(scorer)(this_fold_pipeline, X_test, y_test) for scorer in scorers]
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 31, in <listcomp>
    this_fold_scores = [sklearn.metrics.get_scorer(scorer)(this_fold_pipeline, X_test, y_test) for scorer in scorers]
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/metrics/_scorer.py", line 279, in __call__
    return self._score(partial(_cached_call, None), estimator, X, y_true, **_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/metrics/_scorer.py", line 371, in _score
    y_pred = method_caller(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/metrics/_scorer.py", line 89, in _cached_call
    result, _ = _get_response_values(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/_response.py", line 211, in _get_response_values
    y_pred = prediction_method(X)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 601, in predict
    return self.steps[-1][1].predict(Xt, **params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 259, in predict
    probabilities = self.predict_proba(X)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 343, in predict_proba
    probabilities = ArgKminClassMode.compute(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/metrics/_pairwise_distances_reduction/_dispatcher.py", line 598, in compute
    return ArgKminClassMode32.compute(
TypeError: Argument 'metric' has incorrect type (expected str, got numpy.str_)

WARNING AN INDIVIDUAL TIMED OUT: 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155474cd4e50> 

Generation:  1
Best f1_score score: 0.9788781874723353
Generation:   4%|▍         | 1/25 [10:02<4:01:02, 602.60s/it]WARNING AN INDIVIDUAL TIMED OUT: 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155474d21960> 

Generation:  2
Best f1_score score: 0.9790472948498122
Generation:   8%|▊         | 2/25 [20:07<3:51:33, 604.08s/it]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155457236620> 
 Input X contains NaN.
LinearDiscriminantAnalysis does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/discriminant_analysis.py", line 589, in fit
    X, y = self._validate_data(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 650, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1301, in check_X_y
    X = check_array(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1064, in check_array
    _assert_all_finite(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 123, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 172, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
LinearDiscriminantAnalysis does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

WARNING AN INDIVIDUAL TIMED OUT: 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155474d2d600> 

Generation:  3
Best f1_score score: 0.9790472948498122
Generation:  12%|█▏        | 3/25 [30:13<3:41:43, 604.72s/it]WARNING AN INDIVIDUAL TIMED OUT: 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x15545ffc9270> 

Generation:  4
Best f1_score score: 0.9790472948498122
Generation:  16%|█▌        | 4/25 [40:18<3:31:43, 604.94s/it]Generation:  5
Best f1_score score: 0.9790472948498122
Generation:  20%|██        | 5/25 [40:48<2:12:34, 397.73s/it]Generation:  6
Best f1_score score: 0.9790472948498122
Generation:  24%|██▍       | 6/25 [41:28<1:27:22, 275.91s/it]WARNING AN INDIVIDUAL TIMED OUT: 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x15545e2f8280> 

Generation:  7
Best f1_score score: 0.9790472948498122
Generation:  28%|██▊       | 7/25 [51:33<1:55:05, 383.62s/it]Generation:  8
Best f1_score score: 0.9790472948498122
Generation:  32%|███▏      | 8/25 [53:52<1:26:36, 305.65s/it]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155456c86860> 
 Input X contains NaN.
GaussianNB does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/naive_bayes.py", line 263, in fit
    return self._partial_fit(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/naive_bayes.py", line 423, in _partial_fit
    X, y = self._validate_data(X, y, reset=first_call)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 650, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1301, in check_X_y
    X = check_array(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1064, in check_array
    _assert_all_finite(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 123, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 172, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
GaussianNB does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

WARNING AN INDIVIDUAL TIMED OUT: 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x15545dadc9a0> 

WARNING AN INDIVIDUAL TIMED OUT: 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x15545fff0b50> 

Generation:  9
Best f1_score score: 0.9790472948498122
Generation:  36%|███▌      | 9/25 [1:03:59<1:46:37, 399.87s/it]WARNING AN INDIVIDUAL TIMED OUT: 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x15545dde3a60> 

WARNING AN INDIVIDUAL TIMED OUT: 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155457273eb0> 

Generation:  10
Best f1_score score: 0.9790472948498122
Generation:  40%|████      | 10/25 [1:14:06<1:55:57, 463.85s/it]WARNING AN INDIVIDUAL TIMED OUT: 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x15545fdca620> 

Generation:  11
Best f1_score score: 0.9790472948498122
Generation:  44%|████▍     | 11/25 [1:24:13<1:58:25, 507.54s/it]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x15544ef54700> 
 Input X contains NaN.
GaussianNB does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/naive_bayes.py", line 263, in fit
    return self._partial_fit(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/naive_bayes.py", line 423, in _partial_fit
    X, y = self._validate_data(X, y, reset=first_call)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 650, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1301, in check_X_y
    X = check_array(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1064, in check_array
    _assert_all_finite(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 123, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 172, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
GaussianNB does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

WARNING AN INDIVIDUAL TIMED OUT: 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x15545fe07070> 

Generation:  12
Best f1_score score: 0.9790472948498122
Generation:  48%|████▊     | 12/25 [1:34:18<1:56:26, 537.45s/it]WARNING AN INDIVIDUAL TIMED OUT: 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x1554740c5630> 

Generation:  13
Best f1_score score: 0.9790472948498122
Generation:  52%|█████▏    | 13/25 [1:44:25<1:51:41, 558.43s/it]Generation:  14
Best f1_score score: 0.9790472948498122
Generation:  56%|█████▌    | 14/25 [1:45:37<1:15:26, 411.54s/it]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x15545da33d90> 
 Input X contains NaN.
GaussianNB does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/naive_bayes.py", line 263, in fit
    return self._partial_fit(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/naive_bayes.py", line 423, in _partial_fit
    X, y = self._validate_data(X, y, reset=first_call)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 650, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1301, in check_X_y
    X = check_array(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1064, in check_array
    _assert_all_finite(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 123, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 172, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
GaussianNB does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

WARNING AN INDIVIDUAL TIMED OUT: 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155457226980> 

WARNING AN INDIVIDUAL TIMED OUT: 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x15545fff1630> 

Generation:  15
Best f1_score score: 0.9790472948498122
Generation:  60%|██████    | 15/25 [1:55:46<1:18:29, 470.91s/it]WARNING AN INDIVIDUAL TIMED OUT: 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155474d3c4c0> 

WARNING AN INDIVIDUAL TIMED OUT: 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x15545b9aca90> 

Generation:  16
Best f1_score score: 0.9790472948498122
Generation:  64%|██████▍   | 16/25 [2:05:55<1:16:52, 512.46s/it]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x1554147be290> 
 Input X contains NaN.
GaussianNB does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/naive_bayes.py", line 263, in fit
    return self._partial_fit(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/naive_bayes.py", line 423, in _partial_fit
    X, y = self._validate_data(X, y, reset=first_call)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 650, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1301, in check_X_y
    X = check_array(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1064, in check_array
    _assert_all_finite(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 123, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 172, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
GaussianNB does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

WARNING AN INDIVIDUAL TIMED OUT: 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x1554570c4c40> 

WARNING AN INDIVIDUAL TIMED OUT: 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155452118c10> 

Generation:  17
Best f1_score score: 0.9790472948498122
Generation:  68%|██████▊   | 17/25 [2:16:02<1:12:07, 540.98s/it]Generation:  18
Best f1_score score: 0.9790472948498122
Generation:  72%|███████▏  | 18/25 [2:18:29<49:18, 422.58s/it]  WARNING AN INDIVIDUAL TIMED OUT: 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x15545a439e40> 

Generation:  19
Best f1_score score: 0.9790472948498122
Generation:  76%|███████▌  | 19/25 [2:28:36<47:48, 478.05s/it]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x15544efc1630> 
 Input X contains NaN.
GaussianNB does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/naive_bayes.py", line 263, in fit
    return self._partial_fit(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/naive_bayes.py", line 423, in _partial_fit
    X, y = self._validate_data(X, y, reset=first_call)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 650, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1301, in check_X_y
    X = check_array(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1064, in check_array
    _assert_all_finite(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 123, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 172, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
GaussianNB does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

WARNING AN INDIVIDUAL TIMED OUT: 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x15545a4cf8e0> 

Generation:  20
Best f1_score score: 0.9792163576061993
Generation:  80%|████████  | 20/25 [2:38:43<43:04, 516.84s/it]WARNING AN INDIVIDUAL TIMED OUT: 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155452807760> 

WARNING AN INDIVIDUAL TIMED OUT: 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155452b85bd0> 

Generation:  21
Best f1_score score: 0.9792163576061993
Generation:  84%|████████▍ | 21/25 [2:48:50<36:15, 543.84s/it]Generation:  22
Best f1_score score: 0.9792163576061993
Generation:  88%|████████▊ | 22/25 [2:50:23<20:25, 408.47s/it]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x1554745976a0> 
 Input X contains NaN.
GaussianNB does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/naive_bayes.py", line 263, in fit
    return self._partial_fit(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/naive_bayes.py", line 423, in _partial_fit
    X, y = self._validate_data(X, y, reset=first_call)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 650, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1301, in check_X_y
    X = check_array(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1064, in check_array
    _assert_all_finite(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 123, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 172, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
GaussianNB does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

WARNING AN INDIVIDUAL TIMED OUT: 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x1554525dc8e0> 

WARNING AN INDIVIDUAL TIMED OUT: 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155452a3c520> 

Generation:  23
Best f1_score score: 0.9792163576061993
Generation:  92%|█████████▏| 23/25 [3:00:30<15:35, 467.89s/it]WARNING AN INDIVIDUAL TIMED OUT: 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x15545d0c49a0> 

Generation:  24
Best f1_score score: 0.9792163576061993
Generation:  96%|█████████▌| 24/25 [3:10:38<08:30, 510.05s/it]Generation:  25
Best f1_score score: 0.9792163576061993
Generation: 100%|██████████| 25/25 [3:17:54<00:00, 487.73s/it]Generation: 100%|██████████| 25/25 [3:17:54<00:00, 474.96s/it]
2024-11-13 13:50:53,631 - distributed.scheduler - ERROR - Removing worker 'tcp://127.0.0.1:34049' caused the cluster to lose scattered data, which can't be recovered: {'DataFrame-f258dab47dc2e314507c9a2736b53332', 'ndarray-4cb56bbbe4ce60b80e8b59051bc5b8d8'} (stimulus_id='handle-worker-cleanup-1731534653.6309226')
Fitted
Pipeline(steps=[('iterativeimputer',
                 IterativeImputer(estimator=KNeighborsRegressor(),
                                  imputation_order='descending',
                                  n_nearest_features=9)),
                ('gaussiannb', GaussianNB())])
transform worked
try transform
transform worked
score start
train score: {'auroc': 0.9975433635373373, 'accuracy': 0.9787162162162162, 'balanced_accuracy': 0.9786347278814541, 'logloss': 0.05713923639121475, 'f1': 0.9787093903713424}
test score: {'auroc': 0.9974048079539622, 'accuracy': 0.981081081081081, 'balanced_accuracy': 0.9809898986578419, 'logloss': 0.05460357156280184, 'f1': 0.9810743070931158}
original test score: {'auroc': 0.9974431605457756, 'accuracy': 0.9817567567567568, 'balanced_accuracy': 0.9816720268979511, 'logloss': 0.05285872348877115, 'f1': 0.9817506830934876}
score end
1496
lvl
0.01
type
MCAR
num_run
3
class_full
finished
all finished
full run takes
8.411284486452738
hours
DONE
