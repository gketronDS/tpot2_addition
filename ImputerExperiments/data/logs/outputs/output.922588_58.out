Run: 58
/cm/local/apps/slurm/var/spool/job922588/slurm_script: line 26: 
pip install -e tpot2
pip install -r tpot2/ImputerExperiments/requirements_.txt
: No such file or directory
RunStart
starting loops
../data/c/30/30.pkl
working on 
../data/c/30/class_full_MNAR_0.1_3
2.1207666397094727
running experiment 1/3 - Does large hyperparameter space improve reconstruction accuracy over simple
[I 2024-08-14 03:55:04,072] A new study created in memory with name: no-name-b4339bc5-b288-41bf-bce0-d01d805d7cbf
running
running
running
running
running
running
running
running
running
running
running
running
running
running
running
running
[I 2024-08-14 03:55:04,339] Trial 3 finished with value: 0.07603965402275319 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'mean'}. Best is trial 3 with value: 0.07603965402275319.
[I 2024-08-14 03:55:04,557] Trial 2 finished with value: 0.07603965402275319 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'mean'}. Best is trial 3 with value: 0.07603965402275319.
running
running
[I 2024-08-14 03:55:04,940] Trial 6 finished with value: 0.2831384870059776 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'constant'}. Best is trial 3 with value: 0.07603965402275319.
running
[I 2024-08-14 03:55:05,186] Trial 12 finished with value: 0.07683810131816869 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 3 with value: 0.07603965402275319.
running
[I 2024-08-14 03:55:05,615] Trial 16 finished with value: 0.2831384870059776 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'most_frequent'}. Best is trial 3 with value: 0.07603965402275319.
running
[I 2024-08-14 03:55:08,672] Trial 9 finished with value: 0.0674784973321503 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 4452, 'weights': 'distance'}. Best is trial 9 with value: 0.0674784973321503.
running
[I 2024-08-14 03:55:09,070] Trial 15 finished with value: 0.07297263886251418 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 2913, 'weights': 'uniform'}. Best is trial 9 with value: 0.0674784973321503.
running
[I 2024-08-14 03:55:09,283] Trial 19 finished with value: 0.06785165746022385 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 1199, 'weights': 'uniform'}. Best is trial 9 with value: 0.0674784973321503.
[I 2024-08-14 03:55:09,387] Trial 8 finished with value: 0.07553012854059522 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 4074, 'weights': 'uniform'}. Best is trial 9 with value: 0.0674784973321503.
running
running
[I 2024-08-14 03:55:09,705] Trial 1 finished with value: 0.07377900234427484 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3314, 'weights': 'uniform'}. Best is trial 9 with value: 0.0674784973321503.
running
[I 2024-08-14 03:55:10,302] Trial 18 finished with value: 0.06433459889915037 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 2520, 'weights': 'distance'}. Best is trial 18 with value: 0.06433459889915037.
running
[I 2024-08-14 03:55:13,151] Trial 24 finished with value: 0.06607697915341916 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 894, 'weights': 'uniform'}. Best is trial 18 with value: 0.06433459889915037.
running
[I 2024-08-14 03:55:13,468] Trial 22 finished with value: 0.07289100336598739 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 2877, 'weights': 'uniform'}. Best is trial 18 with value: 0.06433459889915037.
[I 2024-08-14 03:55:13,574] Trial 23 finished with value: 0.07472198114066236 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3606, 'weights': 'uniform'}. Best is trial 18 with value: 0.06433459889915037.
running
running
[I 2024-08-14 03:55:21,136] Trial 17 finished with value: 0.06198180661601251 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Ridge', 'initial_strategy': 'mean', 'n_nearest_features': 3, 'imputation_order': 'descending'}. Best is trial 17 with value: 0.06198180661601251.
running
[I 2024-08-14 03:55:22,369] Trial 7 finished with value: 0.05320834318153642 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Ridge', 'initial_strategy': 'constant', 'n_nearest_features': 6, 'imputation_order': 'random'}. Best is trial 7 with value: 0.05320834318153642.
running
[I 2024-08-14 03:55:30,421] Trial 20 finished with value: 0.05216459707207536 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Ridge', 'initial_strategy': 'constant', 'n_nearest_features': 9, 'imputation_order': 'ascending'}. Best is trial 20 with value: 0.05216459707207536.
running
[I 2024-08-14 03:55:33,473] Trial 25 finished with value: 0.05216546481636687 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Ridge', 'initial_strategy': 'constant', 'n_nearest_features': 9, 'imputation_order': 'roman'}. Best is trial 20 with value: 0.05216459707207536.
running
[I 2024-08-14 03:55:36,724] Trial 27 finished with value: 0.05539270091703565 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Ridge', 'initial_strategy': 'constant', 'n_nearest_features': 5, 'imputation_order': 'descending'}. Best is trial 20 with value: 0.05216459707207536.
running
[I 2024-08-14 03:55:39,939] Trial 11 finished with value: 0.2676304882861909 and parameters: {'model_name': 'GAIN', 'batch_size': 26, 'hint_rate': 0.14500404874408732, 'alpha': 71, 'iterations': 1, 'learning_rate': 0.09968860643004356, 'p_miss': 0.29373541553165466}. Best is trial 20 with value: 0.05216459707207536.
running
[I 2024-08-14 03:55:42,394] Trial 34 finished with value: inf and parameters: {'model_name': 'GAIN', 'batch_size': 2, 'hint_rate': 0.7520102430757651, 'alpha': 48, 'iterations': 57, 'learning_rate': 0.000234152470517005, 'p_miss': 0.15080913332906998}. Best is trial 20 with value: 0.05216459707207536.
running
[I 2024-08-14 03:55:43,311] Trial 4 finished with value: 0.284569786493702 and parameters: {'model_name': 'GAIN', 'batch_size': 25, 'hint_rate': 0.3702451400097826, 'alpha': 31, 'iterations': 5, 'learning_rate': 0.0035006993953595926, 'p_miss': 0.24945292246120415}. Best is trial 20 with value: 0.05216459707207536.
running
[I 2024-08-14 03:55:48,043] Trial 0 finished with value: 0.05995963331455306 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'mean', 'n_nearest_features': 5, 'imputation_order': 'ascending'}. Best is trial 20 with value: 0.05216459707207536.
running
[I 2024-08-14 03:55:48,496] Trial 5 finished with value: 0.2808224060359594 and parameters: {'model_name': 'GAIN', 'batch_size': 11, 'hint_rate': 0.3844013647702176, 'alpha': 59, 'iterations': 11, 'learning_rate': 0.0006261962390331804, 'p_miss': 0.09669999758061855}. Best is trial 20 with value: 0.05216459707207536.
running
[I 2024-08-14 03:55:50,381] Trial 26 finished with value: inf and parameters: {'model_name': 'GAIN', 'batch_size': 1, 'hint_rate': 0.6595030898272859, 'alpha': 21, 'iterations': 151, 'learning_rate': 0.0050571459509987015, 'p_miss': 0.15337772376966965}. Best is trial 20 with value: 0.05216459707207536.
running
[I 2024-08-14 03:55:50,697] Trial 30 finished with value: 0.06198180661601251 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Ridge', 'initial_strategy': 'mean', 'n_nearest_features': 3, 'imputation_order': 'descending'}. Best is trial 20 with value: 0.05216459707207536.
running
[I 2024-08-14 03:55:52,517] Trial 31 finished with value: 0.05742963086001731 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Ridge', 'initial_strategy': 'constant', 'n_nearest_features': 4, 'imputation_order': 'random'}. Best is trial 20 with value: 0.05216459707207536.
running
[I 2024-08-14 03:55:56,180] Trial 32 finished with value: 0.052164597072075346 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Ridge', 'initial_strategy': 'constant', 'n_nearest_features': 10, 'imputation_order': 'ascending'}. Best is trial 32 with value: 0.052164597072075346.
running
[I 2024-08-14 03:56:11,859] Trial 36 finished with value: 0.05216546481636686 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Ridge', 'initial_strategy': 'constant', 'n_nearest_features': 10, 'imputation_order': 'roman'}. Best is trial 32 with value: 0.052164597072075346.
running
[I 2024-08-14 03:56:13,699] Trial 37 finished with value: 0.05216546481636686 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Ridge', 'initial_strategy': 'constant', 'n_nearest_features': 10, 'imputation_order': 'roman'}. Best is trial 32 with value: 0.052164597072075346.
running
[I 2024-08-14 03:56:16,771] Trial 39 finished with value: 0.05216546481636686 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Ridge', 'initial_strategy': 'constant', 'n_nearest_features': 10, 'imputation_order': 'roman'}. Best is trial 32 with value: 0.052164597072075346.
running
[I 2024-08-14 03:56:17,349] Trial 38 finished with value: 0.05216546481636686 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Ridge', 'initial_strategy': 'constant', 'n_nearest_features': 10, 'imputation_order': 'roman'}. Best is trial 32 with value: 0.052164597072075346.
running
[I 2024-08-14 03:56:18,807] Trial 40 finished with value: 0.05216073176360701 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Ridge', 'initial_strategy': 'constant', 'n_nearest_features': 10, 'imputation_order': 'random'}. Best is trial 40 with value: 0.05216073176360701.
running
[I 2024-08-14 03:56:24,992] Trial 13 finished with value: 0.27429536773793284 and parameters: {'model_name': 'GAIN', 'batch_size': 263, 'hint_rate': 0.7960850135298947, 'alpha': 61, 'iterations': 38, 'learning_rate': 0.004193152896685143, 'p_miss': 0.04781571423299635}. Best is trial 40 with value: 0.05216073176360701.
running
[I 2024-08-14 03:56:27,319] Trial 21 finished with value: 0.1145781909180317 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Bayesian', 'initial_strategy': 'mean', 'n_nearest_features': 4, 'imputation_order': 'descending', 'sample_posterior': True}. Best is trial 40 with value: 0.05216073176360701.
running
[I 2024-08-14 03:56:33,656] Trial 35 finished with value: 0.05251699384200346 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'constant', 'n_nearest_features': 10, 'imputation_order': 'ascending'}. Best is trial 40 with value: 0.05216073176360701.
running
[I 2024-08-14 03:56:42,215] Trial 29 finished with value: 0.052610527749655814 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Bayesian', 'initial_strategy': 'most_frequent', 'n_nearest_features': 7, 'imputation_order': 'roman', 'sample_posterior': False}. Best is trial 40 with value: 0.05216073176360701.
running
[I 2024-08-14 03:56:58,260] Trial 33 finished with value: inf and parameters: {'model_name': 'GAIN', 'batch_size': 1, 'hint_rate': 0.3631570242257838, 'alpha': 86, 'iterations': 993, 'learning_rate': 0.00019015934829216263, 'p_miss': 0.05273718169633257}. Best is trial 40 with value: 0.05216073176360701.
running
[I 2024-08-14 03:57:30,918] Trial 41 finished with value: 0.10754808136842509 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Bayesian', 'initial_strategy': 'constant', 'n_nearest_features': 10, 'imputation_order': 'random', 'sample_posterior': True}. Best is trial 40 with value: 0.05216073176360701.
running
[I 2024-08-14 03:57:32,788] Trial 42 finished with value: 0.10782006202347567 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Bayesian', 'initial_strategy': 'constant', 'n_nearest_features': 10, 'imputation_order': 'roman', 'sample_posterior': True}. Best is trial 40 with value: 0.05216073176360701.
running
[I 2024-08-14 03:57:42,334] Trial 45 finished with value: 0.052121504397061494 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Bayesian', 'initial_strategy': 'median', 'n_nearest_features': 8, 'imputation_order': 'ascending', 'sample_posterior': False}. Best is trial 45 with value: 0.052121504397061494.
running
[I 2024-08-14 03:58:11,265] Trial 49 finished with value: 0.11096439218107113 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Bayesian', 'initial_strategy': 'most_frequent', 'n_nearest_features': 8, 'imputation_order': 'ascending', 'sample_posterior': True}. Best is trial 45 with value: 0.052121504397061494.
running
[I 2024-08-14 04:07:07,312] Trial 14 finished with value: 0.27060158930851536 and parameters: {'model_name': 'GAIN', 'batch_size': 6, 'hint_rate': 0.8580435030946106, 'alpha': 22, 'iterations': 3007, 'learning_rate': 0.00030916628087631877, 'p_miss': 0.19706162543187533}. Best is trial 45 with value: 0.052121504397061494.
running
[I 2024-08-14 04:07:56,972] Trial 10 finished with value: 0.2807718578511563 and parameters: {'model_name': 'GAIN', 'batch_size': 94, 'hint_rate': 0.12502289549381992, 'alpha': 21, 'iterations': 3436, 'learning_rate': 0.0001255675326476379, 'p_miss': 0.06389372877463252}. Best is trial 45 with value: 0.052121504397061494.
running
[I 2024-08-14 04:58:17,176] Trial 47 finished with value: 0.04745113058339208 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 8, 'imputation_order': 'ascending'}. Best is trial 47 with value: 0.04745113058339208.
running
[I 2024-08-14 04:58:19,400] Trial 46 finished with value: 0.04624549648914635 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 8, 'imputation_order': 'ascending'}. Best is trial 46 with value: 0.04624549648914635.
running
[I 2024-08-14 04:58:28,694] Trial 51 finished with value: 0.0465783332423435 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 8, 'imputation_order': 'arabic'}. Best is trial 46 with value: 0.04624549648914635.
running
[I 2024-08-14 04:58:29,463] Trial 62 finished with value: 0.2831384870059776 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'most_frequent'}. Best is trial 46 with value: 0.04624549648914635.
running
[I 2024-08-14 04:58:30,303] Trial 50 finished with value: 0.04614689068061415 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'median', 'n_nearest_features': 8, 'imputation_order': 'ascending'}. Best is trial 50 with value: 0.04614689068061415.
running
[I 2024-08-14 04:58:49,984] Trial 52 finished with value: 0.04811365577860607 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'constant', 'n_nearest_features': 8, 'imputation_order': 'arabic'}. Best is trial 50 with value: 0.04614689068061415.
running
[I 2024-08-14 04:58:53,283] Trial 48 finished with value: 0.047740233514887924 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 8, 'imputation_order': 'ascending'}. Best is trial 50 with value: 0.04614689068061415.
running
[I 2024-08-14 04:58:57,617] Trial 53 finished with value: 0.04738469951044859 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'median', 'n_nearest_features': 8, 'imputation_order': 'arabic'}. Best is trial 50 with value: 0.04614689068061415.
running
[I 2024-08-14 04:59:12,076] Trial 54 finished with value: 0.04687057736636019 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'median', 'n_nearest_features': 8, 'imputation_order': 'arabic'}. Best is trial 50 with value: 0.04614689068061415.
[I 2024-08-14 04:59:12,221] Trial 55 finished with value: 0.04709027078222117 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'median', 'n_nearest_features': 8, 'imputation_order': 'arabic'}. Best is trial 50 with value: 0.04614689068061415.
running
running
[I 2024-08-14 04:59:12,589] Trial 69 finished with value: 0.2831384870059776 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'constant'}. Best is trial 50 with value: 0.04614689068061415.
running
[I 2024-08-14 04:59:12,819] Trial 68 finished with value: 0.2831384870059776 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'constant'}. Best is trial 50 with value: 0.04614689068061415.
running
[I 2024-08-14 04:59:17,124] Trial 56 finished with value: 0.04704980155386191 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'median', 'n_nearest_features': 8, 'imputation_order': 'ascending'}. Best is trial 50 with value: 0.04614689068061415.
running
[I 2024-08-14 04:59:17,644] Trial 57 finished with value: 0.048239640865714584 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'median', 'n_nearest_features': 8, 'imputation_order': 'arabic'}. Best is trial 50 with value: 0.04614689068061415.
running
[I 2024-08-14 05:04:29,963] Trial 28 finished with value: 0.04640918199957238 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'median', 'n_nearest_features': 10, 'imputation_order': 'ascending'}. Best is trial 50 with value: 0.04614689068061415.
running
[I 2024-08-14 05:05:02,044] Trial 43 finished with value: 0.04594420520632447 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 10, 'imputation_order': 'roman'}. Best is trial 43 with value: 0.04594420520632447.
running
[I 2024-08-14 05:05:03,250] Trial 44 finished with value: 0.04619042058873145 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'median', 'n_nearest_features': 10, 'imputation_order': 'ascending'}. Best is trial 43 with value: 0.04594420520632447.
running
[I 2024-08-14 05:07:04,147] Trial 58 finished with value: 0.04670484670403837 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'median', 'n_nearest_features': 8, 'imputation_order': 'arabic'}. Best is trial 43 with value: 0.04594420520632447.
running
[I 2024-08-14 05:07:42,522] Trial 59 finished with value: 0.04756778382872569 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'median', 'n_nearest_features': 8, 'imputation_order': 'arabic'}. Best is trial 43 with value: 0.04594420520632447.
running
[I 2024-08-14 05:52:26,168] Trial 65 finished with value: 0.04714027475341877 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 7, 'imputation_order': 'arabic'}. Best is trial 43 with value: 0.04594420520632447.
running
[I 2024-08-14 05:52:39,055] Trial 67 finished with value: 0.04766258419913841 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 7, 'imputation_order': 'arabic'}. Best is trial 43 with value: 0.04594420520632447.
running
[I 2024-08-14 05:53:00,967] Trial 71 finished with value: 0.04765542795869969 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'median', 'n_nearest_features': 7, 'imputation_order': 'arabic'}. Best is trial 43 with value: 0.04594420520632447.
running
[I 2024-08-14 05:53:12,959] Trial 72 finished with value: 0.047438093605001244 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'median', 'n_nearest_features': 7, 'imputation_order': 'arabic'}. Best is trial 43 with value: 0.04594420520632447.
running
[I 2024-08-14 05:53:16,681] Trial 70 finished with value: 0.04773830986770023 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'median', 'n_nearest_features': 7, 'imputation_order': 'arabic'}. Best is trial 43 with value: 0.04594420520632447.
running
[I 2024-08-14 05:53:39,250] Trial 83 finished with value: 0.05251699384200346 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'most_frequent', 'n_nearest_features': 9, 'imputation_order': 'ascending'}. Best is trial 43 with value: 0.04594420520632447.
running
[I 2024-08-14 05:53:41,022] Trial 73 finished with value: 0.04649501125791807 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'median', 'n_nearest_features': 7, 'imputation_order': 'arabic'}. Best is trial 43 with value: 0.04594420520632447.
running
[I 2024-08-14 05:53:44,216] Trial 84 finished with value: 0.04919492038478701 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 221, 'weights': 'distance'}. Best is trial 43 with value: 0.04594420520632447.
running
[I 2024-08-14 05:53:44,956] Trial 85 finished with value: 0.045636664366721875 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 72, 'weights': 'distance'}. Best is trial 85 with value: 0.045636664366721875.
running
[I 2024-08-14 05:53:47,021] Trial 87 finished with value: 0.06093671398838969 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 1553, 'weights': 'distance'}. Best is trial 85 with value: 0.045636664366721875.
running
[I 2024-08-14 05:53:49,310] Trial 88 finished with value: 0.06252597734936576 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 1950, 'weights': 'distance'}. Best is trial 85 with value: 0.045636664366721875.
running
[I 2024-08-14 05:53:51,497] Trial 89 finished with value: 0.046893409604110856 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 126, 'weights': 'distance'}. Best is trial 85 with value: 0.045636664366721875.
running
[I 2024-08-14 05:54:26,734] Trial 90 finished with value: 0.3236242039980699 and parameters: {'model_name': 'GAIN', 'batch_size': 701, 'hint_rate': 0.01582079595887348, 'alpha': 3, 'iterations': 380, 'learning_rate': 0.07925990747674015, 'p_miss': 0.21808788790230543}. Best is trial 85 with value: 0.045636664366721875.
running
[I 2024-08-14 05:54:29,556] Trial 91 finished with value: 0.05553472552399399 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 726, 'weights': 'distance'}. Best is trial 85 with value: 0.045636664366721875.
running
[I 2024-08-14 05:58:21,080] Trial 74 finished with value: 0.046685797215132704 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'median', 'n_nearest_features': 7, 'imputation_order': 'ascending'}. Best is trial 85 with value: 0.045636664366721875.
running
[I 2024-08-14 05:58:42,177] Trial 60 finished with value: 0.04627556124117878 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'median', 'n_nearest_features': 8, 'imputation_order': 'ascending'}. Best is trial 85 with value: 0.045636664366721875.
running
[I 2024-08-14 05:58:42,453] Trial 94 finished with value: 0.07683810131816869 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 85 with value: 0.045636664366721875.
running
[I 2024-08-14 05:58:46,024] Trial 61 finished with value: 0.04667670650534765 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'median', 'n_nearest_features': 8, 'imputation_order': 'arabic'}. Best is trial 85 with value: 0.045636664366721875.
running
[I 2024-08-14 05:59:00,264] Trial 63 finished with value: 0.04724784846689285 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'median', 'n_nearest_features': 8, 'imputation_order': 'arabic'}. Best is trial 85 with value: 0.045636664366721875.
running
[I 2024-08-14 05:59:06,321] Trial 75 finished with value: 0.04662180650997567 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 7, 'imputation_order': 'arabic'}. Best is trial 85 with value: 0.045636664366721875.
running
[I 2024-08-14 05:59:21,986] Trial 64 finished with value: 0.04635139590458601 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'median', 'n_nearest_features': 8, 'imputation_order': 'arabic'}. Best is trial 85 with value: 0.045636664366721875.
running
[I 2024-08-14 05:59:38,442] Trial 66 finished with value: 0.04712960557507818 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 8, 'imputation_order': 'arabic'}. Best is trial 85 with value: 0.045636664366721875.
running
[I 2024-08-14 05:59:50,529] Trial 99 finished with value: 0.05063553638746147 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'median', 'n_nearest_features': 9, 'imputation_order': 'ascending'}. Best is trial 85 with value: 0.045636664366721875.
running
[I 2024-08-14 06:00:01,341] Trial 100 finished with value: 0.052594184824406295 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'mean', 'n_nearest_features': 9, 'imputation_order': 'ascending'}. Best is trial 85 with value: 0.045636664366721875.
running
[I 2024-08-14 06:00:04,289] Trial 102 finished with value: 0.06228791647746305 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 1886, 'weights': 'distance'}. Best is trial 85 with value: 0.045636664366721875.
running
[I 2024-08-14 06:00:04,752] Trial 103 finished with value: 0.28166795645009624 and parameters: {'model_name': 'GAIN', 'batch_size': 92, 'hint_rate': 0.968285762464002, 'alpha': 100, 'iterations': 1, 'learning_rate': 0.019708967373129112, 'p_miss': 0.013509599643561104}. Best is trial 85 with value: 0.045636664366721875.
running
[I 2024-08-14 06:11:41,652] Trial 76 finished with value: 0.04712717045059019 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'median', 'n_nearest_features': 9, 'imputation_order': 'arabic'}. Best is trial 85 with value: 0.045636664366721875.
running
[I 2024-08-14 06:13:48,383] Trial 77 finished with value: 0.04605209008712924 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 9, 'imputation_order': 'ascending'}. Best is trial 85 with value: 0.045636664366721875.
running
[I 2024-08-14 06:14:27,731] Trial 78 finished with value: 0.04581816307517968 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 9, 'imputation_order': 'ascending'}. Best is trial 85 with value: 0.045636664366721875.
running
[I 2024-08-14 06:26:14,665] Trial 106 finished with value: 0.08492294103301419 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'mean', 'n_nearest_features': 1, 'imputation_order': 'ascending'}. Best is trial 85 with value: 0.045636664366721875.
running
[I 2024-08-14 06:46:23,237] Trial 104 finished with value: 0.049005170290646695 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'median', 'n_nearest_features': 6, 'imputation_order': 'ascending'}. Best is trial 85 with value: 0.045636664366721875.
running
[I 2024-08-14 06:58:17,361] Trial 105 finished with value: 0.04779440120892403 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'mean', 'n_nearest_features': 6, 'imputation_order': 'descending'}. Best is trial 85 with value: 0.045636664366721875.
running
[I 2024-08-14 06:58:33,136] Trial 79 finished with value: 0.04531276665491983 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 9, 'imputation_order': 'ascending'}. Best is trial 79 with value: 0.04531276665491983.
running
[I 2024-08-14 06:59:32,363] Trial 80 finished with value: 0.04614338129711622 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'median', 'n_nearest_features': 9, 'imputation_order': 'ascending'}. Best is trial 79 with value: 0.04531276665491983.
running
[I 2024-08-14 06:59:33,634] Trial 81 finished with value: 0.04599305474398045 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 9, 'imputation_order': 'ascending'}. Best is trial 79 with value: 0.04531276665491983.
running
[I 2024-08-14 06:59:34,754] Trial 82 finished with value: 0.046482550718609635 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 9, 'imputation_order': 'ascending'}. Best is trial 79 with value: 0.04531276665491983.
running
[I 2024-08-14 06:59:52,092] Trial 86 finished with value: 0.04602082323461617 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'median', 'n_nearest_features': 9, 'imputation_order': 'ascending'}. Best is trial 79 with value: 0.04531276665491983.
running
[I 2024-08-14 07:00:33,440] Trial 92 finished with value: 0.04613502256326914 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 9, 'imputation_order': 'ascending'}. Best is trial 79 with value: 0.04531276665491983.
running
[I 2024-08-14 07:04:15,335] Trial 93 finished with value: 0.046856946783545766 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 9, 'imputation_order': 'ascending'}. Best is trial 79 with value: 0.04531276665491983.
running
[I 2024-08-14 07:04:39,713] Trial 95 finished with value: 0.04579798572979216 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'mean', 'n_nearest_features': 9, 'imputation_order': 'ascending'}. Best is trial 79 with value: 0.04531276665491983.
running
[I 2024-08-14 07:04:52,570] Trial 96 finished with value: 0.04588424563683774 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'mean', 'n_nearest_features': 9, 'imputation_order': 'ascending'}. Best is trial 79 with value: 0.04531276665491983.
running
[I 2024-08-14 07:05:01,921] Trial 98 finished with value: 0.04562902013376345 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'mean', 'n_nearest_features': 9, 'imputation_order': 'ascending'}. Best is trial 79 with value: 0.04531276665491983.
running
[I 2024-08-14 07:05:07,427] Trial 97 finished with value: 0.04586927877475216 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 9, 'imputation_order': 'ascending'}. Best is trial 79 with value: 0.04531276665491983.
running
[I 2024-08-14 07:05:38,736] Trial 101 finished with value: 0.0462380775176228 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'mean', 'n_nearest_features': 9, 'imputation_order': 'ascending'}. Best is trial 79 with value: 0.04531276665491983.
running
[I 2024-08-14 07:05:41,144] Trial 122 finished with value: 0.0674784973321503 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 4898, 'weights': 'distance'}. Best is trial 79 with value: 0.04531276665491983.
running
[I 2024-08-14 07:06:32,885] Trial 123 finished with value: 0.0517131696419225 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Bayesian', 'initial_strategy': 'mean', 'n_nearest_features': 10, 'imputation_order': 'ascending', 'sample_posterior': False}. Best is trial 79 with value: 0.04531276665491983.
running
[I 2024-08-14 07:20:53,393] Trial 107 finished with value: 0.04646540643546509 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 9, 'imputation_order': 'ascending'}. Best is trial 79 with value: 0.04531276665491983.
running
[I 2024-08-14 07:32:33,023] Trial 108 finished with value: 0.046178334334656665 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 9, 'imputation_order': 'ascending'}. Best is trial 79 with value: 0.04531276665491983.
running
[I 2024-08-14 07:35:02,231] Trial 125 finished with value: 0.3097212107829294 and parameters: {'model_name': 'GAIN', 'batch_size': 992, 'hint_rate': 0.5851067998524092, 'alpha': 37, 'iterations': 9010, 'learning_rate': 0.0008082984926149976, 'p_miss': 0.11710922942783833}. Best is trial 79 with value: 0.04531276665491983.
running
[I 2024-08-14 07:52:38,684] Trial 109 finished with value: 0.045750664997240585 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 9, 'imputation_order': 'ascending'}. Best is trial 79 with value: 0.04531276665491983.
running
[I 2024-08-14 08:04:32,455] Trial 110 finished with value: 0.04684489805663972 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 9, 'imputation_order': 'ascending'}. Best is trial 79 with value: 0.04531276665491983.
running
[I 2024-08-14 08:05:03,381] Trial 111 finished with value: 0.045885271239708716 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 9, 'imputation_order': 'ascending'}. Best is trial 79 with value: 0.04531276665491983.
running
[I 2024-08-14 08:05:53,916] Trial 113 finished with value: 0.04738311229515045 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 9, 'imputation_order': 'ascending'}. Best is trial 79 with value: 0.04531276665491983.
running
[I 2024-08-14 08:06:17,362] Trial 112 finished with value: 0.04599009205225288 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 9, 'imputation_order': 'ascending'}. Best is trial 79 with value: 0.04531276665491983.
running
[I 2024-08-14 08:06:17,692] Trial 132 finished with value: 0.07603965402275319 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'mean'}. Best is trial 79 with value: 0.04531276665491983.
running
[I 2024-08-14 08:06:20,759] Trial 114 finished with value: 0.0463155875714596 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 9, 'imputation_order': 'ascending'}. Best is trial 79 with value: 0.04531276665491983.
running
[I 2024-08-14 08:06:29,855] Trial 115 finished with value: 0.04644559574861995 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 9, 'imputation_order': 'ascending'}. Best is trial 79 with value: 0.04531276665491983.
running
[I 2024-08-14 08:06:54,600] Trial 134 finished with value: 0.05216763293315289 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Ridge', 'initial_strategy': 'mean', 'n_nearest_features': 10, 'imputation_order': 'roman'}. Best is trial 79 with value: 0.04531276665491983.
running
[I 2024-08-14 08:06:59,490] Trial 135 finished with value: 0.05216763293315289 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Ridge', 'initial_strategy': 'mean', 'n_nearest_features': 10, 'imputation_order': 'roman'}. Best is trial 79 with value: 0.04531276665491983.
running
[I 2024-08-14 08:07:16,575] Trial 116 finished with value: 0.04676093561931128 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 9, 'imputation_order': 'ascending'}. Best is trial 79 with value: 0.04531276665491983.
running
[I 2024-08-14 08:10:50,489] Trial 117 finished with value: 0.04573795826726609 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 9, 'imputation_order': 'ascending'}. Best is trial 79 with value: 0.04531276665491983.
running
[I 2024-08-14 08:11:08,855] Trial 118 finished with value: 0.04579490076601165 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 9, 'imputation_order': 'ascending'}. Best is trial 79 with value: 0.04531276665491983.
running
[I 2024-08-14 08:11:35,771] Trial 119 finished with value: 0.04541301997502873 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'mean', 'n_nearest_features': 9, 'imputation_order': 'ascending'}. Best is trial 79 with value: 0.04531276665491983.
running
[I 2024-08-14 08:12:04,725] Trial 121 finished with value: 0.04591346436754956 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'mean', 'n_nearest_features': 9, 'imputation_order': 'roman'}. Best is trial 79 with value: 0.04531276665491983.
running
[I 2024-08-14 08:12:12,540] Trial 120 finished with value: 0.04673726729410201 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'mean', 'n_nearest_features': 9, 'imputation_order': 'roman'}. Best is trial 79 with value: 0.04531276665491983.
running
[I 2024-08-14 08:13:06,485] Trial 143 finished with value: 0.051717792985188596 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Bayesian', 'initial_strategy': 'mean', 'n_nearest_features': 10, 'imputation_order': 'random', 'sample_posterior': False}. Best is trial 79 with value: 0.04531276665491983.
running
[I 2024-08-14 08:13:07,882] Trial 124 finished with value: 0.04605299006212439 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'mean', 'n_nearest_features': 9, 'imputation_order': 'roman'}. Best is trial 79 with value: 0.04531276665491983.
running
[I 2024-08-14 08:13:10,822] Trial 145 finished with value: 0.05375134190797558 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 543, 'weights': 'distance'}. Best is trial 79 with value: 0.04531276665491983.
running
[I 2024-08-14 08:38:31,553] Trial 126 finished with value: 0.046431526400387134 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'mean', 'n_nearest_features': 9, 'imputation_order': 'roman'}. Best is trial 79 with value: 0.04531276665491983.
running
[I 2024-08-14 08:40:50,624] Trial 127 finished with value: 0.046097304607678566 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'mean', 'n_nearest_features': 9, 'imputation_order': 'roman'}. Best is trial 79 with value: 0.04531276665491983.
running
[I 2024-08-14 08:58:26,228] Trial 128 finished with value: 0.04689933180823352 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'mean', 'n_nearest_features': 10, 'imputation_order': 'roman'}. Best is trial 79 with value: 0.04531276665491983.
running
[I 2024-08-14 09:10:05,958] Trial 129 finished with value: 0.04628423935115254 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'mean', 'n_nearest_features': 10, 'imputation_order': 'roman'}. Best is trial 79 with value: 0.04531276665491983.
running
[I 2024-08-14 09:10:49,381] Trial 130 finished with value: 0.04578120081559868 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'mean', 'n_nearest_features': 10, 'imputation_order': 'roman'}. Best is trial 79 with value: 0.04531276665491983.
running
[I 2024-08-14 09:11:37,075] Trial 131 finished with value: 0.04554918620694159 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'mean', 'n_nearest_features': 10, 'imputation_order': 'roman'}. Best is trial 79 with value: 0.04531276665491983.
running
[I 2024-08-14 09:11:58,826] Trial 133 finished with value: 0.046074201995298866 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'mean', 'n_nearest_features': 10, 'imputation_order': 'roman'}. Best is trial 79 with value: 0.04531276665491983.
running
[I 2024-08-14 09:12:18,385] Trial 136 finished with value: 0.04677084362837709 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'mean', 'n_nearest_features': 10, 'imputation_order': 'random'}. Best is trial 79 with value: 0.04531276665491983.
running
[I 2024-08-14 09:12:24,930] Trial 137 finished with value: 0.04687080177577253 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'mean', 'n_nearest_features': 10, 'imputation_order': 'random'}. Best is trial 79 with value: 0.04531276665491983.
running
[I 2024-08-14 09:12:25,161] Trial 155 finished with value: 0.07683810131816869 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 79 with value: 0.04531276665491983.
running
[I 2024-08-14 09:12:33,059] Trial 138 finished with value: 0.046085923191420616 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'mean', 'n_nearest_features': 10, 'imputation_order': 'descending'}. Best is trial 79 with value: 0.04531276665491983.
running
[I 2024-08-14 09:16:06,907] Trial 139 finished with value: 0.04618556503938855 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 10, 'imputation_order': 'random'}. Best is trial 79 with value: 0.04531276665491983.
running
[I 2024-08-14 09:16:19,768] Trial 140 finished with value: 0.046606730674985164 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'mean', 'n_nearest_features': 10, 'imputation_order': 'random'}. Best is trial 79 with value: 0.04531276665491983.
running
[I 2024-08-14 09:16:36,332] Trial 159 finished with value: 0.05933993906796745 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'mean', 'n_nearest_features': 4, 'imputation_order': 'ascending'}. Best is trial 79 with value: 0.04531276665491983.
running
[I 2024-08-14 09:17:04,270] Trial 141 finished with value: 0.04604345012832077 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'mean', 'n_nearest_features': 10, 'imputation_order': 'random'}. Best is trial 79 with value: 0.04531276665491983.
running
[I 2024-08-14 09:17:41,770] Trial 142 finished with value: 0.04744334782141142 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'mean', 'n_nearest_features': 10, 'imputation_order': 'random'}. Best is trial 79 with value: 0.04531276665491983.
running
[I 2024-08-14 09:17:44,508] Trial 162 finished with value: 0.26337363061349395 and parameters: {'model_name': 'GAIN', 'batch_size': 3, 'hint_rate': 0.24046904512801415, 'alpha': 5, 'iterations': 7, 'learning_rate': 0.014700114078997144, 'p_miss': 0.2871798332297778}. Best is trial 79 with value: 0.04531276665491983.
running
[I 2024-08-14 09:17:46,914] Trial 163 finished with value: 0.05992658559958296 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 1356, 'weights': 'distance'}. Best is trial 79 with value: 0.04531276665491983.
running
[I 2024-08-14 09:18:07,856] Trial 146 finished with value: 0.04708240152607196 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'mean', 'n_nearest_features': 10, 'imputation_order': 'descending'}. Best is trial 79 with value: 0.04531276665491983.
running
[I 2024-08-14 09:18:26,898] Trial 144 finished with value: 0.04599364946410551 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'mean', 'n_nearest_features': 10, 'imputation_order': 'descending'}. Best is trial 79 with value: 0.04531276665491983.
running
[I 2024-08-14 09:32:24,097] Trial 149 finished with value: 0.05276422974177386 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 4, 'imputation_order': 'descending'}. Best is trial 79 with value: 0.04531276665491983.
running
[I 2024-08-14 09:40:07,447] Trial 157 finished with value: 0.05313048262142282 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'mean', 'n_nearest_features': 3, 'imputation_order': 'ascending'}. Best is trial 79 with value: 0.04531276665491983.
running
[I 2024-08-14 09:44:39,014] Trial 147 finished with value: 0.04570600896774715 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'mean', 'n_nearest_features': 10, 'imputation_order': 'random'}. Best is trial 79 with value: 0.04531276665491983.
running
[I 2024-08-14 09:46:32,162] Trial 154 finished with value: 0.05398155121624911 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 4, 'imputation_order': 'descending'}. Best is trial 79 with value: 0.04531276665491983.
running
[I 2024-08-14 09:46:50,458] Trial 148 finished with value: 0.046150885297134694 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'mean', 'n_nearest_features': 10, 'imputation_order': 'descending'}. Best is trial 79 with value: 0.04531276665491983.
running
[I 2024-08-14 09:51:00,100] Trial 150 finished with value: 0.052742411610142814 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 5, 'imputation_order': 'descending'}. Best is trial 79 with value: 0.04531276665491983.
running
[I 2024-08-14 09:51:27,611] Trial 151 finished with value: 0.047930671389994566 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'mean', 'n_nearest_features': 5, 'imputation_order': 'random'}. Best is trial 79 with value: 0.04531276665491983.
running
[I 2024-08-14 10:18:00,886] Trial 152 finished with value: 0.046587959921948884 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'mean', 'n_nearest_features': 10, 'imputation_order': 'descending'}. Best is trial 79 with value: 0.04531276665491983.
running
[I 2024-08-14 10:18:12,486] Trial 153 finished with value: 0.0467920787785221 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'mean', 'n_nearest_features': 10, 'imputation_order': 'descending'}. Best is trial 79 with value: 0.04531276665491983.
running
[I 2024-08-14 10:18:29,118] Trial 156 finished with value: 0.04708216886283569 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'mean', 'n_nearest_features': 10, 'imputation_order': 'descending'}. Best is trial 79 with value: 0.04531276665491983.
running
[I 2024-08-14 10:22:01,069] Trial 158 finished with value: 0.04628865401913065 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'mean', 'n_nearest_features': 9, 'imputation_order': 'ascending'}. Best is trial 79 with value: 0.04531276665491983.
running
[I 2024-08-14 10:22:34,889] Trial 160 finished with value: 0.04588270035468607 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 9, 'imputation_order': 'ascending'}. Best is trial 79 with value: 0.04531276665491983.
running
[I 2024-08-14 10:23:03,891] Trial 161 finished with value: 0.045723477574241354 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 9, 'imputation_order': 'ascending'}. Best is trial 79 with value: 0.04531276665491983.
running
[I 2024-08-14 10:23:44,244] Trial 164 finished with value: 0.04563231887183934 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 9, 'imputation_order': 'ascending'}. Best is trial 79 with value: 0.04531276665491983.
running
[I 2024-08-14 10:24:28,208] Trial 165 finished with value: 0.045342877497164244 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 9, 'imputation_order': 'ascending'}. Best is trial 79 with value: 0.04531276665491983.
running
[I 2024-08-14 10:24:33,029] Trial 181 finished with value: 0.06329577203268082 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 2171, 'weights': 'distance'}. Best is trial 79 with value: 0.04531276665491983.
running
[I 2024-08-14 10:24:35,920] Trial 180 finished with value: 0.05171111096529678 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Bayesian', 'initial_strategy': 'most_frequent', 'n_nearest_features': 9, 'imputation_order': 'ascending', 'sample_posterior': False}. Best is trial 79 with value: 0.04531276665491983.
running
[I 2024-08-14 10:25:00,233] Trial 166 finished with value: 0.04660172218637665 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 9, 'imputation_order': 'ascending'}. Best is trial 79 with value: 0.04531276665491983.
running
[I 2024-08-14 10:38:17,413] Trial 167 finished with value: 0.04638736523190295 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 9, 'imputation_order': 'ascending'}. Best is trial 79 with value: 0.04531276665491983.
running
[I 2024-08-14 10:38:29,590] Trial 185 finished with value: 0.05251699384200346 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'most_frequent', 'n_nearest_features': 9, 'imputation_order': 'ascending'}. Best is trial 79 with value: 0.04531276665491983.
running
[I 2024-08-14 10:45:43,424] Trial 168 finished with value: 0.04585408756112889 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 9, 'imputation_order': 'roman'}. Best is trial 79 with value: 0.04531276665491983.
running
[I 2024-08-14 10:50:04,524] Trial 169 finished with value: 0.047199242711540704 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 9, 'imputation_order': 'ascending'}. Best is trial 79 with value: 0.04531276665491983.
running
[I 2024-08-14 10:52:02,147] Trial 170 finished with value: 0.04578771708848702 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 9, 'imputation_order': 'ascending'}. Best is trial 79 with value: 0.04531276665491983.
running
[I 2024-08-14 10:52:23,349] Trial 171 finished with value: 0.046412879209285565 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 9, 'imputation_order': 'ascending'}. Best is trial 79 with value: 0.04531276665491983.
running
[I 2024-08-14 10:56:32,052] Trial 172 finished with value: 0.04612696386115657 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 9, 'imputation_order': 'ascending'}. Best is trial 79 with value: 0.04531276665491983.
running
[I 2024-08-14 10:56:55,772] Trial 173 finished with value: 0.046435519928434664 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 9, 'imputation_order': 'ascending'}. Best is trial 79 with value: 0.04531276665491983.
running
[I 2024-08-14 11:23:32,252] Trial 174 finished with value: 0.04573855157159579 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 9, 'imputation_order': 'ascending'}. Best is trial 79 with value: 0.04531276665491983.
running
[I 2024-08-14 11:23:42,602] Trial 175 finished with value: 0.04672597461885659 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 9, 'imputation_order': 'ascending'}. Best is trial 79 with value: 0.04531276665491983.
running
[I 2024-08-14 11:23:42,866] Trial 194 finished with value: 0.2831384870059776 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'most_frequent'}. Best is trial 79 with value: 0.04531276665491983.
running
[I 2024-08-14 11:24:09,312] Trial 176 finished with value: 0.04649436609821163 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 9, 'imputation_order': 'ascending'}. Best is trial 79 with value: 0.04531276665491983.
running
[I 2024-08-14 11:24:12,964] Trial 195 finished with value: 0.3066263386293787 and parameters: {'model_name': 'GAIN', 'batch_size': 82, 'hint_rate': 0.5117395940225159, 'alpha': 77, 'iterations': 380, 'learning_rate': 0.001479551543623101, 'p_miss': 0.1963214853103249}. Best is trial 79 with value: 0.04531276665491983.
running
[I 2024-08-14 11:27:37,527] Trial 177 finished with value: 0.04570129900363325 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 9, 'imputation_order': 'ascending'}. Best is trial 79 with value: 0.04531276665491983.
running
[I 2024-08-14 11:28:06,627] Trial 178 finished with value: 0.045852115639482924 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 9, 'imputation_order': 'ascending'}. Best is trial 79 with value: 0.04531276665491983.
running
[I 2024-08-14 11:28:36,196] Trial 179 finished with value: 0.04658504382318186 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 9, 'imputation_order': 'ascending'}. Best is trial 79 with value: 0.04531276665491983.
[I 2024-08-14 11:29:35,340] Trial 182 finished with value: 0.047121903544646085 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 9, 'imputation_order': 'ascending'}. Best is trial 79 with value: 0.04531276665491983.
[I 2024-08-14 11:29:50,782] Trial 183 finished with value: 0.04636064609110989 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 9, 'imputation_order': 'ascending'}. Best is trial 79 with value: 0.04531276665491983.
[I 2024-08-14 11:30:07,751] Trial 184 finished with value: 0.04570831512592347 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 9, 'imputation_order': 'ascending'}. Best is trial 79 with value: 0.04531276665491983.
[I 2024-08-14 11:42:46,874] Trial 186 finished with value: 0.045949051743010415 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 9, 'imputation_order': 'ascending'}. Best is trial 79 with value: 0.04531276665491983.
[I 2024-08-14 11:49:37,252] Trial 187 finished with value: 0.04687191779109877 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 9, 'imputation_order': 'ascending'}. Best is trial 79 with value: 0.04531276665491983.
[I 2024-08-14 11:49:47,226] Trial 190 finished with value: 0.04626914767945463 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 8, 'imputation_order': 'ascending'}. Best is trial 79 with value: 0.04531276665491983.
[I 2024-08-14 11:53:29,471] Trial 191 finished with value: 0.046224242186439925 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 8, 'imputation_order': 'ascending'}. Best is trial 79 with value: 0.04531276665491983.
[I 2024-08-14 11:53:46,438] Trial 188 finished with value: 0.0473219958712172 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 9, 'imputation_order': 'ascending'}. Best is trial 79 with value: 0.04531276665491983.
[I 2024-08-14 11:53:54,032] Trial 192 finished with value: 0.045958588745313673 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 8, 'imputation_order': 'ascending'}. Best is trial 79 with value: 0.04531276665491983.
[I 2024-08-14 11:55:28,041] Trial 189 finished with value: 0.046304288516690426 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 9, 'imputation_order': 'ascending'}. Best is trial 79 with value: 0.04531276665491983.
[I 2024-08-14 12:18:31,286] Trial 193 finished with value: 0.046971181367817735 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 8, 'imputation_order': 'ascending'}. Best is trial 79 with value: 0.04531276665491983.
[I 2024-08-14 12:19:05,904] Trial 197 finished with value: 0.04753931917899189 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 8, 'imputation_order': 'ascending'}. Best is trial 79 with value: 0.04531276665491983.
[I 2024-08-14 12:19:08,441] Trial 196 finished with value: 0.04723037669810332 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 8, 'imputation_order': 'ascending'}. Best is trial 79 with value: 0.04531276665491983.
[I 2024-08-14 12:22:16,678] Trial 198 finished with value: 0.046717700233757785 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 8, 'imputation_order': 'ascending'}. Best is trial 79 with value: 0.04531276665491983.
[I 2024-08-14 12:22:34,639] Trial 199 finished with value: 0.04741085141951413 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 8, 'imputation_order': 'ascending'}. Best is trial 79 with value: 0.04531276665491983.
fit
auto fit
auto transform
0    0
1    0
2    0
3    0
4    0
5    0
6    0
7    0
8    0
9    0
dtype: int64
0    0
1    0
2    0
3    0
4    0
5    0
6    0
7    0
8    0
9    0
dtype: int64
0.04531276665491983
{'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 9, 'imputation_order': 'ascending'}
running experiment 2/3 - Does reconstruction give good automl predictions
Start est fit
  0%|          | 0/25 [00:00<?, ?it/s]Generation:   0%|          | 0/25 [00:00<?, ?it/s]Generation:  1
Best f1_score score: 0.9689651448476664
Generation:   4%|▍         | 1/25 [00:46<18:28, 46.19s/it]Generation:  2
Best f1_score score: 0.9698738088176764
Generation:   8%|▊         | 2/25 [01:24<15:59, 41.73s/it]Generation:  3
Best f1_score score: 0.971049074325953
Generation:  12%|█▏        | 3/25 [01:39<10:49, 29.50s/it]Generation:  4
Best f1_score score: 0.971049074325953
Generation:  16%|█▌        | 4/25 [09:07<1:08:09, 194.74s/it]Generation:  5
Best f1_score score: 0.971049074325953
Generation:  20%|██        | 5/25 [11:20<57:30, 172.54s/it]  Generation:  6
Best f1_score score: 0.971049074325953
Generation:  24%|██▍       | 6/25 [11:44<38:35, 121.89s/it]Generation:  7
Best f1_score score: 0.971049074325953
Generation:  28%|██▊       | 7/25 [13:52<37:08, 123.79s/it]Generation:  8
Best f1_score score: 0.971049074325953
Generation:  32%|███▏      | 8/25 [14:22<26:39, 94.11s/it] Generation:  9
Best f1_score score: 0.971049074325953
Generation:  36%|███▌      | 9/25 [14:49<19:28, 73.01s/it]Generation:  10
Best f1_score score: 0.971049074325953
Generation:  40%|████      | 10/25 [15:10<14:14, 56.98s/it]Generation:  11
Best f1_score score: 0.971049074325953
Generation:  44%|████▍     | 11/25 [15:30<10:39, 45.71s/it]Generation:  12
Best f1_score score: 0.971049074325953
Generation:  48%|████▊     | 12/25 [15:43<07:45, 35.83s/it]Generation:  13
Best f1_score score: 0.971049074325953
Generation:  52%|█████▏    | 13/25 [16:06<06:22, 31.84s/it]Generation:  14
Best f1_score score: 0.971049074325953
Generation:  56%|█████▌    | 14/25 [16:46<06:15, 34.15s/it]Generation:  15
Best f1_score score: 0.971049074325953
Generation:  60%|██████    | 15/25 [21:43<18:55, 113.51s/it]Generation:  16
Best f1_score score: 0.971049074325953
Generation:  64%|██████▍   | 16/25 [22:02<12:44, 84.95s/it] Generation:  17
Best f1_score score: 0.971049074325953
Generation:  68%|██████▊   | 17/25 [22:35<09:16, 69.53s/it]Generation:  18
Best f1_score score: 0.971049074325953
Generation:  72%|███████▏  | 18/25 [23:15<07:03, 60.50s/it]Generation:  19
Best f1_score score: 0.971049074325953
Generation:  76%|███████▌  | 19/25 [23:58<05:31, 55.27s/it]Generation:  20
Best f1_score score: 0.971049074325953
Generation:  80%|████████  | 20/25 [24:27<03:57, 47.56s/it]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x1554754f1360> 
 The 'min_samples_split' parameter of DecisionTreeClassifier must be an int in the range [2, inf) or a float in the range (0.0, 1.0]. Got 1 instead. 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1466, in wrapper
    estimator._validate_params()
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 666, in _validate_params
    validate_parameter_constraints(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/_param_validation.py", line 95, in validate_parameter_constraints
    raise InvalidParameterError(
sklearn.utils._param_validation.InvalidParameterError: The 'min_samples_split' parameter of DecisionTreeClassifier must be an int in the range [2, inf) or a float in the range (0.0, 1.0]. Got 1 instead.

Generation:  21
Best f1_score score: 0.971049074325953
Generation:  84%|████████▍ | 21/25 [25:39<03:39, 54.76s/it]Generation:  22
Best f1_score score: 0.9711566485804275
Generation:  88%|████████▊ | 22/25 [26:10<02:22, 47.65s/it]Generation:  23
Best f1_score score: 0.9711566485804275
Generation:  92%|█████████▏| 23/25 [32:36<04:58, 149.07s/it]Generation:  24
Best f1_score score: 0.9711566485804275
Generation:  96%|█████████▌| 24/25 [32:55<01:50, 110.08s/it]Generation:  25
Best f1_score score: 0.9711566485804275
Generation: 100%|██████████| 25/25 [33:28<00:00, 86.87s/it] Generation: 100%|██████████| 25/25 [33:30<00:00, 80.44s/it]
2024-08-14 13:01:42,789 - distributed.scheduler - ERROR - Removing worker 'tcp://127.0.0.1:33963' caused the cluster to lose scattered data, which can't be recovered: {'ndarray-23f0eef1ec7034d09b67651117ebaf48', 'ndarray-a2ec9f315ffd083a0eb474c9bb9d0d32'} (stimulus_id='handle-worker-cleanup-1723665702.789761')
Fitted
Pipeline(steps=[('lgbmclassifier',
                 LGBMClassifier(class_weight='balanced', max_depth=9,
                                n_estimators=89, n_jobs=1, num_leaves=171,
                                verbose=-1))])
score start
train score: {'auroc': 0.9999763992094316, 'accuracy': 0.9979695431472081, 'balanced_accuracy': 0.998917176620185, 'logloss': 0.008249171495367432, 'f1': 0.99798827132306}
original test score: {'auroc': 0.9970289365412184, 'accuracy': 0.9799270072992701, 'balanced_accuracy': 0.9058388765705839, 'logloss': 0.08933170129407138, 'f1': 0.9803028670001956}
imputed test score: {'auroc': 0.9963315739653666, 'accuracy': 0.9799270072992701, 'balanced_accuracy': 0.9001847745750184, 'logloss': 0.10107283503325318, 'f1': 0.9801697892740087}
score end
check intended
EXP2 Finished
running experiment 3/3 - What is the best automl settings?
<tpot2.search_spaces.pipelines.sequential.SequentialPipeline object at 0x155436506260>
Start tpot fit
  0%|          | 0/25 [00:00<?, ?it/s]Generation:   0%|          | 0/25 [00:00<?, ?it/s]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155475d3a230> 
 Input X contains NaN.
LogisticRegression does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py", line 1223, in fit
    X, y = self._validate_data(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 650, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1301, in check_X_y
    X = check_array(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1064, in check_array
    _assert_all_finite(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 123, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 172, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
LogisticRegression does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

WARNING AN INDIVIDUAL TIMED OUT: 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155475d3b040> 

Generation:  1
Best f1_score score: 0.9691277247022902
Generation:   4%|▍         | 1/25 [10:01<4:00:27, 601.16s/it]Generation:  2
Best f1_score score: 0.9700382139580291
Generation:   8%|▊         | 2/25 [10:43<1:44:30, 272.61s/it]WARNING AN INDIVIDUAL TIMED OUT: 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155475518a60> 

Generation:  3
Best f1_score score: 0.9700382139580291
Generation:  12%|█▏        | 3/25 [20:46<2:35:13, 423.35s/it]Generation:  4
Best f1_score score: 0.9700382139580291
Generation:  16%|█▌        | 4/25 [23:47<1:54:42, 327.72s/it]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155475e02410> 
 Input X contains NaN.
ExtraTreesClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 377, in fit
    estimator._compute_missing_values_in_feature_mask(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/tree/_classes.py", line 214, in _compute_missing_values_in_feature_mask
    assert_all_finite(X, **common_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 213, in assert_all_finite
    _assert_all_finite(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 123, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 172, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
ExtraTreesClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Generation:  5
Best f1_score score: 0.9700382139580291
Generation:  20%|██        | 5/25 [27:28<1:36:20, 289.04s/it]WARNING AN INDIVIDUAL TIMED OUT: 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x15545890ff40> 

Generation:  6
Best f1_score score: 0.9700382139580291
Generation:  24%|██▍       | 6/25 [37:30<2:05:14, 395.49s/it]Generation:  7
Best f1_score score: 0.9703070117761682
Generation:  28%|██▊       | 7/25 [38:21<1:24:54, 283.01s/it]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155456450c40> 
 Input X contains NaN.
ExtraTreesClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 377, in fit
    estimator._compute_missing_values_in_feature_mask(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/tree/_classes.py", line 214, in _compute_missing_values_in_feature_mask
    assert_all_finite(X, **common_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 213, in assert_all_finite
    _assert_all_finite(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 123, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 172, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
ExtraTreesClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Generation:  8
Best f1_score score: 0.9703070117761682
Generation:  32%|███▏      | 8/25 [39:02<58:18, 205.78s/it]  WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x15545df8d2a0> 
 Input X contains NaN.
ExtraTreesClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 377, in fit
    estimator._compute_missing_values_in_feature_mask(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/tree/_classes.py", line 214, in _compute_missing_values_in_feature_mask
    assert_all_finite(X, **common_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 213, in assert_all_finite
    _assert_all_finite(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 123, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 172, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
ExtraTreesClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x15531ec3ec50> 
 Input X contains NaN.
ExtraTreesClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 377, in fit
    estimator._compute_missing_values_in_feature_mask(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/tree/_classes.py", line 214, in _compute_missing_values_in_feature_mask
    assert_all_finite(X, **common_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 213, in assert_all_finite
    _assert_all_finite(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 123, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 172, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
ExtraTreesClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Generation:  9
Best f1_score score: 0.9705905285172637
Generation:  36%|███▌      | 9/25 [39:43<41:11, 154.49s/it]Generation:  10
Best f1_score score: 0.9706488463885281
Generation:  40%|████      | 10/25 [39:59<27:53, 111.57s/it]WARNING AN INDIVIDUAL TIMED OUT: 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155475de9510> 

Generation:  11
Best f1_score score: 0.9706488463885281
Generation:  44%|████▍     | 11/25 [50:02<1:01:07, 262.00s/it]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155475dffb80> 
 Input X contains NaN.
ExtraTreesClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 377, in fit
    estimator._compute_missing_values_in_feature_mask(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/tree/_classes.py", line 214, in _compute_missing_values_in_feature_mask
    assert_all_finite(X, **common_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 213, in assert_all_finite
    _assert_all_finite(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 123, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 172, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
ExtraTreesClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x1554544eb9d0> 
 Input X contains NaN.
ExtraTreesClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 377, in fit
    estimator._compute_missing_values_in_feature_mask(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/tree/_classes.py", line 214, in _compute_missing_values_in_feature_mask
    assert_all_finite(X, **common_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 213, in assert_all_finite
    _assert_all_finite(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 123, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 172, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
ExtraTreesClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155475797ee0> 
 Input X contains NaN.
ExtraTreesClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 377, in fit
    estimator._compute_missing_values_in_feature_mask(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/tree/_classes.py", line 214, in _compute_missing_values_in_feature_mask
    assert_all_finite(X, **common_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 213, in assert_all_finite
    _assert_all_finite(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 123, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 172, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
ExtraTreesClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Generation:  12
Best f1_score score: 0.9709140667447548
Generation:  48%|████▊     | 12/25 [50:50<42:39, 196.92s/it]  WARNING AN INDIVIDUAL TIMED OUT: 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x15545f7c9450> 

Generation:  13
Best f1_score score: 0.9710569413899938
Generation:  52%|█████▏    | 13/25 [1:00:53<1:04:00, 320.05s/it]WARNING AN INDIVIDUAL TIMED OUT: 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x15545deaf790> 

WARNING AN INDIVIDUAL TIMED OUT: 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x15545454e440> 

Generation:  14
Best f1_score score: 0.9710569413899938
Generation:  56%|█████▌    | 14/25 [1:10:58<1:14:26, 406.09s/it]Generation:  15
Best f1_score score: 0.9711351903956242
Generation:  60%|██████    | 15/25 [1:11:13<48:02, 288.24s/it]  WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x15545f6a9bd0> 
 Input X contains NaN.
ExtraTreesClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 377, in fit
    estimator._compute_missing_values_in_feature_mask(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/tree/_classes.py", line 214, in _compute_missing_values_in_feature_mask
    assert_all_finite(X, **common_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 213, in assert_all_finite
    _assert_all_finite(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 123, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 172, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
ExtraTreesClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Generation:  16
Best f1_score score: 0.9711569938549488
Generation:  64%|██████▍   | 16/25 [1:11:29<30:56, 206.32s/it]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155474b38e80> 
 Input X contains NaN.
ExtraTreesClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 377, in fit
    estimator._compute_missing_values_in_feature_mask(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/tree/_classes.py", line 214, in _compute_missing_values_in_feature_mask
    assert_all_finite(X, **common_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 213, in assert_all_finite
    _assert_all_finite(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 123, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 172, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
ExtraTreesClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x1554586d55a0> 
 Input X contains NaN.
ExtraTreesClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 377, in fit
    estimator._compute_missing_values_in_feature_mask(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/tree/_classes.py", line 214, in _compute_missing_values_in_feature_mask
    assert_all_finite(X, **common_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 213, in assert_all_finite
    _assert_all_finite(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 123, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 172, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
ExtraTreesClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

WARNING AN INDIVIDUAL TIMED OUT: 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x15547544c430> 

Generation:  17
Best f1_score score: 0.9714389575892346
Generation:  68%|██████▊   | 17/25 [1:21:33<43:25, 325.67s/it]WARNING AN INDIVIDUAL TIMED OUT: 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155474df7790> 

WARNING AN INDIVIDUAL TIMED OUT: 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x15545d834310> 

Generation:  18
Best f1_score score: 0.9714389575892346
Generation:  72%|███████▏  | 18/25 [1:31:37<47:45, 409.37s/it]Generation:  19
Best f1_score score: 0.9716820174071472
Generation:  76%|███████▌  | 19/25 [1:31:55<29:10, 291.76s/it]Generation:  20
Best f1_score score: 0.9719343382468146
Generation:  80%|████████  | 20/25 [1:32:40<18:08, 217.80s/it]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x1554751d03d0> 
 Input X contains NaN.
ExtraTreesClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 377, in fit
    estimator._compute_missing_values_in_feature_mask(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/tree/_classes.py", line 214, in _compute_missing_values_in_feature_mask
    assert_all_finite(X, **common_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 213, in assert_all_finite
    _assert_all_finite(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 123, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 172, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
ExtraTreesClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

WARNING AN INDIVIDUAL TIMED OUT: 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x1554588ea920> 

WARNING AN INDIVIDUAL TIMED OUT: 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x1553197c3c40> 

Generation:  21
Best f1_score score: 0.9719343382468146
Generation:  84%|████████▍ | 21/25 [1:42:44<22:15, 333.75s/it]WARNING AN INDIVIDUAL TIMED OUT: 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x15545dab3760> 

WARNING AN INDIVIDUAL TIMED OUT: 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x15545ee87b80> 

WARNING AN INDIVIDUAL TIMED OUT: 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155475297910> 

Generation:  22
Best f1_score score: 0.9719513505827166
Generation:  88%|████████▊ | 22/25 [1:52:50<20:45, 415.29s/it]WARNING AN INDIVIDUAL TIMED OUT: 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155453f4f100> 

Generation:  23
Best f1_score score: 0.9720602923591215
Generation:  92%|█████████▏| 23/25 [2:02:52<15:43, 471.58s/it]WARNING AN INDIVIDUAL TIMED OUT: 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x15547527db40> 

Generation:  24
Best f1_score score: 0.9720602923591215
Generation:  96%|█████████▌| 24/25 [2:12:55<08:30, 510.83s/it]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155475398f70> 
 Input X contains NaN.
ExtraTreesClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 377, in fit
    estimator._compute_missing_values_in_feature_mask(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/tree/_classes.py", line 214, in _compute_missing_values_in_feature_mask
    assert_all_finite(X, **common_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 213, in assert_all_finite
    _assert_all_finite(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 123, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 172, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
ExtraTreesClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

WARNING AN INDIVIDUAL TIMED OUT: 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x1553ba71e860> 

Generation:  25
Best f1_score score: 0.9720602923591215
Generation: 100%|██████████| 25/25 [2:23:00<00:00, 539.12s/it]Generation: 100%|██████████| 25/25 [2:23:00<00:00, 343.22s/it]
2024-08-14 15:24:54,389 - distributed.scheduler - ERROR - Removing worker 'tcp://127.0.0.1:36379' caused the cluster to lose scattered data, which can't be recovered: {'ndarray-23f0eef1ec7034d09b67651117ebaf48', 'DataFrame-618f8cc01f7f69f6dd1b2e18fc308c93'} (stimulus_id='handle-worker-cleanup-1723674294.3893204')
Fitted
Pipeline(steps=[('iterativeimputer',
                 IterativeImputer(estimator=KNeighborsRegressor(),
                                  imputation_order='roman',
                                  initial_strategy='most_frequent',
                                  n_nearest_features=31)),
                ('extratreesclassifier',
                 ExtraTreesClassifier(criterion='entropy',
                                      max_features=0.8063597867854,
                                      min_samples_split=5, n_jobs=1))])
transform worked
try transform
transform worked
score start
train score: {'auroc': 0.9999700989127757, 'accuracy': 0.9979695431472081, 'balanced_accuracy': 0.9926834886647662, 'logloss': 0.016861474071189222, 'f1': 0.9979737503523467}
test score: {'auroc': 0.9966992331593744, 'accuracy': 0.968978102189781, 'balanced_accuracy': 0.6941241685144124, 'logloss': 0.08349893433219212, 'f1': 0.9665984104452183}
original test score: {'auroc': 0.9971432092283955, 'accuracy': 0.968978102189781, 'balanced_accuracy': 0.6997782705099779, 'logloss': 0.08252953161439956, 'f1': 0.9668298119995208}
score end
30
lvl
0.1
type
MNAR
num_run
3
class_full
finished
all finished
full run takes
11.50218758576446
hours
DONE
