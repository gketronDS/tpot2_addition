Run: 28
/cm/local/apps/slurm/var/spool/job1007823/slurm_script: line 26: 
pip install -e tpot2
pip install -r tpot2/ImputerExperiments/requirements_.txt
: No such file or directory
RunStart
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
starting loops
../data/c/184/184.pkl
working on 
../data/c/184/class_full_MCAR_0.5_2
4.736424207687378
running experiment 1/3 - Does large hyperparameter space improve reconstruction accuracy over simple
[I 2024-10-18 13:12:18,548] A new study created in memory with name: no-name-f28fae32-0c0c-407d-b1d0-30c453f9897e
running
running
running
running
running
running
running
running
running
running
running
running
running
running
running
running
[I 2024-10-18 13:12:18,903] Trial 2 finished with value: 0.43791577519152325 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'constant'}. Best is trial 2 with value: 0.43791577519152325.
running
[I 2024-10-18 13:12:19,468] Trial 8 finished with value: 0.43791577519152325 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'most_frequent'}. Best is trial 2 with value: 0.43791577519152325.
running
[I 2024-10-18 13:12:22,839] Trial 4 finished with value: 0.29313548936220063 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Bayesian', 'initial_strategy': 'mean', 'n_nearest_features': 6, 'imputation_order': 'descending', 'sample_posterior': False}. Best is trial 4 with value: 0.29313548936220063.
running
[I 2024-10-18 13:12:25,824] Trial 17 finished with value: inf and parameters: {'model_name': 'GAIN', 'batch_size': 1, 'hint_rate': 0.8072399318676289, 'alpha': 20, 'iterations': 1, 'learning_rate': 0.0010233445416713916, 'p_miss': 0.016181208573428064}. Best is trial 4 with value: 0.29313548936220063.
running
[I 2024-10-18 13:12:26,284] Trial 16 finished with value: inf and parameters: {'model_name': 'GAIN', 'batch_size': 1, 'hint_rate': 0.9078586653682682, 'alpha': 14, 'iterations': 4, 'learning_rate': 0.09117557235459339, 'p_miss': 0.07491623504216856}. Best is trial 4 with value: 0.29313548936220063.
running
[I 2024-10-18 13:12:27,847] Trial 5 finished with value: 0.25080114889141303 and parameters: {'model_name': 'VAE', 'batch_size': 10, 'iterations': 1, 'learning_rate': 0.025003950113861254, 'p_miss': 0.05649364399556488}. Best is trial 5 with value: 0.25080114889141303.
running
[I 2024-10-18 13:12:28,529] Trial 19 finished with value: 0.2512850133420665 and parameters: {'model_name': 'VAE', 'batch_size': 1, 'iterations': 1, 'learning_rate': 0.0056678906125090505, 'p_miss': 0.27930270564511167}. Best is trial 5 with value: 0.25080114889141303.
running
[I 2024-10-18 13:12:29,928] Trial 9 finished with value: 0.2931090525019625 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 851, 'weights': 'uniform'}. Best is trial 5 with value: 0.25080114889141303.
running
[I 2024-10-18 13:12:31,532] Trial 0 finished with value: 0.4369140192412728 and parameters: {'model_name': 'GAIN', 'batch_size': 38, 'hint_rate': 0.7979538720380944, 'alpha': 82, 'iterations': 4, 'learning_rate': 0.009219300968430492, 'p_miss': 0.2733269530043632}. Best is trial 5 with value: 0.25080114889141303.
running
[I 2024-10-18 13:12:32,088] Trial 13 finished with value: 0.25102102760239686 and parameters: {'model_name': 'VAE', 'batch_size': 506, 'iterations': 1, 'learning_rate': 0.00107725903766984, 'p_miss': 0.10630277900574589}. Best is trial 5 with value: 0.25080114889141303.
running
[I 2024-10-18 13:12:32,636] Trial 11 finished with value: 0.30955276497092327 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 1748, 'weights': 'distance'}. Best is trial 5 with value: 0.25080114889141303.
running
[I 2024-10-18 13:12:35,514] Trial 14 finished with value: 0.2935651240449252 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Bayesian', 'initial_strategy': 'mean', 'n_nearest_features': 1, 'imputation_order': 'ascending', 'sample_posterior': False}. Best is trial 5 with value: 0.25080114889141303.
running
[I 2024-10-18 13:12:37,409] Trial 6 finished with value: 0.25158164319884235 and parameters: {'model_name': 'VAE', 'batch_size': 39, 'iterations': 10, 'learning_rate': 0.0028360411331530447, 'p_miss': 0.013072390099399131}. Best is trial 5 with value: 0.25080114889141303.
[I 2024-10-18 13:12:37,635] Trial 10 finished with value: 0.3095901315795983 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 7363, 'weights': 'distance'}. Best is trial 5 with value: 0.25080114889141303.
running
running
[I 2024-10-18 13:12:44,015] Trial 15 finished with value: 0.2932551179842183 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Bayesian', 'initial_strategy': 'mean', 'n_nearest_features': 3, 'imputation_order': 'roman', 'sample_posterior': False}. Best is trial 5 with value: 0.25080114889141303.
running
[I 2024-10-18 13:12:45,027] Trial 22 finished with value: 0.2947758850050169 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 11309, 'weights': 'uniform'}. Best is trial 5 with value: 0.25080114889141303.
running
[I 2024-10-18 13:12:45,850] Trial 21 finished with value: 0.29315929409994135 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Ridge', 'initial_strategy': 'constant', 'n_nearest_features': 3, 'imputation_order': 'roman'}. Best is trial 5 with value: 0.25080114889141303.
running
[I 2024-10-18 13:12:46,108] Trial 23 finished with value: 0.2946296935508331 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 14887, 'weights': 'uniform'}. Best is trial 5 with value: 0.25080114889141303.
running
[I 2024-10-18 13:12:47,602] Trial 7 finished with value: 0.25412088549684436 and parameters: {'model_name': 'VAE', 'batch_size': 151, 'iterations': 5, 'learning_rate': 0.006247524944947413, 'p_miss': 0.2899181834080865}. Best is trial 5 with value: 0.25080114889141303.
running
[I 2024-10-18 13:12:57,596] Trial 1 finished with value: 0.3137120134562573 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'mean', 'n_nearest_features': 5, 'imputation_order': 'ascending'}. Best is trial 5 with value: 0.25080114889141303.
running
[I 2024-10-18 13:13:03,642] Trial 12 finished with value: 0.4380940809122421 and parameters: {'model_name': 'GAIN', 'batch_size': 216, 'hint_rate': 0.8715520861649625, 'alpha': 95, 'iterations': 61, 'learning_rate': 0.0012712892694624542, 'p_miss': 0.26412095901972216}. Best is trial 5 with value: 0.25080114889141303.
running
[I 2024-10-18 13:13:12,273] Trial 20 finished with value: 0.3780168103660246 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Bayesian', 'initial_strategy': 'most_frequent', 'n_nearest_features': 3, 'imputation_order': 'random', 'sample_posterior': True}. Best is trial 5 with value: 0.25080114889141303.
running
[I 2024-10-18 13:13:37,684] Trial 3 finished with value: inf and parameters: {'model_name': 'GAIN', 'batch_size': 8, 'hint_rate': 0.5975020564096023, 'alpha': 10, 'iterations': 965, 'learning_rate': 0.02300628376336711, 'p_miss': 0.10957174134708948}. Best is trial 5 with value: 0.25080114889141303.
running
[I 2024-10-18 13:13:38,603] Trial 38 finished with value: 0.24768946357464205 and parameters: {'model_name': 'VAE', 'batch_size': 6, 'iterations': 1, 'learning_rate': 0.00012783828133893107, 'p_miss': 0.1826072672622536}. Best is trial 38 with value: 0.24768946357464205.
running
[I 2024-10-18 13:13:39,501] Trial 39 finished with value: 0.2491098128704153 and parameters: {'model_name': 'VAE', 'batch_size': 7, 'iterations': 1, 'learning_rate': 0.00010029601278818174, 'p_miss': 0.18340973699286084}. Best is trial 38 with value: 0.24768946357464205.
running
[I 2024-10-18 13:14:06,431] Trial 40 finished with value: 0.24646520365270908 and parameters: {'model_name': 'VAE', 'batch_size': 5, 'iterations': 42, 'learning_rate': 0.00010815278972953435, 'p_miss': 0.19447896510438628}. Best is trial 40 with value: 0.24646520365270908.
running
[I 2024-10-18 13:25:12,176] Trial 18 finished with value: 0.43657819375335594 and parameters: {'model_name': 'GAIN', 'batch_size': 396, 'hint_rate': 0.7963540571764463, 'alpha': 79, 'iterations': 2474, 'learning_rate': 0.0032826777947155814, 'p_miss': 0.13376418022700295}. Best is trial 40 with value: 0.24646520365270908.
running
[I 2024-10-18 13:26:51,142] Trial 42 finished with value: 0.24838848669471852 and parameters: {'model_name': 'VAE', 'batch_size': 5, 'iterations': 165, 'learning_rate': 0.00012298241980955924, 'p_miss': 0.20152998992791107}. Best is trial 40 with value: 0.24646520365270908.
running
[I 2024-10-18 13:29:52,045] Trial 43 finished with value: 0.24842355692549045 and parameters: {'model_name': 'VAE', 'batch_size': 3, 'iterations': 241, 'learning_rate': 0.00010664682385814086, 'p_miss': 0.2013429919058495}. Best is trial 40 with value: 0.24646520365270908.
running
[I 2024-10-18 13:30:26,453] Trial 44 finished with value: 0.251884697503023 and parameters: {'model_name': 'VAE', 'batch_size': 3, 'iterations': 42, 'learning_rate': 0.00032073546208509593, 'p_miss': 0.21117889361496062}. Best is trial 40 with value: 0.24646520365270908.
running
[I 2024-10-18 13:33:34,751] Trial 45 finished with value: 0.2576336572563586 and parameters: {'model_name': 'VAE', 'batch_size': 3, 'iterations': 261, 'learning_rate': 0.00031249285870531203, 'p_miss': 0.22551684975405403}. Best is trial 40 with value: 0.24646520365270908.
running
[I 2024-10-18 13:33:45,416] Trial 37 finished with value: 0.30060913051972005 and parameters: {'model_name': 'VAE', 'batch_size': 5, 'iterations': 1877, 'learning_rate': 0.029784148074690733, 'p_miss': 0.12526022825929084}. Best is trial 40 with value: 0.24646520365270908.
running
[I 2024-10-18 13:36:28,826] Trial 46 finished with value: 0.24865488333024 and parameters: {'model_name': 'VAE', 'batch_size': 3, 'iterations': 240, 'learning_rate': 0.00012215919120494337, 'p_miss': 0.17828128197187287}. Best is trial 40 with value: 0.24646520365270908.
running
[I 2024-10-18 13:37:02,157] Trial 47 finished with value: 0.2501836971125405 and parameters: {'model_name': 'VAE', 'batch_size': 20, 'iterations': 266, 'learning_rate': 0.00010424046948759362, 'p_miss': 0.17523354380070016}. Best is trial 40 with value: 0.24646520365270908.
running
[I 2024-10-18 13:37:02,458] Trial 49 finished with value: 0.29433755218755747 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'mean'}. Best is trial 40 with value: 0.24646520365270908.
running
[I 2024-10-18 13:37:22,692] Trial 50 finished with value: 0.24891515147702595 and parameters: {'model_name': 'VAE', 'batch_size': 2, 'iterations': 24, 'learning_rate': 0.0002541685017851891, 'p_miss': 0.22413734168712793}. Best is trial 40 with value: 0.24646520365270908.
running
[I 2024-10-18 13:39:09,781] Trial 51 finished with value: 0.2509829515976486 and parameters: {'model_name': 'VAE', 'batch_size': 14, 'iterations': 128, 'learning_rate': 0.00019640240906445254, 'p_miss': 0.20405153626455327}. Best is trial 40 with value: 0.24646520365270908.
running
[I 2024-10-18 13:48:06,875] Trial 25 finished with value: 0.29430812140763096 and parameters: {'model_name': 'VAE', 'batch_size': 23, 'iterations': 2785, 'learning_rate': 0.0001032875711259774, 'p_miss': 0.18120736009595625}. Best is trial 40 with value: 0.24646520365270908.
running
[I 2024-10-18 13:51:35,721] Trial 35 finished with value: 0.26137347005547007 and parameters: {'model_name': 'VAE', 'batch_size': 492, 'iterations': 698, 'learning_rate': 0.00011120698618296719, 'p_miss': 0.10890005701237637}. Best is trial 40 with value: 0.24646520365270908.
running
[I 2024-10-18 13:51:36,039] Trial 54 finished with value: 0.43791577519152325 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 40 with value: 0.24646520365270908.
running
[I 2024-10-18 13:51:53,920] Trial 55 finished with value: 0.24651167938790883 and parameters: {'model_name': 'VAE', 'batch_size': 5, 'iterations': 22, 'learning_rate': 0.0006028138802495234, 'p_miss': 0.24351085337464243}. Best is trial 40 with value: 0.24646520365270908.
running
[I 2024-10-18 13:52:09,419] Trial 56 finished with value: 0.25032263381337383 and parameters: {'model_name': 'VAE', 'batch_size': 5, 'iterations': 22, 'learning_rate': 0.0006406599444515341, 'p_miss': 0.245499470180731}. Best is trial 40 with value: 0.24646520365270908.
running
[I 2024-10-18 13:53:03,528] Trial 57 finished with value: 0.24857880012333786 and parameters: {'model_name': 'VAE', 'batch_size': 2, 'iterations': 88, 'learning_rate': 0.00046787013311489633, 'p_miss': 0.14763805507251856}. Best is trial 40 with value: 0.24646520365270908.
running
[I 2024-10-18 13:54:37,128] Trial 58 finished with value: 0.24997253804328032 and parameters: {'model_name': 'VAE', 'batch_size': 5, 'iterations': 155, 'learning_rate': 0.00019443529060194023, 'p_miss': 0.24069683046991877}. Best is trial 40 with value: 0.24646520365270908.
running
[I 2024-10-18 13:56:44,423] Trial 53 finished with value: 0.29996105382721844 and parameters: {'model_name': 'VAE', 'batch_size': 5, 'iterations': 680, 'learning_rate': 0.0006251925737408161, 'p_miss': 0.2435588645453706}. Best is trial 40 with value: 0.24646520365270908.
running
[I 2024-10-18 13:57:06,653] Trial 60 finished with value: 0.24854323309214413 and parameters: {'model_name': 'VAE', 'batch_size': 2, 'iterations': 35, 'learning_rate': 0.00017921813512190282, 'p_miss': 0.19484328492690253}. Best is trial 40 with value: 0.24646520365270908.
running
[I 2024-10-18 13:57:13,718] Trial 61 finished with value: 0.25032421193848037 and parameters: {'model_name': 'VAE', 'batch_size': 14, 'iterations': 11, 'learning_rate': 0.00016917950544492638, 'p_miss': 0.15596025954043338}. Best is trial 40 with value: 0.24646520365270908.
running
[I 2024-10-18 13:57:13,959] Trial 62 finished with value: 0.43791577519152325 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 40 with value: 0.24646520365270908.
running
[I 2024-10-18 14:00:35,511] Trial 41 finished with value: 0.29170470503623 and parameters: {'model_name': 'VAE', 'batch_size': 5, 'iterations': 4330, 'learning_rate': 0.00011133815645525756, 'p_miss': 0.19386008257932424}. Best is trial 40 with value: 0.24646520365270908.
running
[I 2024-10-18 14:02:00,752] Trial 59 finished with value: 0.2514289664715754 and parameters: {'model_name': 'VAE', 'batch_size': 2, 'iterations': 757, 'learning_rate': 0.0001955453433351067, 'p_miss': 0.20230678154875747}. Best is trial 40 with value: 0.24646520365270908.
running
[I 2024-10-18 14:02:44,175] Trial 63 finished with value: 0.2812830906290402 and parameters: {'model_name': 'VAE', 'batch_size': 42, 'iterations': 414, 'learning_rate': 0.00038267118782464045, 'p_miss': 0.16140528117735864}. Best is trial 40 with value: 0.24646520365270908.
running
[I 2024-10-18 14:03:03,626] Trial 66 finished with value: 0.24798958898400825 and parameters: {'model_name': 'VAE', 'batch_size': 9, 'iterations': 32, 'learning_rate': 0.00018801821598168122, 'p_miss': 0.22038560254437548}. Best is trial 40 with value: 0.24646520365270908.
running
[I 2024-10-18 14:04:05,051] Trial 67 finished with value: 0.2505550882941672 and parameters: {'model_name': 'VAE', 'batch_size': 9, 'iterations': 79, 'learning_rate': 0.00015519549965563084, 'p_miss': 0.223007150751301}. Best is trial 40 with value: 0.24646520365270908.
running
[I 2024-10-18 14:04:18,601] Trial 68 finished with value: 0.24975470288535936 and parameters: {'model_name': 'VAE', 'batch_size': 8, 'iterations': 15, 'learning_rate': 0.0002443574070071947, 'p_miss': 0.25583873517843175}. Best is trial 40 with value: 0.24646520365270908.
running
[I 2024-10-18 14:04:20,924] Trial 69 finished with value: 0.4342736184517997 and parameters: {'model_name': 'GAIN', 'batch_size': 11, 'hint_rate': 0.05259975382525933, 'alpha': 47, 'iterations': 5, 'learning_rate': 0.00046909542714357484, 'p_miss': 0.2208153027802631}. Best is trial 40 with value: 0.24646520365270908.
running
[I 2024-10-18 14:04:23,276] Trial 70 finished with value: 0.25040995432800905 and parameters: {'model_name': 'VAE', 'batch_size': 3, 'iterations': 2, 'learning_rate': 0.00015282738470189644, 'p_miss': 0.20987262711082433}. Best is trial 40 with value: 0.24646520365270908.
running
[I 2024-10-18 14:04:32,121] Trial 71 finished with value: 0.30961272996791306 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 21575, 'weights': 'distance'}. Best is trial 40 with value: 0.24646520365270908.
running
[I 2024-10-18 14:04:32,421] Trial 64 finished with value: 0.26431893561607084 and parameters: {'model_name': 'VAE', 'batch_size': 8, 'iterations': 380, 'learning_rate': 0.00040265340622976255, 'p_miss': 0.16049398402487491}. Best is trial 40 with value: 0.24646520365270908.
running
[I 2024-10-18 14:07:23,287] Trial 72 finished with value: 0.2941540114288798 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'median', 'n_nearest_features': 1, 'imputation_order': 'arabic'}. Best is trial 40 with value: 0.24646520365270908.
running
[I 2024-10-18 14:07:23,595] Trial 73 finished with value: 0.2942160886672168 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'median', 'n_nearest_features': 1, 'imputation_order': 'arabic'}. Best is trial 40 with value: 0.24646520365270908.
running
[I 2024-10-18 14:07:56,959] Trial 75 finished with value: 0.2560182176882678 and parameters: {'model_name': 'VAE', 'batch_size': 22, 'iterations': 44, 'learning_rate': 0.0017973157558447482, 'p_miss': 0.23311600180533337}. Best is trial 40 with value: 0.24646520365270908.
running
[I 2024-10-18 14:08:03,181] Trial 74 finished with value: 0.2466427811709096 and parameters: {'model_name': 'VAE', 'batch_size': 26, 'iterations': 40, 'learning_rate': 0.00026207176693560666, 'p_miss': 0.23129535913291807}. Best is trial 40 with value: 0.24646520365270908.
running
[I 2024-10-18 14:08:22,989] Trial 76 finished with value: 0.24962992787212435 and parameters: {'model_name': 'VAE', 'batch_size': 2, 'iterations': 35, 'learning_rate': 0.0002406657004914177, 'p_miss': 0.19311898755480536}. Best is trial 40 with value: 0.24646520365270908.
running
[I 2024-10-18 14:08:32,801] Trial 65 finished with value: 0.27976235392133386 and parameters: {'model_name': 'VAE', 'batch_size': 38, 'iterations': 374, 'learning_rate': 0.00041286115800192073, 'p_miss': 0.15673000390140265}. Best is trial 40 with value: 0.24646520365270908.
running
[I 2024-10-18 14:08:43,728] Trial 79 finished with value: 0.24970893357310828 and parameters: {'model_name': 'VAE', 'batch_size': 93, 'iterations': 8, 'learning_rate': 0.0001589114003735148, 'p_miss': 0.2585600373320268}. Best is trial 40 with value: 0.24646520365270908.
running
[I 2024-10-18 14:09:13,245] Trial 80 finished with value: 0.4339936318576224 and parameters: {'model_name': 'GAIN', 'batch_size': 13, 'hint_rate': 0.11327181996833868, 'alpha': 48, 'iterations': 110, 'learning_rate': 0.0001403209302079599, 'p_miss': 0.28341919847334834}. Best is trial 40 with value: 0.24646520365270908.
running
[I 2024-10-18 14:09:50,998] Trial 77 finished with value: 0.24845037570910805 and parameters: {'model_name': 'VAE', 'batch_size': 38, 'iterations': 126, 'learning_rate': 0.0002677177202824469, 'p_miss': 0.26996340959326764}. Best is trial 40 with value: 0.24646520365270908.
running
[I 2024-10-18 14:09:59,214] Trial 82 finished with value: 0.30961272996791306 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 21903, 'weights': 'distance'}. Best is trial 40 with value: 0.24646520365270908.
running
[I 2024-10-18 14:10:21,716] Trial 81 finished with value: 0.24875944194535204 and parameters: {'model_name': 'VAE', 'batch_size': 61, 'iterations': 65, 'learning_rate': 0.00025924514948398537, 'p_miss': 0.21425964926364333}. Best is trial 40 with value: 0.24646520365270908.
running
[I 2024-10-18 14:10:23,600] Trial 84 finished with value: 0.2515631723329908 and parameters: {'model_name': 'VAE', 'batch_size': 4, 'iterations': 2, 'learning_rate': 0.0008397980482690911, 'p_miss': 0.2341818977324833}. Best is trial 40 with value: 0.24646520365270908.
running
[I 2024-10-18 14:10:23,994] Trial 85 finished with value: 0.43791577519152325 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'most_frequent'}. Best is trial 40 with value: 0.24646520365270908.
running
[I 2024-10-18 14:10:40,988] Trial 83 finished with value: 0.250924939451581 and parameters: {'model_name': 'VAE', 'batch_size': 4, 'iterations': 58, 'learning_rate': 0.0006755489348722794, 'p_miss': 0.21118968296108764}. Best is trial 40 with value: 0.24646520365270908.
running
[I 2024-10-18 14:10:43,173] Trial 78 finished with value: 0.2484064919936091 and parameters: {'model_name': 'VAE', 'batch_size': 66, 'iterations': 120, 'learning_rate': 0.0001566668599369201, 'p_miss': 0.26809175085664844}. Best is trial 40 with value: 0.24646520365270908.
running
[I 2024-10-18 14:11:01,523] Trial 87 finished with value: 0.25160854097000085 and parameters: {'model_name': 'VAE', 'batch_size': 26, 'iterations': 23, 'learning_rate': 0.00013295311295435247, 'p_miss': 0.2632173641414756}. Best is trial 40 with value: 0.24646520365270908.
running
[I 2024-10-18 14:11:28,983] Trial 88 finished with value: 0.24813013415009597 and parameters: {'model_name': 'VAE', 'batch_size': 219, 'iterations': 21, 'learning_rate': 0.00014351957679910104, 'p_miss': 0.29136979201286484}. Best is trial 40 with value: 0.24646520365270908.
running
[I 2024-10-18 14:11:46,284] Trial 90 finished with value: 0.248577065454226 and parameters: {'model_name': 'VAE', 'batch_size': 140, 'iterations': 12, 'learning_rate': 0.0001369730412880107, 'p_miss': 0.29935852985380507}. Best is trial 40 with value: 0.24646520365270908.
running
[I 2024-10-18 14:12:06,537] Trial 86 finished with value: 0.2488519514775232 and parameters: {'model_name': 'VAE', 'batch_size': 27, 'iterations': 166, 'learning_rate': 0.00013919354372708592, 'p_miss': 0.26594100445540886}. Best is trial 40 with value: 0.24646520365270908.
running
[I 2024-10-18 14:12:28,850] Trial 91 finished with value: 0.24956675326961464 and parameters: {'model_name': 'VAE', 'batch_size': 267, 'iterations': 19, 'learning_rate': 0.00019446035255680401, 'p_miss': 0.27633178249689355}. Best is trial 40 with value: 0.24646520365270908.
running
[I 2024-10-18 14:13:03,516] Trial 92 finished with value: 0.3014366378311077 and parameters: {'model_name': 'VAE', 'batch_size': 319, 'iterations': 18, 'learning_rate': 0.013594619601866687, 'p_miss': 0.2939678270939097}. Best is trial 40 with value: 0.24646520365270908.
running
[I 2024-10-18 14:14:52,899] Trial 93 finished with value: 0.25128508482282486 and parameters: {'model_name': 'VAE', 'batch_size': 785, 'iterations': 31, 'learning_rate': 0.0003096825653757352, 'p_miss': 0.25211431308744037}. Best is trial 40 with value: 0.24646520365270908.
running
[I 2024-10-18 14:14:55,355] Trial 95 finished with value: 0.4395190533414122 and parameters: {'model_name': 'GAIN', 'batch_size': 183, 'hint_rate': 0.33581578608033147, 'alpha': 64, 'iterations': 7, 'learning_rate': 0.0017478236031761073, 'p_miss': 0.28477042102639016}. Best is trial 40 with value: 0.24646520365270908.
running
[I 2024-10-18 14:15:13,859] Trial 89 finished with value: 0.24867013263516896 and parameters: {'model_name': 'VAE', 'batch_size': 96, 'iterations': 184, 'learning_rate': 0.0001295420883544397, 'p_miss': 0.2500348300485527}. Best is trial 40 with value: 0.24646520365270908.
running
[I 2024-10-18 14:16:00,027] Trial 31 finished with value: 0.29862290780888456 and parameters: {'model_name': 'VAE', 'batch_size': 400, 'iterations': 1232, 'learning_rate': 0.00016559130422673222, 'p_miss': 0.13356660218710553}. Best is trial 40 with value: 0.24646520365270908.
running
[I 2024-10-18 14:16:01,266] Trial 97 finished with value: 0.2497100901331323 and parameters: {'model_name': 'VAE', 'batch_size': 6, 'iterations': 52, 'learning_rate': 0.0001049478673225371, 'p_miss': 0.18908455432195825}. Best is trial 40 with value: 0.24646520365270908.
running
[I 2024-10-18 14:16:06,792] Trial 96 finished with value: 0.24612458150296518 and parameters: {'model_name': 'VAE', 'batch_size': 88, 'iterations': 57, 'learning_rate': 0.00010191791846543804, 'p_miss': 0.18638447447879297}. Best is trial 96 with value: 0.24612458150296518.
running
[I 2024-10-18 14:17:19,279] Trial 99 finished with value: 0.2479275340573824 and parameters: {'model_name': 'VAE', 'batch_size': 4, 'iterations': 102, 'learning_rate': 0.000220573060899321, 'p_miss': 0.17492684766905342}. Best is trial 96 with value: 0.24612458150296518.
running
[I 2024-10-18 14:17:39,880] Trial 100 finished with value: 0.24710384633929006 and parameters: {'model_name': 'VAE', 'batch_size': 55, 'iterations': 96, 'learning_rate': 0.00021824046803947818, 'p_miss': 0.23437608757443026}. Best is trial 96 with value: 0.24612458150296518.
running
[I 2024-10-18 14:17:43,906] Trial 101 finished with value: 0.24993331726832788 and parameters: {'model_name': 'VAE', 'batch_size': 7, 'iterations': 28, 'learning_rate': 0.00021546575439817568, 'p_miss': 0.16816750840717978}. Best is trial 96 with value: 0.24612458150296518.
running
[I 2024-10-18 14:17:46,199] Trial 102 finished with value: 0.2930834755538113 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Ridge', 'initial_strategy': 'most_frequent', 'n_nearest_features': 5, 'imputation_order': 'random'}. Best is trial 96 with value: 0.24612458150296518.
running
[I 2024-10-18 14:17:46,433] Trial 104 finished with value: 0.43791577519152325 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'constant'}. Best is trial 96 with value: 0.24612458150296518.
running
[I 2024-10-18 14:17:53,444] Trial 103 finished with value: 0.29442805144563555 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 16584, 'weights': 'uniform'}. Best is trial 96 with value: 0.24612458150296518.
running
[I 2024-10-18 14:17:54,593] Trial 105 finished with value: 0.2945213901203382 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 16061, 'weights': 'uniform'}. Best is trial 96 with value: 0.24612458150296518.
running
[I 2024-10-18 14:19:03,435] Trial 94 finished with value: 0.247009228393964 and parameters: {'model_name': 'VAE', 'batch_size': 910, 'iterations': 54, 'learning_rate': 0.00030905826319456995, 'p_miss': 0.25521322645016564}. Best is trial 96 with value: 0.24612458150296518.
running
[I 2024-10-18 14:19:09,768] Trial 107 finished with value: 0.24859661799974808 and parameters: {'model_name': 'VAE', 'batch_size': 18, 'iterations': 85, 'learning_rate': 0.0003096644815568276, 'p_miss': 0.1736892061499457}. Best is trial 96 with value: 0.24612458150296518.
running
[I 2024-10-18 14:19:15,233] Trial 106 finished with value: 0.24890392733507438 and parameters: {'model_name': 'VAE', 'batch_size': 125, 'iterations': 70, 'learning_rate': 0.00031739090799896835, 'p_miss': 0.17392024405613574}. Best is trial 96 with value: 0.24612458150296518.
running
[I 2024-10-18 14:20:09,129] Trial 109 finished with value: 0.2477639479880998 and parameters: {'model_name': 'VAE', 'batch_size': 74, 'iterations': 51, 'learning_rate': 0.0002069068162658977, 'p_miss': 0.233764573391331}. Best is trial 96 with value: 0.24612458150296518.
running
[I 2024-10-18 14:20:46,677] Trial 111 finished with value: 0.25022271222334097 and parameters: {'model_name': 'VAE', 'batch_size': 52, 'iterations': 45, 'learning_rate': 0.000519789815132855, 'p_miss': 0.2354372826608114}. Best is trial 96 with value: 0.24612458150296518.
running
[I 2024-10-18 14:21:49,863] Trial 112 finished with value: 0.24869320252065202 and parameters: {'model_name': 'VAE', 'batch_size': 4, 'iterations': 91, 'learning_rate': 0.00021824531129902304, 'p_miss': 0.18632152365896573}. Best is trial 96 with value: 0.24612458150296518.
running
[I 2024-10-18 14:22:40,917] Trial 113 finished with value: 0.24834092609914235 and parameters: {'model_name': 'VAE', 'batch_size': 77, 'iterations': 53, 'learning_rate': 0.0003648207589998766, 'p_miss': 0.1451667985156737}. Best is trial 96 with value: 0.24612458150296518.
running
[I 2024-10-18 14:23:09,618] Trial 114 finished with value: 0.26826307449466924 and parameters: {'model_name': 'VAE', 'batch_size': 47, 'iterations': 35, 'learning_rate': 0.0035100574262528325, 'p_miss': 0.23043494375390433}. Best is trial 96 with value: 0.24612458150296518.
running
[I 2024-10-18 14:23:19,519] Trial 110 finished with value: 0.2489025282246701 and parameters: {'model_name': 'VAE', 'batch_size': 849, 'iterations': 46, 'learning_rate': 0.000216272341883669, 'p_miss': 0.23726212989680154}. Best is trial 96 with value: 0.24612458150296518.
running
[I 2024-10-18 14:23:31,848] Trial 116 finished with value: 0.2484353441163747 and parameters: {'model_name': 'VAE', 'batch_size': 32, 'iterations': 15, 'learning_rate': 0.0001793062872624995, 'p_miss': 0.2184308843084095}. Best is trial 96 with value: 0.24612458150296518.
running
[I 2024-10-18 14:24:05,136] Trial 115 finished with value: 0.2943816799832081 and parameters: {'model_name': 'VAE', 'batch_size': 32, 'iterations': 68, 'learning_rate': 0.044494556887069624, 'p_miss': 0.04281414303261234}. Best is trial 96 with value: 0.24612458150296518.
running
[I 2024-10-18 14:24:45,217] Trial 36 finished with value: 0.300286638378459 and parameters: {'model_name': 'VAE', 'batch_size': 5, 'iterations': 6567, 'learning_rate': 0.00012152571555437159, 'p_miss': 0.12692747894149764}. Best is trial 96 with value: 0.24612458150296518.
running
[I 2024-10-18 14:24:51,946] Trial 118 finished with value: 0.24837252769135673 and parameters: {'model_name': 'VAE', 'batch_size': 189, 'iterations': 28, 'learning_rate': 0.00010016370506631581, 'p_miss': 0.24508897236212285}. Best is trial 96 with value: 0.24612458150296518.
running
[I 2024-10-18 14:24:54,105] Trial 117 finished with value: 0.24833676431098511 and parameters: {'model_name': 'VAE', 'batch_size': 97, 'iterations': 66, 'learning_rate': 0.00010089543008290453, 'p_miss': 0.0410141544024111}. Best is trial 96 with value: 0.24612458150296518.
running
[I 2024-10-18 14:25:27,441] Trial 119 finished with value: 0.2486941442596704 and parameters: {'model_name': 'VAE', 'batch_size': 177, 'iterations': 27, 'learning_rate': 0.00010178452068176607, 'p_miss': 0.24306243971876332}. Best is trial 96 with value: 0.24612458150296518.
running
[I 2024-10-18 14:25:30,637] Trial 29 finished with value: 0.28273345341962436 and parameters: {'model_name': 'VAE', 'batch_size': 667, 'iterations': 1129, 'learning_rate': 0.00015572254054390224, 'p_miss': 0.13047946084350348}. Best is trial 96 with value: 0.24612458150296518.
running
[I 2024-10-18 14:25:38,793] Trial 122 finished with value: 0.24907757879016806 and parameters: {'model_name': 'VAE', 'batch_size': 530, 'iterations': 3, 'learning_rate': 0.00028275956594878636, 'p_miss': 0.20235038221453097}. Best is trial 96 with value: 0.24612458150296518.
running
[I 2024-10-18 14:25:49,026] Trial 124 finished with value: 0.3154183917974677 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'constant', 'n_nearest_features': 6, 'imputation_order': 'descending'}. Best is trial 96 with value: 0.24612458150296518.
running
[I 2024-10-18 14:25:56,268] Trial 108 finished with value: 0.24863493311187476 and parameters: {'model_name': 'VAE', 'batch_size': 682, 'iterations': 91, 'learning_rate': 0.00027134554377168896, 'p_miss': 0.23493671701156646}. Best is trial 96 with value: 0.24612458150296518.
running
[I 2024-10-18 14:26:18,155] Trial 125 finished with value: 0.43439543236905986 and parameters: {'model_name': 'GAIN', 'batch_size': 6, 'hint_rate': 0.4409564705348201, 'alpha': 29, 'iterations': 101, 'learning_rate': 0.00017914055863424612, 'p_miss': 0.22561632893613773}. Best is trial 96 with value: 0.24612458150296518.
running
[I 2024-10-18 14:26:45,206] Trial 126 finished with value: 0.24959366365389055 and parameters: {'model_name': 'VAE', 'batch_size': 103, 'iterations': 37, 'learning_rate': 0.00012159416291606043, 'p_miss': 0.22738876398407326}. Best is trial 96 with value: 0.24612458150296518.
running
[I 2024-10-18 14:27:00,584] Trial 127 finished with value: 0.25081535405769073 and parameters: {'model_name': 'VAE', 'batch_size': 110, 'iterations': 40, 'learning_rate': 0.00011870727358304516, 'p_miss': 0.09262614416915681}. Best is trial 96 with value: 0.24612458150296518.
running
[I 2024-10-18 14:27:49,790] Trial 128 finished with value: 0.24912640017277132 and parameters: {'model_name': 'VAE', 'batch_size': 70, 'iterations': 60, 'learning_rate': 0.00012205342078408949, 'p_miss': 0.18179529769472957}. Best is trial 96 with value: 0.24612458150296518.
running
[I 2024-10-18 14:27:57,508] Trial 129 finished with value: 0.24862872236574876 and parameters: {'model_name': 'VAE', 'batch_size': 84, 'iterations': 53, 'learning_rate': 0.00016414742097380037, 'p_miss': 0.19635543905678698}. Best is trial 96 with value: 0.24612458150296518.
running
[I 2024-10-18 14:28:48,189] Trial 130 finished with value: 0.2492044359391567 and parameters: {'model_name': 'VAE', 'batch_size': 11, 'iterations': 72, 'learning_rate': 0.00022732857275182324, 'p_miss': 0.16711957805785255}. Best is trial 96 with value: 0.24612458150296518.
running
[I 2024-10-18 14:29:10,317] Trial 132 finished with value: 0.24846645369166956 and parameters: {'model_name': 'VAE', 'batch_size': 52, 'iterations': 19, 'learning_rate': 0.0003624921837698207, 'p_miss': 0.06478094208907077}. Best is trial 96 with value: 0.24612458150296518.
running
[I 2024-10-18 14:29:31,393] Trial 131 finished with value: 0.24851834917344068 and parameters: {'model_name': 'VAE', 'batch_size': 58, 'iterations': 72, 'learning_rate': 0.00021834257936162633, 'p_miss': 0.028002620867613882}. Best is trial 96 with value: 0.24612458150296518.
running
[I 2024-10-18 14:29:31,665] Trial 134 finished with value: 0.29433755218755747 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'mean'}. Best is trial 96 with value: 0.24612458150296518.
running
[I 2024-10-18 14:29:40,313] Trial 121 finished with value: 0.24687047298161766 and parameters: {'model_name': 'VAE', 'batch_size': 438, 'iterations': 99, 'learning_rate': 0.0002648813134248633, 'p_miss': 0.19766230495455991}. Best is trial 96 with value: 0.24612458150296518.
running
[I 2024-10-18 14:30:44,414] Trial 133 finished with value: 0.24889982089487953 and parameters: {'model_name': 'VAE', 'batch_size': 4, 'iterations': 144, 'learning_rate': 0.00014799646366975625, 'p_miss': 0.20639303044193844}. Best is trial 96 with value: 0.24612458150296518.
running
[I 2024-10-18 14:31:05,318] Trial 135 finished with value: 0.2472650985480243 and parameters: {'model_name': 'VAE', 'batch_size': 17, 'iterations': 130, 'learning_rate': 0.000145771040296906, 'p_miss': 0.2181239298241898}. Best is trial 96 with value: 0.24612458150296518.
running
[I 2024-10-18 14:31:13,392] Trial 120 finished with value: 0.25021647936599767 and parameters: {'model_name': 'VAE', 'batch_size': 565, 'iterations': 95, 'learning_rate': 0.0002586654752702907, 'p_miss': 0.19912486372955132}. Best is trial 96 with value: 0.24612458150296518.
running
[I 2024-10-18 14:31:20,670] Trial 123 finished with value: 0.24879652263736807 and parameters: {'model_name': 'VAE', 'batch_size': 466, 'iterations': 99, 'learning_rate': 0.00017445451416382176, 'p_miss': 0.22744128581215223}. Best is trial 96 with value: 0.24612458150296518.
running
[I 2024-10-18 14:32:43,717] Trial 138 finished with value: 0.248711253720926 and parameters: {'model_name': 'VAE', 'batch_size': 17, 'iterations': 114, 'learning_rate': 0.0001887515992109504, 'p_miss': 0.21729109065777108}. Best is trial 96 with value: 0.24612458150296518.
running
[I 2024-10-18 14:35:07,334] Trial 141 finished with value: 0.2533689945105987 and parameters: {'model_name': 'VAE', 'batch_size': 6, 'iterations': 194, 'learning_rate': 0.0004498850381671772, 'p_miss': 0.18744804299967452}. Best is trial 96 with value: 0.24612458150296518.
running
[I 2024-10-18 14:37:00,715] Trial 28 finished with value: 0.2958046380330954 and parameters: {'model_name': 'VAE', 'batch_size': 793, 'iterations': 970, 'learning_rate': 0.00020434698609189303, 'p_miss': 0.13882775386787904}. Best is trial 96 with value: 0.24612458150296518.
running
[I 2024-10-18 14:37:32,304] Trial 143 finished with value: 0.25149528750828004 and parameters: {'model_name': 'VAE', 'batch_size': 290, 'iterations': 14, 'learning_rate': 0.0001450081574768544, 'p_miss': 0.2094716950884888}. Best is trial 96 with value: 0.24612458150296518.
running
[I 2024-10-18 14:37:57,322] Trial 140 finished with value: 0.2491062831729403 and parameters: {'model_name': 'VAE', 'batch_size': 305, 'iterations': 190, 'learning_rate': 0.0001399071823886367, 'p_miss': 0.21481123967787102}. Best is trial 96 with value: 0.24612458150296518.
running
[I 2024-10-18 14:37:59,154] Trial 136 finished with value: 0.24694002685771704 and parameters: {'model_name': 'VAE', 'batch_size': 306, 'iterations': 213, 'learning_rate': 0.00014959628976892898, 'p_miss': 0.2078575067772083}. Best is trial 96 with value: 0.24612458150296518.
running
[I 2024-10-18 14:38:14,589] Trial 145 finished with value: 0.24718137702055842 and parameters: {'model_name': 'VAE', 'batch_size': 11, 'iterations': 22, 'learning_rate': 0.0005461634669797296, 'p_miss': 0.2524639951253558}. Best is trial 96 with value: 0.24612458150296518.
running
[I 2024-10-18 14:39:40,408] Trial 142 finished with value: 0.24734451935184 and parameters: {'model_name': 'VAE', 'batch_size': 243, 'iterations': 138, 'learning_rate': 0.00014883170622257802, 'p_miss': 0.20908649465284346}. Best is trial 96 with value: 0.24612458150296518.
running
[I 2024-10-18 14:40:09,641] Trial 137 finished with value: 0.25023515091739335 and parameters: {'model_name': 'VAE', 'batch_size': 424, 'iterations': 204, 'learning_rate': 0.00018515458932061383, 'p_miss': 0.21911235680372257}. Best is trial 96 with value: 0.24612458150296518.
running
[I 2024-10-18 14:40:58,873] Trial 147 finished with value: 0.25295380041734983 and parameters: {'model_name': 'VAE', 'batch_size': 10, 'iterations': 307, 'learning_rate': 0.0003348952511198296, 'p_miss': 0.2565223499703742}. Best is trial 96 with value: 0.24612458150296518.
running
[I 2024-10-18 14:41:42,854] Trial 144 finished with value: 0.24774523406457377 and parameters: {'model_name': 'VAE', 'batch_size': 976, 'iterations': 45, 'learning_rate': 0.0003409903704441852, 'p_miss': 0.21614471158023696}. Best is trial 96 with value: 0.24612458150296518.
running
[I 2024-10-18 14:42:51,945] Trial 139 finished with value: 0.25191246163080633 and parameters: {'model_name': 'VAE', 'batch_size': 363, 'iterations': 201, 'learning_rate': 0.00019011652290110216, 'p_miss': 0.2135703621507669}. Best is trial 96 with value: 0.24612458150296518.
running
[I 2024-10-18 14:43:13,725] Trial 149 finished with value: 0.274744313090538 and parameters: {'model_name': 'VAE', 'batch_size': 17, 'iterations': 280, 'learning_rate': 0.000538932846331862, 'p_miss': 0.2492208563607408}. Best is trial 96 with value: 0.24612458150296518.
running
[I 2024-10-18 14:43:27,566] Trial 152 finished with value: 0.436481766318295 and parameters: {'model_name': 'GAIN', 'batch_size': 604, 'hint_rate': 0.25167260567241156, 'alpha': 34, 'iterations': 130, 'learning_rate': 0.0008417982724622924, 'p_miss': 0.2492827202323938}. Best is trial 96 with value: 0.24612458150296518.
running
[I 2024-10-18 14:43:33,853] Trial 154 finished with value: 0.3095772364621847 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 4567, 'weights': 'distance'}. Best is trial 96 with value: 0.24612458150296518.
running
[I 2024-10-18 14:43:53,174] Trial 153 finished with value: 0.43860397064714124 and parameters: {'model_name': 'GAIN', 'batch_size': 637, 'hint_rate': 0.24790367087871007, 'alpha': 34, 'iterations': 143, 'learning_rate': 0.0012889159416508986, 'p_miss': 0.19216483977762644}. Best is trial 96 with value: 0.24612458150296518.
running
[I 2024-10-18 14:47:08,637] Trial 150 finished with value: 0.25997726838276675 and parameters: {'model_name': 'VAE', 'batch_size': 361, 'iterations': 138, 'learning_rate': 0.0005464017433217411, 'p_miss': 0.1909219313613064}. Best is trial 96 with value: 0.24612458150296518.
running
[I 2024-10-18 14:49:07,945] Trial 156 finished with value: 0.2501678375957185 and parameters: {'model_name': 'VAE', 'batch_size': 981, 'iterations': 46, 'learning_rate': 0.00025623278852140036, 'p_miss': 0.17787646271778204}. Best is trial 96 with value: 0.24612458150296518.
running
[I 2024-10-18 14:50:21,629] Trial 148 finished with value: 0.276926876162279 and parameters: {'model_name': 'VAE', 'batch_size': 435, 'iterations': 232, 'learning_rate': 0.0006168512675428895, 'p_miss': 0.25039208580427513}. Best is trial 96 with value: 0.24612458150296518.
running
[I 2024-10-18 14:50:37,611] Trial 33 finished with value: 0.2821858227317343 and parameters: {'model_name': 'VAE', 'batch_size': 803, 'iterations': 1385, 'learning_rate': 0.00013215916273580445, 'p_miss': 0.14553895234045944}. Best is trial 96 with value: 0.24612458150296518.
running
[I 2024-10-18 14:51:31,560] Trial 155 finished with value: 0.29785578351232 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'constant', 'n_nearest_features': 4, 'imputation_order': 'random'}. Best is trial 96 with value: 0.24612458150296518.
running
[I 2024-10-18 14:57:04,353] Trial 160 finished with value: 0.24660714504392978 and parameters: {'model_name': 'VAE', 'batch_size': 882, 'iterations': 78, 'learning_rate': 0.00038134599698759714, 'p_miss': 0.23954885846912752}. Best is trial 96 with value: 0.24612458150296518.
running
[I 2024-10-18 14:58:00,097] Trial 162 finished with value: 0.24975889192087902 and parameters: {'model_name': 'VAE', 'batch_size': 12, 'iterations': 80, 'learning_rate': 0.00042011753803140677, 'p_miss': 0.24070440395316278}. Best is trial 96 with value: 0.24612458150296518.
running
[I 2024-10-18 14:59:45,118] Trial 52 finished with value: 0.30304528553745025 and parameters: {'model_name': 'VAE', 'batch_size': 5, 'iterations': 7278, 'learning_rate': 0.000195788580197202, 'p_miss': 0.24452611125822069}. Best is trial 96 with value: 0.24612458150296518.
running
[I 2024-10-18 15:02:30,574] Trial 163 finished with value: 0.2488515544048667 and parameters: {'model_name': 'VAE', 'batch_size': 883, 'iterations': 45, 'learning_rate': 0.00035317440595132636, 'p_miss': 0.20715523275748177}. Best is trial 96 with value: 0.24612458150296518.
running
[I 2024-10-18 15:05:24,047] Trial 164 finished with value: 0.24918034206657866 and parameters: {'model_name': 'VAE', 'batch_size': 890, 'iterations': 56, 'learning_rate': 0.00030338097374112746, 'p_miss': 0.20669721247875847}. Best is trial 96 with value: 0.24612458150296518.
running
[I 2024-10-18 15:06:46,590] Trial 158 finished with value: 0.29349524211694084 and parameters: {'model_name': 'VAE', 'batch_size': 224, 'iterations': 524, 'learning_rate': 0.0003006358547344607, 'p_miss': 0.2062362921163116}. Best is trial 96 with value: 0.24612458150296518.
running
[I 2024-10-18 15:07:38,427] Trial 30 finished with value: 0.2867513033807089 and parameters: {'model_name': 'VAE', 'batch_size': 779, 'iterations': 1542, 'learning_rate': 0.00011971017069022757, 'p_miss': 0.12252655262497991}. Best is trial 96 with value: 0.24612458150296518.
running
[I 2024-10-18 15:08:24,223] Trial 165 finished with value: 0.24826156411601427 and parameters: {'model_name': 'VAE', 'batch_size': 736, 'iterations': 51, 'learning_rate': 0.0002881353598209474, 'p_miss': 0.2396340782810876}. Best is trial 96 with value: 0.24612458150296518.
running
[I 2024-10-18 15:09:37,626] Trial 169 finished with value: 0.2482665182940064 and parameters: {'model_name': 'VAE', 'batch_size': 7, 'iterations': 115, 'learning_rate': 0.00024112049330150682, 'p_miss': 0.23031578427074093}. Best is trial 96 with value: 0.24612458150296518.
running
[I 2024-10-18 15:09:58,766] Trial 32 finished with value: 0.29978853941002626 and parameters: {'model_name': 'VAE', 'batch_size': 402, 'iterations': 2241, 'learning_rate': 0.00011189133274665333, 'p_miss': 0.12957685111724648}. Best is trial 96 with value: 0.24612458150296518.
running
[I 2024-10-18 15:10:33,821] Trial 170 finished with value: 0.2503373849298027 and parameters: {'model_name': 'VAE', 'batch_size': 25, 'iterations': 75, 'learning_rate': 0.00011513716848678752, 'p_miss': 0.19834082456614366}. Best is trial 96 with value: 0.24612458150296518.
running
[I 2024-10-18 15:10:34,156] Trial 172 finished with value: 0.43791577519152325 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 96 with value: 0.24612458150296518.
running
[I 2024-10-18 15:10:53,215] Trial 171 finished with value: 0.251660671279407 and parameters: {'model_name': 'VAE', 'batch_size': 15, 'iterations': 81, 'learning_rate': 0.0007422648131485222, 'p_miss': 0.2604182458601046}. Best is trial 96 with value: 0.24612458150296518.
running
[I 2024-10-18 15:11:07,702] Trial 168 finished with value: 0.24850390318046847 and parameters: {'model_name': 'VAE', 'batch_size': 248, 'iterations': 111, 'learning_rate': 0.00024848388943569813, 'p_miss': 0.23740768670447931}. Best is trial 96 with value: 0.24612458150296518.
running
[I 2024-10-18 15:11:15,138] Trial 146 finished with value: 0.2632054876193229 and parameters: {'model_name': 'VAE', 'batch_size': 999, 'iterations': 284, 'learning_rate': 0.00019559893420570184, 'p_miss': 0.19187350619688595}. Best is trial 96 with value: 0.24612458150296518.
running
[I 2024-10-18 15:11:34,655] Trial 176 finished with value: 0.24821550122485103 and parameters: {'model_name': 'VAE', 'batch_size': 8, 'iterations': 26, 'learning_rate': 0.00022100140790476774, 'p_miss': 0.22053761359558327}. Best is trial 96 with value: 0.24612458150296518.
running
[I 2024-10-18 15:11:57,685] Trial 177 finished with value: 0.24952850893511386 and parameters: {'model_name': 'VAE', 'batch_size': 10, 'iterations': 30, 'learning_rate': 0.00016068866703705664, 'p_miss': 0.2239946299861405}. Best is trial 96 with value: 0.24612458150296518.
running
[I 2024-10-18 15:12:15,259] Trial 174 finished with value: 0.24949434188159758 and parameters: {'model_name': 'VAE', 'batch_size': 253, 'iterations': 35, 'learning_rate': 0.00044941865426291564, 'p_miss': 0.22442539659105568}. Best is trial 96 with value: 0.24612458150296518.
running
[I 2024-10-18 15:12:19,626] Trial 178 finished with value: 0.24663379771436666 and parameters: {'model_name': 'VAE', 'batch_size': 4, 'iterations': 37, 'learning_rate': 0.00038530917309161696, 'p_miss': 0.22939846873727487}. Best is trial 96 with value: 0.24612458150296518.
running
[I 2024-10-18 15:12:44,795] Trial 180 finished with value: 0.24825722321078322 and parameters: {'model_name': 'VAE', 'batch_size': 3, 'iterations': 39, 'learning_rate': 0.0003853631269978169, 'p_miss': 0.23269442867390255}. Best is trial 96 with value: 0.24612458150296518.
running
[I 2024-10-18 15:14:29,298] Trial 173 finished with value: 0.2548087081985805 and parameters: {'model_name': 'VAE', 'batch_size': 970, 'iterations': 37, 'learning_rate': 0.0004170865201227998, 'p_miss': 0.25858298523847}. Best is trial 96 with value: 0.24612458150296518.
running
[I 2024-10-18 15:14:41,079] Trial 181 finished with value: 0.24984420916288919 and parameters: {'model_name': 'VAE', 'batch_size': 4, 'iterations': 163, 'learning_rate': 0.0005083950378405439, 'p_miss': 0.1995053150101918}. Best is trial 96 with value: 0.24612458150296518.
running
[I 2024-10-18 15:14:45,944] Trial 175 finished with value: 0.24775981406904873 and parameters: {'model_name': 'VAE', 'batch_size': 951, 'iterations': 33, 'learning_rate': 0.00038680498824320106, 'p_miss': 0.2239886694597705}. Best is trial 96 with value: 0.24612458150296518.
running
[I 2024-10-18 15:15:11,240] Trial 182 finished with value: 0.24953204192381157 and parameters: {'model_name': 'VAE', 'batch_size': 4, 'iterations': 58, 'learning_rate': 0.0005066118913602612, 'p_miss': 0.18263594078927925}. Best is trial 96 with value: 0.24612458150296518.
running
[I 2024-10-18 15:15:31,118] Trial 183 finished with value: 0.24781683343051492 and parameters: {'model_name': 'VAE', 'batch_size': 20, 'iterations': 62, 'learning_rate': 0.00034960344703956013, 'p_miss': 0.1856684639405016}. Best is trial 96 with value: 0.24612458150296518.
running
[I 2024-10-18 15:15:47,668] Trial 186 finished with value: 0.24974029146191284 and parameters: {'model_name': 'VAE', 'batch_size': 20, 'iterations': 24, 'learning_rate': 0.0003517994786320759, 'p_miss': 0.21456008247293706}. Best is trial 96 with value: 0.24612458150296518.
running
[I 2024-10-18 15:16:30,800] Trial 184 finished with value: 0.24939784028604853 and parameters: {'model_name': 'VAE', 'batch_size': 713, 'iterations': 23, 'learning_rate': 0.00035598856342103987, 'p_miss': 0.2130552288240105}. Best is trial 96 with value: 0.24612458150296518.
running
[I 2024-10-18 15:16:37,283] Trial 167 finished with value: 0.2494787229404835 and parameters: {'model_name': 'VAE', 'batch_size': 749, 'iterations': 110, 'learning_rate': 0.00023721730567379087, 'p_miss': 0.23828421931876917}. Best is trial 96 with value: 0.24612458150296518.
running
[I 2024-10-18 15:17:04,883] Trial 188 finished with value: 0.246786719082481 and parameters: {'model_name': 'VAE', 'batch_size': 21, 'iterations': 48, 'learning_rate': 0.0002823957201784745, 'p_miss': 0.23057203085390046}. Best is trial 96 with value: 0.24612458150296518.
running
[I 2024-10-18 15:17:16,461] Trial 189 finished with value: 0.24718370354256303 and parameters: {'model_name': 'VAE', 'batch_size': 35, 'iterations': 63, 'learning_rate': 0.00012644248753130094, 'p_miss': 0.23012260294744982}. Best is trial 96 with value: 0.24612458150296518.
running
[I 2024-10-18 15:17:36,092] Trial 190 finished with value: 0.25262925115255597 and parameters: {'model_name': 'VAE', 'batch_size': 34, 'iterations': 46, 'learning_rate': 0.00012673730034979842, 'p_miss': 0.22908575867611133}. Best is trial 96 with value: 0.24612458150296518.
running
[I 2024-10-18 15:17:47,074] Trial 191 finished with value: 0.294981817649424 and parameters: {'model_name': 'VAE', 'batch_size': 28, 'iterations': 41, 'learning_rate': 0.007738794062934784, 'p_miss': 0.2292685819878651}. Best is trial 96 with value: 0.24612458150296518.
running
[I 2024-10-18 15:17:55,160] Trial 193 finished with value: 0.3095969303196272 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 8672, 'weights': 'distance'}. Best is trial 96 with value: 0.24612458150296518.
running
[I 2024-10-18 15:17:59,954] Trial 192 finished with value: 0.2501539869375198 and parameters: {'model_name': 'VAE', 'batch_size': 29, 'iterations': 29, 'learning_rate': 0.00011949767129904729, 'p_miss': 0.2432109400699757}. Best is trial 96 with value: 0.24612458150296518.
running
[I 2024-10-18 15:18:09,688] Trial 27 finished with value: 0.2834849479678443 and parameters: {'model_name': 'VAE', 'batch_size': 895, 'iterations': 1438, 'learning_rate': 0.00010363078468066765, 'p_miss': 0.12909204173336253}. Best is trial 96 with value: 0.24612458150296518.
running
[I 2024-10-18 15:18:14,035] Trial 179 finished with value: 0.24998282657831297 and parameters: {'model_name': 'VAE', 'batch_size': 700, 'iterations': 60, 'learning_rate': 0.0001314929365048067, 'p_miss': 0.1817708774799943}. Best is trial 96 with value: 0.24612458150296518.
running
[I 2024-10-18 15:18:14,356] Trial 194 finished with value: 0.24914529393615759 and parameters: {'model_name': 'VAE', 'batch_size': 23, 'iterations': 31, 'learning_rate': 0.00011586677323286915, 'p_miss': 0.24442755485797613}. Best is trial 96 with value: 0.24612458150296518.
running
[I 2024-10-18 15:18:14,617] Trial 195 finished with value: 0.2933450308274675 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Ridge', 'initial_strategy': 'most_frequent', 'n_nearest_features': 2, 'imputation_order': 'roman'}. Best is trial 96 with value: 0.24612458150296518.
running
[I 2024-10-18 15:18:57,336] Trial 198 finished with value: 0.2497072553880945 and parameters: {'model_name': 'VAE', 'batch_size': 44, 'iterations': 54, 'learning_rate': 0.00016098218194667813, 'p_miss': 0.22194763914170512}. Best is trial 96 with value: 0.24612458150296518.
[I 2024-10-18 15:19:01,976] Trial 196 finished with value: 0.25527072736362405 and parameters: {'model_name': 'VAE', 'batch_size': 42, 'iterations': 60, 'learning_rate': 0.00027332800117086943, 'p_miss': 0.22144759814743484}. Best is trial 96 with value: 0.24612458150296518.
[I 2024-10-18 15:19:33,878] Trial 151 finished with value: 0.30073814901068696 and parameters: {'model_name': 'VAE', 'batch_size': 687, 'iterations': 451, 'learning_rate': 0.0006727165966856521, 'p_miss': 0.2517310148387975}. Best is trial 96 with value: 0.24612458150296518.
[I 2024-10-18 15:20:42,117] Trial 187 finished with value: 0.3010621644012689 and parameters: {'model_name': 'VAE', 'batch_size': 717, 'iterations': 61, 'learning_rate': 0.004908560627098562, 'p_miss': 0.2322309689173587}. Best is trial 96 with value: 0.24612458150296518.
[I 2024-10-18 15:21:30,024] Trial 199 finished with value: 0.24687994370031713 and parameters: {'model_name': 'VAE', 'batch_size': 552, 'iterations': 89, 'learning_rate': 0.00015747353032889851, 'p_miss': 0.22106622567477138}. Best is trial 96 with value: 0.24612458150296518.
[I 2024-10-18 15:22:25,385] Trial 197 finished with value: 0.2505162828566255 and parameters: {'model_name': 'VAE', 'batch_size': 513, 'iterations': 85, 'learning_rate': 0.00016166953162562606, 'p_miss': 0.2328518602901016}. Best is trial 96 with value: 0.24612458150296518.
[I 2024-10-18 15:26:21,451] Trial 157 finished with value: 0.2876692849561703 and parameters: {'model_name': 'VAE', 'batch_size': 878, 'iterations': 550, 'learning_rate': 0.00028621772317728093, 'p_miss': 0.20497617110510064}. Best is trial 96 with value: 0.24612458150296518.
[I 2024-10-18 15:26:33,140] Trial 159 finished with value: 0.29135378688868896 and parameters: {'model_name': 'VAE', 'batch_size': 828, 'iterations': 484, 'learning_rate': 0.00043414877189606343, 'p_miss': 0.20356347705957878}. Best is trial 96 with value: 0.24612458150296518.
[I 2024-10-18 15:28:41,283] Trial 48 finished with value: 0.2941683511218252 and parameters: {'model_name': 'VAE', 'batch_size': 18, 'iterations': 9461, 'learning_rate': 0.0002256460141292728, 'p_miss': 0.2213561133027161}. Best is trial 96 with value: 0.24612458150296518.
[I 2024-10-18 15:28:53,432] Trial 98 finished with value: 0.29980887058366423 and parameters: {'model_name': 'VAE', 'batch_size': 6, 'iterations': 8767, 'learning_rate': 0.00010132247734147683, 'p_miss': 0.1876691615008046}. Best is trial 96 with value: 0.24612458150296518.
[I 2024-10-18 15:29:15,906] Trial 166 finished with value: 0.2847814064763846 and parameters: {'model_name': 'VAE', 'batch_size': 705, 'iterations': 519, 'learning_rate': 0.00028849268735157133, 'p_miss': 0.22988680796342364}. Best is trial 96 with value: 0.24612458150296518.
[I 2024-10-18 15:31:37,950] Trial 185 finished with value: 0.2967673186574097 and parameters: {'model_name': 'VAE', 'batch_size': 31, 'iterations': 3443, 'learning_rate': 0.00033478469354660353, 'p_miss': 0.21359976232323083}. Best is trial 96 with value: 0.24612458150296518.
[I 2024-10-18 15:31:50,286] Trial 26 finished with value: 0.30006470581492983 and parameters: {'model_name': 'VAE', 'batch_size': 793, 'iterations': 2010, 'learning_rate': 0.00018087805482740535, 'p_miss': 0.12318149678906894}. Best is trial 96 with value: 0.24612458150296518.
[I 2024-10-18 15:34:03,223] Trial 34 finished with value: 0.3012043652161289 and parameters: {'model_name': 'VAE', 'batch_size': 871, 'iterations': 1833, 'learning_rate': 0.00016810053176640467, 'p_miss': 0.12957160164865433}. Best is trial 96 with value: 0.24612458150296518.
[I 2024-10-18 15:52:38,829] Trial 24 finished with value: 0.3012356116252839 and parameters: {'model_name': 'VAE', 'batch_size': 949, 'iterations': 7825, 'learning_rate': 0.029793979717485226, 'p_miss': 0.28070960728742894}. Best is trial 96 with value: 0.24612458150296518.
[I 2024-10-18 15:52:59,286] Trial 161 finished with value: 0.3001025618877615 and parameters: {'model_name': 'VAE', 'batch_size': 228, 'iterations': 8865, 'learning_rate': 0.0002922329094192197, 'p_miss': 0.1973880487671458}. Best is trial 96 with value: 0.24612458150296518.
fit
auto fit
auto transform
0    0
1    0
2    0
3    0
4    0
5    0
dtype: int64
0    0
1    0
2    0
3    0
4    0
5    0
dtype: int64
0.24612458150296518
{'model_name': 'VAE', 'batch_size': 88, 'iterations': 57, 'learning_rate': 0.00010191791846543804, 'p_miss': 0.18638447447879297}
running experiment 2/3 - Does reconstruction give good automl predictions
Start est fit
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
  0%|          | 0/25 [00:00<?, ?it/s]Generation:   0%|          | 0/25 [00:00<?, ?it/s]WARNING AN INDIVIDUAL TIMED OUT: 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155474124ca0> 

Generation:  1
Best f1_score score: 0.05597549387038705
Generation:   4%|▍         | 1/25 [10:01<4:00:24, 601.02s/it]WARNING AN INDIVIDUAL TIMED OUT: 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x1554741b6350> 

Generation:  2
Best f1_score score: 0.05850493580731146
Generation:   8%|▊         | 2/25 [20:04<3:50:59, 602.57s/it]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x1554741272e0> 
 Negative values in data passed to MultinomialNB (input X) 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/naive_bayes.py", line 759, in fit
    self._count(X, Y)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/naive_bayes.py", line 881, in _count
    check_non_negative(X, "MultinomialNB (input X)")
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1689, in check_non_negative
    raise ValueError("Negative values in data passed to %s" % whom)
ValueError: Negative values in data passed to MultinomialNB (input X)

Generation:  3
Best f1_score score: 0.05850493580731146
Generation:  12%|█▏        | 3/25 [21:07<2:10:34, 356.09s/it]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155474124a90> 
 Negative values in data passed to MultinomialNB (input X) 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/naive_bayes.py", line 759, in fit
    self._count(X, Y)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/naive_bayes.py", line 881, in _count
    check_non_negative(X, "MultinomialNB (input X)")
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1689, in check_non_negative
    raise ValueError("Negative values in data passed to %s" % whom)
ValueError: Negative values in data passed to MultinomialNB (input X)

Generation:  4
Best f1_score score: 0.05850493580731146
Generation:  16%|█▌        | 4/25 [22:27<1:26:25, 246.92s/it]Generation:  5
Best f1_score score: 0.05850493580731146
Generation:  20%|██        | 5/25 [31:41<1:59:14, 357.72s/it]Generation:  6
Best f1_score score: 0.05850493580731146
Generation:  24%|██▍       | 6/25 [32:23<1:19:17, 250.40s/it]Generation:  7
Best f1_score score: 0.05850493580731146
Generation:  28%|██▊       | 7/25 [32:49<53:08, 177.16s/it]  WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x15546f1b4130> 
 Negative values in data passed to MultinomialNB (input X) 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/naive_bayes.py", line 759, in fit
    self._count(X, Y)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/naive_bayes.py", line 881, in _count
    check_non_negative(X, "MultinomialNB (input X)")
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1689, in check_non_negative
    raise ValueError("Negative values in data passed to %s" % whom)
ValueError: Negative values in data passed to MultinomialNB (input X)

Generation:  8
Best f1_score score: 0.05850493580731146
Generation:  32%|███▏      | 8/25 [34:44<44:33, 157.29s/it]Generation:  9
Best f1_score score: 0.05850493580731146
Generation:  36%|███▌      | 9/25 [39:47<54:06, 202.93s/it]Generation:  10
Best f1_score score: 0.05850493580731146
Generation:  40%|████      | 10/25 [49:00<1:17:45, 311.02s/it]Generation:  11
Best f1_score score: 0.05850493580731146
Generation:  44%|████▍     | 11/25 [53:36<1:10:04, 300.32s/it]Generation:  12
Best f1_score score: 0.05850493580731146
Generation:  48%|████▊     | 12/25 [54:37<49:15, 227.31s/it]  Generation:  13
Best f1_score score: 0.05875120828477922
Generation:  52%|█████▏    | 13/25 [1:03:53<1:05:24, 327.07s/it]Generation:  14
Best f1_score score: 0.05875120828477922
Generation:  56%|█████▌    | 14/25 [1:04:35<44:10, 240.92s/it]  Generation:  15
Best f1_score score: 0.05875120828477922
Generation:  60%|██████    | 15/25 [1:07:25<36:34, 219.46s/it]Generation:  16
Best f1_score score: 0.05875120828477922
Generation:  64%|██████▍   | 16/25 [1:16:00<46:15, 308.39s/it]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x15546cf0ef20> 
 Negative values in data passed to MultinomialNB (input X) 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/naive_bayes.py", line 759, in fit
    self._count(X, Y)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/naive_bayes.py", line 881, in _count
    check_non_negative(X, "MultinomialNB (input X)")
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1689, in check_non_negative
    raise ValueError("Negative values in data passed to %s" % whom)
ValueError: Negative values in data passed to MultinomialNB (input X)

WARNING AN INDIVIDUAL TIMED OUT: 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x15546fb68b80> 

Generation:  17
Best f1_score score: 0.05875120828477922
Generation:  68%|██████▊   | 17/25 [1:26:09<53:11, 398.96s/it]Generation:  18
Best f1_score score: 0.05898494761593559
Generation:  72%|███████▏  | 18/25 [1:34:16<49:37, 425.37s/it]Generation:  19
Best f1_score score: 0.05898494761593559
Generation:  76%|███████▌  | 19/25 [1:43:36<46:35, 465.84s/it]Generation:  20
Best f1_score score: 0.05898494761593559
Generation:  80%|████████  | 20/25 [1:49:32<36:03, 432.68s/it]Generation:  21
Best f1_score score: 0.05898494761593559
Generation:  84%|████████▍ | 21/25 [1:58:50<31:21, 470.31s/it]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x15546c8645e0> 
 Negative values in data passed to MultinomialNB (input X) 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/naive_bayes.py", line 759, in fit
    self._count(X, Y)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/naive_bayes.py", line 881, in _count
    check_non_negative(X, "MultinomialNB (input X)")
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1689, in check_non_negative
    raise ValueError("Negative values in data passed to %s" % whom)
ValueError: Negative values in data passed to MultinomialNB (input X)

WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x15546c84c760> 
 Negative values in data passed to MultinomialNB (input X) 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/naive_bayes.py", line 759, in fit
    self._count(X, Y)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/naive_bayes.py", line 881, in _count
    check_non_negative(X, "MultinomialNB (input X)")
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1689, in check_non_negative
    raise ValueError("Negative values in data passed to %s" % whom)
ValueError: Negative values in data passed to MultinomialNB (input X)

Generation:  22
Best f1_score score: 0.05898494761593559
Generation:  88%|████████▊ | 22/25 [2:07:58<24:41, 493.84s/it]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155474175db0> 
 Negative values in data passed to MultinomialNB (input X) 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/naive_bayes.py", line 759, in fit
    self._count(X, Y)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/naive_bayes.py", line 881, in _count
    check_non_negative(X, "MultinomialNB (input X)")
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1689, in check_non_negative
    raise ValueError("Negative values in data passed to %s" % whom)
ValueError: Negative values in data passed to MultinomialNB (input X)

WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x15546fb64cd0> 
 Negative values in data passed to MultinomialNB (input X) 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/naive_bayes.py", line 759, in fit
    self._count(X, Y)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/naive_bayes.py", line 881, in _count
    check_non_negative(X, "MultinomialNB (input X)")
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1689, in check_non_negative
    raise ValueError("Negative values in data passed to %s" % whom)
ValueError: Negative values in data passed to MultinomialNB (input X)

Generation:  23
Best f1_score score: 0.05898494761593559
Generation:  92%|█████████▏| 23/25 [2:09:29<12:25, 372.90s/it]Generation:  24
Best f1_score score: 0.05898494761593559
Generation:  96%|█████████▌| 24/25 [2:18:20<07:00, 420.30s/it]Generation:  25
Best f1_score score: 0.05898494761593559
Generation: 100%|██████████| 25/25 [2:24:34<00:00, 406.47s/it]Generation: 100%|██████████| 25/25 [2:24:37<00:00, 347.11s/it]
2024-10-18 18:17:46,362 - distributed.scheduler - ERROR - Removing worker 'tcp://127.0.0.1:35967' caused the cluster to lose scattered data, which can't be recovered: {'ndarray-cde8852faab7c2f04fc46bd18261513d', 'ndarray-e6a0bf6ab5eddd1f3b7bbf1cee526317'} (stimulus_id='handle-worker-cleanup-1729300666.361935')
Fitted
Pipeline(steps=[('kneighborsclassifier',
                 KNeighborsClassifier(n_jobs=1, n_neighbors=3, p=1,
                                      weights='distance'))])
score start
train score: {'auroc': 1.0, 'accuracy': 1.0, 'balanced_accuracy': 1.0, 'logloss': 2.2204460492503136e-16, 'f1': 1.0}
original test score: {'auroc': 0.5059059472273371, 'accuracy': 0.10673556664290805, 'balanced_accuracy': 0.057492810214512614, 'logloss': 26.10482024824304, 'f1': 0.057103946953868806}
imputed test score: {'auroc': 0.4994098329325085, 'accuracy': 0.10424091233071989, 'balanced_accuracy': 0.055399913838575315, 'logloss': 26.460989103119218, 'f1': 0.05576942982514202}
score end
check intended
EXP2 Finished
running experiment 3/3 - What is the best automl settings?
<tpot2.search_spaces.pipelines.sequential.SequentialPipeline object at 0x155434ce8550>
Start tpot fit
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
  0%|          | 0/25 [00:00<?, ?it/s]Generation:   0%|          | 0/25 [00:00<?, ?it/s]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155474124be0> 
 Input X contains NaN.
SGDClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/linear_model/_stochastic_gradient.py", line 938, in fit
    return self._fit(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/linear_model/_stochastic_gradient.py", line 725, in _fit
    self._partial_fit(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/linear_model/_stochastic_gradient.py", line 596, in _partial_fit
    X, y = self._validate_data(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 650, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1301, in check_X_y
    X = check_array(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1064, in check_array
    _assert_all_finite(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 123, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 172, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
SGDClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x15547417cca0> 
 Input X contains NaN.
QuadraticDiscriminantAnalysis does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/discriminant_analysis.py", line 911, in fit
    X, y = self._validate_data(X, y)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 650, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1301, in check_X_y
    X = check_array(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1064, in check_array
    _assert_all_finite(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 123, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 172, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
QuadraticDiscriminantAnalysis does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155474124f40> 
 Input X contains NaN.
BernoulliNB does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/naive_bayes.py", line 732, in fit
    X, y = self._check_X_y(X, y)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/naive_bayes.py", line 1184, in _check_X_y
    X, y = super()._check_X_y(X, y, reset=reset)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/naive_bayes.py", line 578, in _check_X_y
    return self._validate_data(X, y, accept_sparse="csr", reset=reset)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 650, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1301, in check_X_y
    X = check_array(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1064, in check_array
    _assert_all_finite(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 123, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 172, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
BernoulliNB does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Generation:  1
Best f1_score score: 0.13516235376266333
Generation:   4%|▍         | 1/25 [04:04<1:37:44, 244.35s/it]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x1554741f2350> 
 Input X contains NaN.
GaussianNB does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/naive_bayes.py", line 263, in fit
    return self._partial_fit(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/naive_bayes.py", line 423, in _partial_fit
    X, y = self._validate_data(X, y, reset=first_call)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 650, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1301, in check_X_y
    X = check_array(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1064, in check_array
    _assert_all_finite(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 123, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 172, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
GaussianNB does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x1554741b5600> 
 Input X contains NaN.
SVC does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/svm/_base.py", line 190, in fit
    X, y = self._validate_data(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 650, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1301, in check_X_y
    X = check_array(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1064, in check_array
    _assert_all_finite(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 123, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 172, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
SVC does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Generation:  2
Best f1_score score: 0.13516235376266333
Generation:   8%|▊         | 2/25 [06:10<1:07:05, 175.00s/it]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155476ef4430> 
 Input X contains NaN.
GaussianNB does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/naive_bayes.py", line 263, in fit
    return self._partial_fit(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/naive_bayes.py", line 423, in _partial_fit
    X, y = self._validate_data(X, y, reset=first_call)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 650, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1301, in check_X_y
    X = check_array(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1064, in check_array
    _assert_all_finite(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 123, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 172, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
GaussianNB does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155474198880> 
 Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 238, in fit
    return self._fit(X, y)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 475, in _fit
    X, y = self._validate_data(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 650, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1301, in check_X_y
    X = check_array(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1064, in check_array
    _assert_all_finite(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 123, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 172, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Generation:  3
Best f1_score score: 0.14859422465741184
Generation:  12%|█▏        | 3/25 [11:17<1:26:07, 234.91s/it]Generation:  4
Best f1_score score: 0.14859422465741184
Generation:  16%|█▌        | 4/25 [19:58<2:01:46, 347.92s/it]Generation:  5
Best f1_score score: 0.15910632150239556
Generation:  20%|██        | 5/25 [22:22<1:31:31, 274.60s/it]Generation:  6
Best f1_score score: 0.16271564350409304
Generation:  24%|██▍       | 6/25 [29:50<1:45:38, 333.62s/it]Generation:  7
Best f1_score score: 0.16579868096541914
Generation:  28%|██▊       | 7/25 [38:03<1:55:40, 385.60s/it]Generation:  8
Best f1_score score: 0.16579868096541914
Generation:  32%|███▏      | 8/25 [46:34<2:00:34, 425.53s/it]WARNING AN INDIVIDUAL TIMED OUT: 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x15546f27f520> 

Generation:  9
Best f1_score score: 0.17356838369869118
Generation:  36%|███▌      | 9/25 [56:38<2:08:23, 481.44s/it]Generation:  10
Best f1_score score: 0.18039268523440127
Generation:  40%|████      | 10/25 [1:04:49<2:01:03, 484.23s/it]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x15546d514ca0> 
 Input X contains NaN.
ExtraTreesClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 377, in fit
    estimator._compute_missing_values_in_feature_mask(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/tree/_classes.py", line 214, in _compute_missing_values_in_feature_mask
    assert_all_finite(X, **common_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 213, in assert_all_finite
    _assert_all_finite(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 123, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 172, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
ExtraTreesClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Generation:  11
Best f1_score score: 0.18039874975671838
Generation:  44%|████▍     | 11/25 [1:13:19<1:54:51, 492.23s/it]Generation:  12
Best f1_score score: 0.1819744795820884
Generation:  48%|████▊     | 12/25 [1:21:19<1:45:47, 488.27s/it]Generation:  13
Best f1_score score: 0.18586394098742398
Generation:  52%|█████▏    | 13/25 [1:29:50<1:39:03, 495.28s/it]Generation:  14
Best f1_score score: 0.18586394098742398
Generation:  56%|█████▌    | 14/25 [1:37:56<1:30:16, 492.39s/it]Generation:  15
Best f1_score score: 0.18901418643306164
Generation:  60%|██████    | 15/25 [1:40:27<1:04:55, 389.52s/it]Generation:  16
Best f1_score score: 0.18901418643306164
Generation:  64%|██████▍   | 16/25 [1:49:00<1:03:59, 426.61s/it]Generation:  17
Best f1_score score: 0.18901418643306164
Generation:  68%|██████▊   | 17/25 [1:57:06<59:16, 444.62s/it]  Generation:  18
Best f1_score score: 0.18901418643306164
Generation:  72%|███████▏  | 18/25 [2:05:34<54:05, 463.62s/it]Generation:  19
Best f1_score score: 0.18901418643306164
Generation:  76%|███████▌  | 19/25 [2:13:33<46:49, 468.20s/it]Generation:  20
Best f1_score score: 0.18901418643306164
Generation:  80%|████████  | 20/25 [2:15:54<30:50, 370.18s/it]Generation:  21
Best f1_score score: 0.18901418643306164
Generation:  84%|████████▍ | 21/25 [2:23:50<26:46, 401.74s/it]Generation:  22
Best f1_score score: 0.19001877525251404
Generation:  88%|████████▊ | 22/25 [2:26:51<16:46, 335.56s/it]Generation:  23
Best f1_score score: 0.19001877525251404
Generation:  92%|█████████▏| 23/25 [2:29:02<09:08, 274.26s/it]Generation:  24
Best f1_score score: 0.19001877525251404
Generation:  96%|█████████▌| 24/25 [2:34:34<04:51, 291.53s/it]Generation:  25
Best f1_score score: 0.19001877525251404
Generation: 100%|██████████| 25/25 [2:43:47<00:00, 370.07s/it]Generation: 100%|██████████| 25/25 [2:43:47<00:00, 393.12s/it]
2024-10-18 21:02:15,722 - distributed.scheduler - ERROR - Removing worker 'tcp://127.0.0.1:36401' caused the cluster to lose scattered data, which can't be recovered: {'DataFrame-24e885ac39ce2a8b1070c3103c5f28b3', 'ndarray-e6a0bf6ab5eddd1f3b7bbf1cee526317'} (stimulus_id='handle-worker-cleanup-1729310535.7227435')
Fitted
Pipeline(steps=[('simpleimputer', SimpleImputer()),
                ('histgradientboostingclassifier',
                 HistGradientBoostingClassifier(early_stopping=True,
                                                l2_regularization=2.07069e-08,
                                                learning_rate=0.0480662389535,
                                                max_features=0.648477755313,
                                                max_leaf_nodes=454,
                                                min_samples_leaf=86,
                                                n_iter_no_change=14, tol=0.0001,
                                                validation_fraction=None))])
transform worked
try transform
transform worked
score start
train score: {'auroc': 0.9151273199765022, 'accuracy': 0.4219390482979861, 'balanced_accuracy': 0.3895128225029204, 'logloss': 1.6187539227855623, 'f1': 0.4327732754601026}
test score: {'auroc': 0.8153916407052607, 'accuracy': 0.28349964362081254, 'balanced_accuracy': 0.20335529163216476, 'logloss': 2.0365276262707033, 'f1': 0.22473570919508715}
original test score: {'auroc': 0.9496281473846451, 'accuracy': 0.550071275837491, 'balanced_accuracy': 0.4659547463864863, 'logloss': 1.254873933540546, 'f1': 0.47748278241940656}
score end
184
lvl
0.5
type
MCAR
num_run
2
class_full
finished
all finished
full run takes
7.836987776491377
hours
DONE
