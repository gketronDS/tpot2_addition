Run: 35
/cm/local/apps/slurm/var/spool/job1025056/slurm_script: line 26: 
pip install -e tpot2
pip install -r tpot2/ImputerExperiments/requirements_.txt
: No such file or directory
RunStart
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
starting loops
../data/c/737/737.pkl
working on 
../data/c/737/class_full_MNAR_0.3_2
1.4929139614105225
running experiment 1/3 - Does large hyperparameter space improve reconstruction accuracy over simple
[I 2024-10-26 06:02:28,150] A new study created in memory with name: no-name-abee61c6-dd8a-4414-bbc7-f5ef19116e45
running
running
running
running
running
running
running
running
running
running
running
running
running
running
running
running
[I 2024-10-26 06:02:28,494] Trial 13 finished with value: 0.13102156861407027 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 06:02:28,668] Trial 7 finished with value: 0.4956956693419148 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'most_frequent'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 06:02:29,085] Trial 0 finished with value: 0.18118178675477337 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 165, 'weights': 'uniform'}. Best is trial 13 with value: 0.13102156861407027.
[I 2024-10-26 06:02:29,343] Trial 2 finished with value: 0.1874001267931225 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 572, 'weights': 'distance'}. Best is trial 13 with value: 0.13102156861407027.
running
running
[I 2024-10-26 06:02:29,535] Trial 4 finished with value: 0.18734979966659784 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 561, 'weights': 'distance'}. Best is trial 13 with value: 0.13102156861407027.
[I 2024-10-26 06:02:29,559] Trial 8 finished with value: 0.1843680831123015 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 770, 'weights': 'uniform'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 06:02:29,816] Trial 5 finished with value: 0.18951561876179973 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 1273, 'weights': 'distance'}. Best is trial 13 with value: 0.13102156861407027.
running
running
[I 2024-10-26 06:02:29,948] Trial 6 finished with value: 0.19035580299321386 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 1554, 'weights': 'distance'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 06:02:30,238] Trial 12 finished with value: 0.18979469700884516 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 1382, 'weights': 'distance'}. Best is trial 13 with value: 0.13102156861407027.
[I 2024-10-26 06:02:30,256] Trial 17 finished with value: 0.18612264380714189 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 341, 'weights': 'distance'}. Best is trial 13 with value: 0.13102156861407027.
running
running
[I 2024-10-26 06:02:30,715] Trial 25 finished with value: 0.13102156861407027 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 06:02:31,033] Trial 26 finished with value: 0.13102156861407027 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 06:02:31,233] Trial 22 finished with value: 0.19092501207171336 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 2147, 'weights': 'distance'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 06:02:31,547] Trial 1 finished with value: 0.16750928954720112 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Ridge', 'initial_strategy': 'median', 'n_nearest_features': 6, 'imputation_order': 'random'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 06:02:36,126] Trial 3 finished with value: 0.16738566111556824 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Ridge', 'initial_strategy': 'median', 'n_nearest_features': 4, 'imputation_order': 'descending'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 06:02:37,079] Trial 10 finished with value: 0.1677743310305108 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Ridge', 'initial_strategy': 'mean', 'n_nearest_features': 4, 'imputation_order': 'ascending'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 06:02:38,654] Trial 9 finished with value: 0.42709112165739505 and parameters: {'model_name': 'GAIN', 'batch_size': 4, 'hint_rate': 0.43896640415801264, 'alpha': 93, 'iterations': 1, 'learning_rate': 0.0005617117358418138, 'p_miss': 0.24516385623212442}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 06:02:40,921] Trial 24 finished with value: 0.1826195495823105 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'median', 'n_nearest_features': 4, 'imputation_order': 'ascending'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 06:02:41,353] Trial 21 finished with value: 0.1807322191732365 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'median', 'n_nearest_features': 6, 'imputation_order': 'descending'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 06:02:41,703] Trial 34 finished with value: 0.13102156861407027 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 06:02:43,325] Trial 28 finished with value: 0.17427267790324955 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Bayesian', 'initial_strategy': 'mean', 'n_nearest_features': 2, 'imputation_order': 'descending', 'sample_posterior': False}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 06:02:43,590] Trial 36 finished with value: 0.13102156861407027 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 06:02:43,934] Trial 37 finished with value: 0.13102156861407027 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 06:03:37,568] Trial 23 finished with value: inf and parameters: {'model_name': 'GAIN', 'batch_size': 7, 'hint_rate': 0.9612043854968703, 'alpha': 15, 'iterations': 198, 'learning_rate': 0.039428098745197045, 'p_miss': 0.03105866226020506}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 06:03:40,435] Trial 20 finished with value: 0.2787476394125809 and parameters: {'model_name': 'VAE', 'batch_size': 2, 'iterations': 16, 'learning_rate': 0.03496156565119876, 'p_miss': 0.2934544208139028}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 06:03:40,745] Trial 40 finished with value: 0.18609631612278063 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'mean'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 06:03:40,975] Trial 41 finished with value: 0.4956956693419148 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'constant'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 06:03:41,303] Trial 42 finished with value: 0.13102156861407027 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 06:05:18,950] Trial 31 finished with value: 0.41122838959104496 and parameters: {'model_name': 'GAIN', 'batch_size': 962, 'hint_rate': 0.6129287979610389, 'alpha': 47, 'iterations': 81, 'learning_rate': 0.0006344495377116297, 'p_miss': 0.29601490448415774}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 06:06:14,897] Trial 29 finished with value: 0.4470807908773738 and parameters: {'model_name': 'GAIN', 'batch_size': 78, 'hint_rate': 0.7792824197128032, 'alpha': 13, 'iterations': 129, 'learning_rate': 0.053054099698860005, 'p_miss': 0.15216887642720084}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 06:14:10,081] Trial 11 finished with value: 0.1748671771226705 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 4, 'imputation_order': 'ascending'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 06:14:10,524] Trial 46 finished with value: 0.13102156861407027 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 06:14:11,021] Trial 47 finished with value: 0.13102156861407027 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 06:14:11,413] Trial 48 finished with value: 0.13102156861407027 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 06:14:26,165] Trial 19 finished with value: 0.17096499139078675 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'constant', 'n_nearest_features': 6, 'imputation_order': 'ascending'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 06:18:03,226] Trial 14 finished with value: 0.18799619574311213 and parameters: {'model_name': 'VAE', 'batch_size': 105, 'iterations': 273, 'learning_rate': 0.0004822078227386548, 'p_miss': 0.06376361949108866}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 06:18:03,663] Trial 51 finished with value: 0.13102156861407027 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 06:18:04,155] Trial 52 finished with value: 0.13102156861407027 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 06:18:04,561] Trial 53 finished with value: 0.13102156861407027 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 06:18:04,904] Trial 54 finished with value: 0.4956956693419148 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'constant'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 06:18:40,812] Trial 30 finished with value: 0.4500048877189629 and parameters: {'model_name': 'GAIN', 'batch_size': 126, 'hint_rate': 0.9467473122399533, 'alpha': 66, 'iterations': 533, 'learning_rate': 0.049314924386657716, 'p_miss': 0.10536569810919014}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 06:18:41,126] Trial 56 finished with value: 0.13102156861407027 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 06:18:41,566] Trial 57 finished with value: 0.13102156861407027 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 06:18:41,915] Trial 58 finished with value: 0.13102156861407027 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 06:18:42,195] Trial 59 finished with value: 0.18609631612278063 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'mean'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 06:18:42,729] Trial 60 finished with value: 0.4956956693419148 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'most_frequent'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 06:45:49,506] Trial 18 finished with value: inf and parameters: {'model_name': 'GAIN', 'batch_size': 4, 'hint_rate': 0.957910032368273, 'alpha': 95, 'iterations': 7931, 'learning_rate': 0.017750405175765087, 'p_miss': 0.22143431747522885}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 06:45:55,634] Trial 62 finished with value: 0.1628713081098508 and parameters: {'model_name': 'VAE', 'batch_size': 835, 'iterations': 1, 'learning_rate': 0.00011448288853622506, 'p_miss': 0.1564075309145709}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 06:45:56,039] Trial 63 finished with value: 0.13102156861407027 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 06:45:56,343] Trial 64 finished with value: 0.13102156861407027 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 07:33:22,689] Trial 55 finished with value: 0.3009030584092656 and parameters: {'model_name': 'VAE', 'batch_size': 1, 'iterations': 1437, 'learning_rate': 0.005037060002189223, 'p_miss': 0.17517695567326247}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 07:33:22,972] Trial 66 finished with value: 0.13102156861407027 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 07:33:23,360] Trial 67 finished with value: 0.13102156861407027 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 07:33:23,653] Trial 68 finished with value: 0.13102156861407027 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 07:33:23,979] Trial 69 finished with value: 0.13102156861407027 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 07:33:24,443] Trial 70 finished with value: 0.13102156861407027 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 07:33:24,830] Trial 71 finished with value: 0.13102156861407027 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 07:33:25,709] Trial 72 finished with value: 0.18609631612278063 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 2304, 'weights': 'uniform'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 07:33:25,985] Trial 73 finished with value: 0.18609631612278063 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'mean'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 07:34:07,719] Trial 74 finished with value: 0.15861516540766263 and parameters: {'model_name': 'VAE', 'batch_size': 27, 'iterations': 9, 'learning_rate': 0.005151745205334596, 'p_miss': 0.09921858141815051}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 07:34:07,971] Trial 75 finished with value: 0.4956956693419148 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'constant'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 07:34:08,369] Trial 76 finished with value: 0.13102156861407027 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 07:34:08,742] Trial 77 finished with value: 0.13102156861407027 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 07:34:09,287] Trial 78 finished with value: 0.4956956693419148 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'most_frequent'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 07:34:09,735] Trial 79 finished with value: 0.13102156861407027 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 07:34:10,120] Trial 80 finished with value: 0.13102156861407027 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 07:34:17,750] Trial 81 finished with value: 0.2866521602214116 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Bayesian', 'initial_strategy': 'most_frequent', 'n_nearest_features': 1, 'imputation_order': 'roman', 'sample_posterior': True}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 07:34:19,067] Trial 82 finished with value: 0.18608433427616503 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 1831, 'weights': 'uniform'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 07:34:19,688] Trial 83 finished with value: 0.4956956693419148 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'most_frequent'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 08:13:14,124] Trial 33 finished with value: 0.19978744660043515 and parameters: {'model_name': 'VAE', 'batch_size': 930, 'iterations': 1840, 'learning_rate': 0.055488856236364195, 'p_miss': 0.024278200242777076}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 08:13:35,524] Trial 85 finished with value: 0.42403893624403005 and parameters: {'model_name': 'GAIN', 'batch_size': 18, 'hint_rate': 0.06301875308123045, 'alpha': 39, 'iterations': 13, 'learning_rate': 0.00011773010862939283, 'p_miss': 0.21799392489146863}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 08:13:35,911] Trial 86 finished with value: 0.13102156861407027 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 08:13:36,326] Trial 87 finished with value: 0.13102156861407027 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 08:13:36,692] Trial 88 finished with value: 0.13102156861407027 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 08:13:37,210] Trial 89 finished with value: 0.13102156861407027 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 08:13:37,523] Trial 90 finished with value: 0.13102156861407027 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 08:13:37,896] Trial 91 finished with value: 0.13102156861407027 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 08:13:38,163] Trial 92 finished with value: 0.4956956693419148 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'constant'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 08:23:02,408] Trial 93 finished with value: 0.1976771988911466 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'constant', 'n_nearest_features': 2, 'imputation_order': 'arabic'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 08:23:02,708] Trial 94 finished with value: 0.18609631612278063 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'mean'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 08:23:11,219] Trial 95 finished with value: 0.44160486341260324 and parameters: {'model_name': 'GAIN', 'batch_size': 296, 'hint_rate': 0.025137489922572254, 'alpha': 70, 'iterations': 4, 'learning_rate': 0.0016070294625734082, 'p_miss': 0.10193034871006088}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 08:23:11,675] Trial 96 finished with value: 0.13102156861407027 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 08:23:12,031] Trial 97 finished with value: 0.13102156861407027 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 08:23:12,467] Trial 98 finished with value: 0.13102156861407027 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 08:23:12,853] Trial 99 finished with value: 0.13102156861407027 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 08:23:13,240] Trial 100 finished with value: 0.13102156861407027 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 08:23:14,382] Trial 101 finished with value: 0.1843016023677695 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 817, 'weights': 'uniform'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 08:23:14,769] Trial 102 finished with value: 0.13102156861407027 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 08:23:40,999] Trial 84 finished with value: inf and parameters: {'model_name': 'GAIN', 'batch_size': 17, 'hint_rate': 0.012526076017382037, 'alpha': 45, 'iterations': 8975, 'learning_rate': 0.0018805355163501558, 'p_miss': 0.025899344731094842}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 08:26:20,895] Trial 104 finished with value: 0.16073919713811405 and parameters: {'model_name': 'VAE', 'batch_size': 1, 'iterations': 38, 'learning_rate': 0.0002499570189109036, 'p_miss': 0.25775580919550267}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 08:26:21,423] Trial 105 finished with value: 0.13102156861407027 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 08:26:21,917] Trial 106 finished with value: 0.13102156861407027 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 08:26:22,267] Trial 107 finished with value: 0.13102156861407027 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 08:26:22,684] Trial 108 finished with value: 0.13102156861407027 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 08:26:23,017] Trial 109 finished with value: 0.13102156861407027 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 08:26:23,454] Trial 110 finished with value: 0.13102156861407027 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 08:26:23,713] Trial 111 finished with value: 0.4956956693419148 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'constant'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 08:26:24,135] Trial 112 finished with value: 0.13102156861407027 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 08:26:24,363] Trial 113 finished with value: 0.18609631612278063 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'mean'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 08:26:31,707] Trial 114 finished with value: 0.1900061231255894 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'constant', 'n_nearest_features': 1, 'imputation_order': 'roman'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 08:26:32,079] Trial 115 finished with value: 0.13102156861407027 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 08:26:32,539] Trial 116 finished with value: 0.13102156861407027 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 08:26:32,958] Trial 117 finished with value: 0.13102156861407027 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 08:26:33,539] Trial 118 finished with value: 0.4956956693419148 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'most_frequent'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 08:26:33,863] Trial 119 finished with value: 0.13102156861407027 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 08:26:34,220] Trial 120 finished with value: 0.13102156861407027 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 08:27:10,278] Trial 121 finished with value: 0.18517611060072858 and parameters: {'model_name': 'VAE', 'batch_size': 210, 'iterations': 4, 'learning_rate': 0.012524306169829455, 'p_miss': 0.18747722351797436}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 08:27:10,964] Trial 122 finished with value: 0.18609631612278063 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 2466, 'weights': 'uniform'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 08:27:11,304] Trial 123 finished with value: 0.13102156861407027 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 08:27:11,755] Trial 124 finished with value: 0.13102156861407027 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 08:27:12,153] Trial 125 finished with value: 0.13102156861407027 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 08:27:12,604] Trial 126 finished with value: 0.13102156861407027 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 08:27:12,909] Trial 127 finished with value: 0.13102156861407027 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 08:27:13,289] Trial 128 finished with value: 0.13102156861407027 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 08:27:13,780] Trial 129 finished with value: 0.13102156861407027 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 08:27:14,210] Trial 130 finished with value: 0.13102156861407027 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 08:27:14,629] Trial 131 finished with value: 0.4956956693419148 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'most_frequent'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 08:27:14,842] Trial 132 finished with value: 0.4956956693419148 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'constant'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 08:27:15,272] Trial 133 finished with value: 0.13102156861407027 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 08:36:57,507] Trial 134 finished with value: inf and parameters: {'model_name': 'GAIN', 'batch_size': 9, 'hint_rate': 0.2979895209473662, 'alpha': 0, 'iterations': 1810, 'learning_rate': 0.013010576134519258, 'p_miss': 0.12915332531445928}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 08:37:16,553] Trial 135 finished with value: 0.3018763821389413 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Bayesian', 'initial_strategy': 'most_frequent', 'n_nearest_features': 5, 'imputation_order': 'arabic', 'sample_posterior': True}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 08:37:17,077] Trial 136 finished with value: 0.13102156861407027 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 08:37:17,582] Trial 137 finished with value: 0.13102156861407027 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 08:37:17,981] Trial 138 finished with value: 0.13102156861407027 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 08:37:18,219] Trial 139 finished with value: 0.18609631612278063 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'mean'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 08:37:18,562] Trial 140 finished with value: 0.13102156861407027 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 08:37:18,934] Trial 141 finished with value: 0.13102156861407027 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 08:37:19,423] Trial 142 finished with value: 0.13102156861407027 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 08:37:19,829] Trial 143 finished with value: 0.13102156861407027 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 08:39:34,125] Trial 144 finished with value: 0.15854193297207525 and parameters: {'model_name': 'VAE', 'batch_size': 37, 'iterations': 33, 'learning_rate': 0.0012099942793341147, 'p_miss': 0.06732857536775956}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 08:39:34,574] Trial 145 finished with value: 0.13102156861407027 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 08:39:35,053] Trial 146 finished with value: 0.13102156861407027 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 08:39:35,415] Trial 147 finished with value: 0.13102156861407027 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 08:39:35,839] Trial 148 finished with value: 0.13102156861407027 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 08:39:36,776] Trial 149 finished with value: 0.18609631612278063 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 1912, 'weights': 'uniform'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 08:39:37,175] Trial 150 finished with value: 0.13102156861407027 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 08:39:37,506] Trial 151 finished with value: 0.13102156861407027 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 08:39:38,053] Trial 152 finished with value: 0.13102156861407027 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 08:39:38,512] Trial 153 finished with value: 0.13102156861407027 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 08:39:38,847] Trial 154 finished with value: 0.13102156861407027 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 08:39:39,105] Trial 155 finished with value: 0.4956956693419148 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'constant'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 08:39:39,508] Trial 156 finished with value: 0.13102156861407027 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 08:39:39,880] Trial 157 finished with value: 0.13102156861407027 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 08:39:40,352] Trial 158 finished with value: 0.13102156861407027 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 08:39:40,800] Trial 159 finished with value: 0.13102156861407027 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 08:39:41,107] Trial 160 finished with value: 0.18609631612278063 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'mean'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 08:39:48,620] Trial 161 finished with value: 0.4511471170756051 and parameters: {'model_name': 'GAIN', 'batch_size': 313, 'hint_rate': 0.32734734419413897, 'alpha': 72, 'iterations': 3, 'learning_rate': 0.004955100649197559, 'p_miss': 0.05478478750187993}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 08:39:49,088] Trial 162 finished with value: 0.4956956693419148 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'most_frequent'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 08:39:49,397] Trial 163 finished with value: 0.13102156861407027 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 08:44:33,499] Trial 27 finished with value: 0.4596832434541155 and parameters: {'model_name': 'GAIN', 'batch_size': 787, 'hint_rate': 0.9291538654344832, 'alpha': 50, 'iterations': 5071, 'learning_rate': 0.004120350852063183, 'p_miss': 0.13612364096334806}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 08:44:44,571] Trial 165 finished with value: 0.1765856199222431 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Bayesian', 'initial_strategy': 'mean', 'n_nearest_features': 2, 'imputation_order': 'random', 'sample_posterior': False}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 08:44:44,894] Trial 166 finished with value: 0.13102156861407027 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 08:44:45,318] Trial 167 finished with value: 0.13102156861407027 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 08:44:45,740] Trial 168 finished with value: 0.13102156861407027 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 08:44:46,087] Trial 169 finished with value: 0.13102156861407027 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 08:44:46,369] Trial 170 finished with value: 0.13102156861407027 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 08:44:46,697] Trial 171 finished with value: 0.13102156861407027 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 08:44:47,103] Trial 172 finished with value: 0.13102156861407027 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 08:44:47,471] Trial 173 finished with value: 0.13102156861407027 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 08:49:33,244] Trial 164 finished with value: 0.2080621540705203 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'mean', 'n_nearest_features': 2, 'imputation_order': 'random'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 09:29:21,887] Trial 174 finished with value: 0.20426780941458428 and parameters: {'model_name': 'VAE', 'batch_size': 43, 'iterations': 613, 'learning_rate': 0.0899452885609052, 'p_miss': 0.2691642059929411}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 09:29:22,301] Trial 176 finished with value: 0.13102156861407027 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 09:29:22,926] Trial 177 finished with value: 0.13102156861407027 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 09:29:23,388] Trial 178 finished with value: 0.13102156861407027 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 09:29:23,809] Trial 179 finished with value: 0.13102156861407027 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 09:29:24,642] Trial 180 finished with value: 0.18991916177543838 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 9, 'weights': 'distance'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 09:29:25,069] Trial 181 finished with value: 0.13102156861407027 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 09:29:25,540] Trial 182 finished with value: 0.13102156861407027 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 09:29:26,056] Trial 183 finished with value: 0.13102156861407027 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 09:29:26,493] Trial 184 finished with value: 0.13102156861407027 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 09:29:26,817] Trial 185 finished with value: 0.13102156861407027 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 09:29:27,300] Trial 186 finished with value: 0.13102156861407027 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 09:29:27,753] Trial 187 finished with value: 0.13102156861407027 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 09:29:28,208] Trial 188 finished with value: 0.13102156861407027 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 09:29:28,472] Trial 189 finished with value: 0.4956956693419148 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'constant'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 09:29:29,079] Trial 190 finished with value: 0.4956956693419148 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'most_frequent'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 09:29:29,537] Trial 191 finished with value: 0.13102156861407027 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 09:29:29,852] Trial 192 finished with value: 0.13102156861407027 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 09:29:30,413] Trial 193 finished with value: 0.13102156861407027 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 09:29:30,816] Trial 194 finished with value: 0.18609631612278063 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'mean'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 09:29:31,272] Trial 195 finished with value: 0.13102156861407027 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 09:29:31,785] Trial 196 finished with value: 0.13102156861407027 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 09:29:32,258] Trial 197 finished with value: 0.13102156861407027 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 09:29:32,730] Trial 198 finished with value: 0.13102156861407027 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.13102156861407027.
running
[I 2024-10-26 09:29:33,260] Trial 199 finished with value: 0.13102156861407027 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.13102156861407027.
[I 2024-10-26 09:30:47,398] Trial 175 finished with value: 0.18938051828965385 and parameters: {'model_name': 'VAE', 'batch_size': 43, 'iterations': 656, 'learning_rate': 0.0002670196716263261, 'p_miss': 0.20675560800028772}. Best is trial 13 with value: 0.13102156861407027.
[I 2024-10-26 09:47:32,775] Trial 61 finished with value: 0.30115466747297315 and parameters: {'model_name': 'VAE', 'batch_size': 1, 'iterations': 3707, 'learning_rate': 0.005546880998978263, 'p_miss': 0.19904922186699028}. Best is trial 13 with value: 0.13102156861407027.
[I 2024-10-26 09:56:35,399] Trial 35 finished with value: 0.2006913883101875 and parameters: {'model_name': 'VAE', 'batch_size': 658, 'iterations': 3570, 'learning_rate': 0.07712817658725743, 'p_miss': 0.016138614854824235}. Best is trial 13 with value: 0.13102156861407027.
[I 2024-10-26 10:03:07,494] Trial 16 finished with value: 0.20440221620197246 and parameters: {'model_name': 'VAE', 'batch_size': 21, 'iterations': 3784, 'learning_rate': 0.0021740909874510893, 'p_miss': 0.24582301231320033}. Best is trial 13 with value: 0.13102156861407027.
[I 2024-10-26 10:27:50,176] Trial 44 finished with value: 0.20321554522052585 and parameters: {'model_name': 'VAE', 'batch_size': 220, 'iterations': 4876, 'learning_rate': 0.003828347885386894, 'p_miss': 0.06713118241531887}. Best is trial 13 with value: 0.13102156861407027.
[I 2024-10-26 10:46:51,972] Trial 15 finished with value: 0.32710938734751965 and parameters: {'model_name': 'VAE', 'batch_size': 1, 'iterations': 6248, 'learning_rate': 0.0008552411839306028, 'p_miss': 0.28225168223592234}. Best is trial 13 with value: 0.13102156861407027.
[I 2024-10-26 11:33:51,982] Trial 43 finished with value: 0.2000379284789394 and parameters: {'model_name': 'VAE', 'batch_size': 801, 'iterations': 5245, 'learning_rate': 0.00016619591146746165, 'p_miss': 0.016325634495585967}. Best is trial 13 with value: 0.13102156861407027.
[I 2024-10-26 12:07:47,595] Trial 32 finished with value: 0.2000161157266473 and parameters: {'model_name': 'VAE', 'batch_size': 855, 'iterations': 6201, 'learning_rate': 0.08254460101714817, 'p_miss': 0.0496035253505359}. Best is trial 13 with value: 0.13102156861407027.
[I 2024-10-26 12:09:46,922] Trial 50 finished with value: 0.20365764460163308 and parameters: {'model_name': 'VAE', 'batch_size': 90, 'iterations': 8066, 'learning_rate': 0.00012793759776653625, 'p_miss': 0.05497618062879388}. Best is trial 13 with value: 0.13102156861407027.
[I 2024-10-26 12:12:46,204] Trial 65 finished with value: 0.3274177626697276 and parameters: {'model_name': 'VAE', 'batch_size': 1, 'iterations': 8155, 'learning_rate': 0.005598344912776703, 'p_miss': 0.1616094743308429}. Best is trial 13 with value: 0.13102156861407027.
[I 2024-10-26 12:12:53,361] Trial 49 finished with value: 0.20199310533790976 and parameters: {'model_name': 'VAE', 'batch_size': 75, 'iterations': 9418, 'learning_rate': 0.004824252782844275, 'p_miss': 0.02954736040050679}. Best is trial 13 with value: 0.13102156861407027.
[I 2024-10-26 12:13:36,035] Trial 45 finished with value: 0.20343838229865305 and parameters: {'model_name': 'VAE', 'batch_size': 74, 'iterations': 9154, 'learning_rate': 0.00354015080340163, 'p_miss': 0.02215843967819689}. Best is trial 13 with value: 0.13102156861407027.
[I 2024-10-26 12:17:32,838] Trial 103 finished with value: 0.2002643359476531 and parameters: {'model_name': 'VAE', 'batch_size': 20, 'iterations': 6821, 'learning_rate': 0.013573918377466503, 'p_miss': 0.2543726792232601}. Best is trial 13 with value: 0.13102156861407027.
[I 2024-10-26 12:21:30,681] Trial 38 finished with value: 0.20088439406663222 and parameters: {'model_name': 'VAE', 'batch_size': 739, 'iterations': 8951, 'learning_rate': 0.08628148318609204, 'p_miss': 0.011699666993659125}. Best is trial 13 with value: 0.13102156861407027.
[I 2024-10-26 12:23:47,711] Trial 39 finished with value: 0.19959734013904118 and parameters: {'model_name': 'VAE', 'batch_size': 958, 'iterations': 9754, 'learning_rate': 0.08490974789521634, 'p_miss': 0.0135343955635909}. Best is trial 13 with value: 0.13102156861407027.
fit
auto fit
auto transform
0    0
1    0
2    0
3    0
4    0
5    0
dtype: int64
0    0
1    0
2    0
3    0
4    0
5    0
dtype: int64
0.13102156861407027
{'model_name': 'SimpleImputer', 'strategy': 'median'}
running experiment 2/3 - Does reconstruction give good automl predictions
Start est fit
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
  0%|          | 0/25 [00:00<?, ?it/s]Generation:   0%|          | 0/25 [00:00<?, ?it/s]Generation:  1
Best f1_score score: 0.7388796661443703
Generation:   4%|▍         | 1/25 [00:39<15:49, 39.58s/it]Generation:  2
Best f1_score score: 0.7587977439863255
Generation:   8%|▊         | 2/25 [00:57<10:15, 26.74s/it]Generation:  3
Best f1_score score: 0.7587977439863255
Generation:  12%|█▏        | 3/25 [01:25<09:57, 27.18s/it]Generation:  4
Best f1_score score: 0.7587977439863255
Generation:  16%|█▌        | 4/25 [01:35<07:08, 20.42s/it]Generation:  5
Best f1_score score: 0.7587977439863255
Generation:  20%|██        | 5/25 [01:47<05:47, 17.36s/it]Generation:  6
Best f1_score score: 0.7587977439863255
Generation:  24%|██▍       | 6/25 [01:55<04:32, 14.36s/it]Generation:  7
Best f1_score score: 0.7587977439863255
Generation:  28%|██▊       | 7/25 [02:04<03:49, 12.75s/it]Generation:  8
Best f1_score score: 0.7587977439863255
Generation:  32%|███▏      | 8/25 [02:15<03:25, 12.06s/it]Generation:  9
Best f1_score score: 0.7587977439863255
Generation:  36%|███▌      | 9/25 [02:28<03:16, 12.25s/it]Generation:  10
Best f1_score score: 0.7587977439863255
Generation:  40%|████      | 10/25 [02:41<03:07, 12.51s/it]Generation:  11
Best f1_score score: 0.7594256725988549
Generation:  44%|████▍     | 11/25 [02:56<03:05, 13.25s/it]Generation:  12
Best f1_score score: 0.7594256725988549
Generation:  48%|████▊     | 12/25 [03:09<02:51, 13.20s/it]Generation:  13
Best f1_score score: 0.7594256725988549
Generation:  52%|█████▏    | 13/25 [03:21<02:35, 12.92s/it]Generation:  14
Best f1_score score: 0.7594256725988549
Generation:  56%|█████▌    | 14/25 [03:34<02:22, 12.97s/it]Generation:  15
Best f1_score score: 0.7594256725988549
Generation:  60%|██████    | 15/25 [03:48<02:11, 13.12s/it]Generation:  16
Best f1_score score: 0.7594256725988549
Generation:  64%|██████▍   | 16/25 [04:03<02:03, 13.78s/it]Generation:  17
Best f1_score score: 0.7594256725988549
Generation:  68%|██████▊   | 17/25 [04:20<01:57, 14.71s/it]Generation:  18
Best f1_score score: 0.7594256725988549
Generation:  72%|███████▏  | 18/25 [05:13<03:04, 26.29s/it]Generation:  19
Best f1_score score: 0.7594256725988549
Generation:  76%|███████▌  | 19/25 [05:42<02:41, 26.97s/it]Generation:  20
Best f1_score score: 0.7594256725988549
Generation:  80%|████████  | 20/25 [05:57<01:57, 23.49s/it]Generation:  21
Best f1_score score: 0.7594256725988549
Generation:  84%|████████▍ | 21/25 [07:29<02:55, 43.91s/it]Generation:  22
Best f1_score score: 0.7594256725988549
Generation:  88%|████████▊ | 22/25 [08:21<02:19, 46.44s/it]Generation:  23
Best f1_score score: 0.7594256725988549
Generation:  92%|█████████▏| 23/25 [08:38<01:15, 37.71s/it]Generation:  24
Best f1_score score: 0.7594256725988549
Generation:  96%|█████████▌| 24/25 [08:55<00:31, 31.39s/it]Generation:  25
Best f1_score score: 0.7594256725988549
Generation: 100%|██████████| 25/25 [09:14<00:00, 27.73s/it]Generation: 100%|██████████| 25/25 [09:18<00:00, 22.35s/it]
2024-10-26 12:33:13,805 - distributed.scheduler - ERROR - Removing worker 'tcp://127.0.0.1:41323' caused the cluster to lose scattered data, which can't be recovered: {'ndarray-65cab8085662043158015172d076bd1a', 'ndarray-bc1ee22df90b340c13f4c4b70d48b351'} (stimulus_id='handle-worker-cleanup-1729971193.8054254')
Fitted
Pipeline(steps=[('randomforestclassifier',
                 RandomForestClassifier(class_weight='balanced',
                                        max_features=0.0669234151951,
                                        min_samples_split=18,
                                        n_estimators=128))])
score start
train score: {'auroc': 0.970254891443763, 'accuracy': 0.896579476861167, 'balanced_accuracy': 0.8963918881452289, 'logloss': 0.34269873902504994, 'f1': 0.8964774836561524}
original test score: {'auroc': 0.8986992307056001, 'accuracy': 0.819935691318328, 'balanced_accuracy': 0.819391595665481, 'logloss': 0.4293843273604581, 'f1': 0.8191879237134165}
imputed test score: {'auroc': 0.8242824054925966, 'accuracy': 0.7347266881028939, 'balanced_accuracy': 0.7345003722392258, 'logloss': 0.5256447043363793, 'f1': 0.7344789313960618}
score end
check intended
EXP2 Finished
running experiment 3/3 - What is the best automl settings?
<tpot2.search_spaces.pipelines.sequential.SequentialPipeline object at 0x155435014670>
Start tpot fit
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
  0%|          | 0/25 [00:00<?, ?it/s]Generation:   0%|          | 0/25 [00:00<?, ?it/s]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155474ccce50> 
 Input X contains NaN.
AdaBoostClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/ensemble/_weight_boosting.py", line 133, in fit
    X, y = self._validate_data(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 650, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1301, in check_X_y
    X = check_array(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1064, in check_array
    _assert_all_finite(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 123, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 172, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
AdaBoostClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Generation:  1
Best f1_score score: 0.7627930989796126
Generation:   4%|▍         | 1/25 [02:38<1:03:13, 158.06s/it]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155474d1ad40> 
 Input X contains NaN.
MLPClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/neural_network/_multilayer_perceptron.py", line 751, in fit
    return self._fit(X, y, incremental=False)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/neural_network/_multilayer_perceptron.py", line 441, in _fit
    X, y = self._validate_input(X, y, incremental, reset=first_pass)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/neural_network/_multilayer_perceptron.py", line 1096, in _validate_input
    X, y = self._validate_data(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 650, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1301, in check_X_y
    X = check_array(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1064, in check_array
    _assert_all_finite(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 123, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 172, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
MLPClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155474595f00> 
 Input X contains NaN.
MLPClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/neural_network/_multilayer_perceptron.py", line 751, in fit
    return self._fit(X, y, incremental=False)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/neural_network/_multilayer_perceptron.py", line 441, in _fit
    X, y = self._validate_input(X, y, incremental, reset=first_pass)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/neural_network/_multilayer_perceptron.py", line 1096, in _validate_input
    X, y = self._validate_data(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 650, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1301, in check_X_y
    X = check_array(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1064, in check_array
    _assert_all_finite(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 123, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 172, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
MLPClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Generation:  2
Best f1_score score: 0.7800498997954664
Generation:   8%|▊         | 2/25 [05:17<1:00:59, 159.09s/it]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155474584bb0> 
 Negative values in data passed to MultinomialNB (input X) 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/naive_bayes.py", line 759, in fit
    self._count(X, Y)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/naive_bayes.py", line 881, in _count
    check_non_negative(X, "MultinomialNB (input X)")
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1689, in check_non_negative
    raise ValueError("Negative values in data passed to %s" % whom)
ValueError: Negative values in data passed to MultinomialNB (input X)

WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x15543bcc5780> 
 Negative values in data passed to MultinomialNB (input X) 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/naive_bayes.py", line 759, in fit
    self._count(X, Y)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/naive_bayes.py", line 881, in _count
    check_non_negative(X, "MultinomialNB (input X)")
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1689, in check_non_negative
    raise ValueError("Negative values in data passed to %s" % whom)
ValueError: Negative values in data passed to MultinomialNB (input X)

Generation:  3
Best f1_score score: 0.7800498997954664
Generation:  12%|█▏        | 3/25 [07:57<58:25, 159.35s/it]  Generation:  4
Best f1_score score: 0.7806021708250045
Generation:  16%|█▌        | 4/25 [10:39<56:09, 160.45s/it]Generation:  5
Best f1_score score: 0.7806021708250045
Generation:  20%|██        | 5/25 [13:20<53:28, 160.43s/it]Generation:  6
Best f1_score score: 0.7806021708250045
Generation:  24%|██▍       | 6/25 [16:18<52:47, 166.70s/it]Generation:  7
Best f1_score score: 0.7821764030961365
Generation:  28%|██▊       | 7/25 [19:03<49:46, 165.91s/it]malloc(): invalid next size (unsorted)
2024-10-26 12:53:04,234 - distributed.nanny - WARNING - Restarting worker
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Generation:  8
Best f1_score score: 0.788312170868898
Generation:  32%|███▏      | 8/25 [22:14<49:17, 173.96s/it]Generation:  9
Best f1_score score: 0.788312170868898
Generation:  36%|███▌      | 9/25 [24:58<45:34, 170.93s/it]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x15545c23f9a0> 
 Negative values in data passed to MultinomialNB (input X) 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/naive_bayes.py", line 759, in fit
    self._count(X, Y)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/naive_bayes.py", line 881, in _count
    check_non_negative(X, "MultinomialNB (input X)")
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1689, in check_non_negative
    raise ValueError("Negative values in data passed to %s" % whom)
ValueError: Negative values in data passed to MultinomialNB (input X)

WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155449eea590> 
 Negative values in data passed to MultinomialNB (input X) 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/naive_bayes.py", line 759, in fit
    self._count(X, Y)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/naive_bayes.py", line 881, in _count
    check_non_negative(X, "MultinomialNB (input X)")
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1689, in check_non_negative
    raise ValueError("Negative values in data passed to %s" % whom)
ValueError: Negative values in data passed to MultinomialNB (input X)

Generation:  10
Best f1_score score: 0.7914970158877319
Generation:  40%|████      | 10/25 [27:39<41:55, 167.73s/it]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x1554573798d0> 
 Input X contains NaN.
LogisticRegression does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py", line 1223, in fit
    X, y = self._validate_data(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 650, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1301, in check_X_y
    X = check_array(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1064, in check_array
    _assert_all_finite(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 123, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 172, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
LogisticRegression does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Generation:  11
Best f1_score score: 0.7914970158877319
Generation:  44%|████▍     | 11/25 [30:20<38:41, 165.84s/it]Generation:  12
Best f1_score score: 0.7914970158877319
Generation:  48%|████▊     | 12/25 [33:02<35:40, 164.67s/it]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x15545501cfa0> 
 Negative values in data passed to MultinomialNB (input X) 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/naive_bayes.py", line 759, in fit
    self._count(X, Y)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/naive_bayes.py", line 881, in _count
    check_non_negative(X, "MultinomialNB (input X)")
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1689, in check_non_negative
    raise ValueError("Negative values in data passed to %s" % whom)
ValueError: Negative values in data passed to MultinomialNB (input X)

Generation:  13
Best f1_score score: 0.7927940160863172
Generation:  52%|█████▏    | 13/25 [35:41<32:35, 162.93s/it]Generation:  14
Best f1_score score: 0.7927940160863172
Generation:  56%|█████▌    | 14/25 [38:22<29:44, 162.23s/it]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x1554530c5480> 
 Input X contains NaN.
LogisticRegression does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py", line 1223, in fit
    X, y = self._validate_data(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 650, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1301, in check_X_y
    X = check_array(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1064, in check_array
    _assert_all_finite(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 123, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 172, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
LogisticRegression does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Generation:  15
Best f1_score score: 0.7927940160863172
Generation:  60%|██████    | 15/25 [41:39<28:47, 172.73s/it]Generation:  16
Best f1_score score: 0.7927940160863172
Generation:  64%|██████▍   | 16/25 [44:20<25:22, 169.15s/it]Generation:  17
Best f1_score score: 0.7927940160863172
Generation:  68%|██████▊   | 17/25 [47:00<22:11, 166.45s/it]Generation:  18
Best f1_score score: 0.7927940160863172
Generation:  72%|███████▏  | 18/25 [49:42<19:16, 165.23s/it]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x15545fa41c60> 
 Input X contains NaN.
LinearSVC does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/svm/_classes.py", line 302, in fit
    X, y = self._validate_data(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 650, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1301, in check_X_y
    X = check_array(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1064, in check_array
    _assert_all_finite(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 123, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 172, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
LinearSVC does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Generation:  19
Best f1_score score: 0.7927940160863172
Generation:  76%|███████▌  | 19/25 [52:22<16:21, 163.56s/it]Generation:  20
Best f1_score score: 0.7927940160863172
Generation:  80%|████████  | 20/25 [55:03<13:34, 162.82s/it]Generation:  21
Best f1_score score: 0.7958397689769164
Generation:  84%|████████▍ | 21/25 [57:56<11:03, 165.78s/it]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x15542dcb9540> 
 Negative values in data passed to MultinomialNB (input X) 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/naive_bayes.py", line 759, in fit
    self._count(X, Y)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/naive_bayes.py", line 881, in _count
    check_non_negative(X, "MultinomialNB (input X)")
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1689, in check_non_negative
    raise ValueError("Negative values in data passed to %s" % whom)
ValueError: Negative values in data passed to MultinomialNB (input X)

Generation:  22
Best f1_score score: 0.7958397689769164
Generation:  88%|████████▊ | 22/25 [1:03:57<11:13, 224.50s/it]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x1554527cc250> 
 Input X contains NaN.
LogisticRegression does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py", line 1223, in fit
    X, y = self._validate_data(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 650, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1301, in check_X_y
    X = check_array(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1064, in check_array
    _assert_all_finite(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 123, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 172, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
LogisticRegression does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Generation:  23
Best f1_score score: 0.7958397689769164
Generation:  92%|█████████▏| 23/25 [1:04:05<05:18, 159.40s/it]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x15545508eef0> 
 Input X contains NaN.
LogisticRegression does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py", line 1223, in fit
    X, y = self._validate_data(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 650, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1301, in check_X_y
    X = check_array(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1064, in check_array
    _assert_all_finite(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 123, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 172, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
LogisticRegression does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Generation:  24
Best f1_score score: 0.7958397689769164
Generation:  96%|█████████▌| 24/25 [1:06:46<02:40, 160.10s/it]Generation:  25
Best f1_score score: 0.8004537905753732
Generation: 100%|██████████| 25/25 [1:09:29<00:00, 160.69s/it]Generation: 100%|██████████| 25/25 [1:09:29<00:00, 166.76s/it]
2024-10-26 13:42:54,525 - distributed.scheduler - ERROR - Removing worker 'tcp://127.0.0.1:36169' caused the cluster to lose scattered data, which can't be recovered: {'DataFrame-dce114e561d9617b409fb467d218132f', 'ndarray-bc1ee22df90b340c13f4c4b70d48b351'} (stimulus_id='handle-worker-cleanup-1729975374.525773')
Fitted
Pipeline(steps=[('iterativeimputer',
                 IterativeImputer(estimator=BayesianRidge(),
                                  initial_strategy='constant',
                                  n_nearest_features=28)),
                ('svc',
                 SVC(C=30701.937746901895, class_weight='balanced',
                     coef0=0.4725529293852, degree=4, gamma=0.0138493847046,
                     kernel='poly', max_iter=3000, probability=True,
                     shrinking=False))])
transform worked
try transform
transform worked
score start
train score: {'auroc': 0.8756001751617526, 'accuracy': 0.806841046277666, 'balanced_accuracy': 0.8067435979156787, 'logloss': 0.447940192564089, 'f1': 0.8067719247771268}
test score: {'auroc': 0.8589833733145835, 'accuracy': 0.7684887459807074, 'balanced_accuracy': 0.7683121019108281, 'logloss': 0.47391453610430095, 'f1': 0.7683354542350787}
original test score: {'auroc': 0.9222226817768219, 'accuracy': 0.8488745980707395, 'balanced_accuracy': 0.8485813549507817, 'logloss': 0.36417224561209843, 'f1': 0.8486492643175911}
score end
737
lvl
0.3
type
MNAR
num_run
2
class_full
finished
all finished
full run takes
7.677482651339637
hours
DONE
