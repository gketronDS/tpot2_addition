Run: 25
/cm/local/apps/slurm/var/spool/job1024495/slurm_script: line 26: 
pip install -e tpot2
pip install -r tpot2/ImputerExperiments/requirements_.txt
: No such file or directory
RunStart
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
starting loops
../data/c/737/737.pkl
working on 
../data/c/737/class_full_MCAR_0.01_2
4.9683167934417725
running experiment 1/3 - Does large hyperparameter space improve reconstruction accuracy over simple
[I 2024-10-25 23:10:56,784] A new study created in memory with name: no-name-210356f5-2ba2-45bf-bca2-b0690d291152
running
running
running
running
running
running
running
running
running
running
running
running
[I 2024-10-25 23:10:56,849] Trial 1 finished with value: 0.5634672125752068 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'constant'}. Best is trial 1 with value: 0.5634672125752068.
running
running
running
running
running
[I 2024-10-25 23:10:57,157] Trial 6 finished with value: 0.5634672125752068 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'most_frequent'}. Best is trial 1 with value: 0.5634672125752068.
running
[I 2024-10-25 23:10:57,558] Trial 13 finished with value: 0.1262344379408548 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 2328, 'weights': 'uniform'}. Best is trial 13 with value: 0.1262344379408548.
running
[I 2024-10-25 23:10:57,717] Trial 12 finished with value: 0.09777847974614189 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 795, 'weights': 'uniform'}. Best is trial 12 with value: 0.09777847974614189.
running
[I 2024-10-25 23:10:57,954] Trial 18 finished with value: 0.12660445263503006 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 12 with value: 0.09777847974614189.
running
[I 2024-10-25 23:10:58,140] Trial 16 finished with value: 0.08933901477481383 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 814, 'weights': 'distance'}. Best is trial 16 with value: 0.08933901477481383.
running
[I 2024-10-25 23:10:58,300] Trial 21 finished with value: 0.1262344379408548 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'mean'}. Best is trial 16 with value: 0.08933901477481383.
running
[I 2024-10-25 23:10:58,437] Trial 14 finished with value: 0.09486013600291371 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 1155, 'weights': 'distance'}. Best is trial 16 with value: 0.08933901477481383.
running
[I 2024-10-25 23:10:58,641] Trial 17 finished with value: 0.10533056474961393 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 2283, 'weights': 'distance'}. Best is trial 16 with value: 0.08933901477481383.
running
[I 2024-10-25 23:10:59,003] Trial 23 finished with value: 0.1262344379408548 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 1979, 'weights': 'uniform'}. Best is trial 16 with value: 0.08933901477481383.
running
[I 2024-10-25 23:10:59,522] Trial 24 finished with value: 0.09601390959761542 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Ridge', 'initial_strategy': 'mean', 'n_nearest_features': 1, 'imputation_order': 'roman'}. Best is trial 16 with value: 0.08933901477481383.
running
[I 2024-10-25 23:11:04,712] Trial 5 finished with value: 0.17944399808311895 and parameters: {'model_name': 'VAE', 'batch_size': 1, 'iterations': 1, 'learning_rate': 0.021239803316836586, 'p_miss': 0.2879106804289263}. Best is trial 16 with value: 0.08933901477481383.
running
[I 2024-10-25 23:11:24,053] Trial 20 finished with value: 0.33226372141692007 and parameters: {'model_name': 'GAIN', 'batch_size': 579, 'hint_rate': 0.09153355098519496, 'alpha': 56, 'iterations': 12, 'learning_rate': 0.0029452882318760144, 'p_miss': 0.049384196561505674}. Best is trial 16 with value: 0.08933901477481383.
running
[I 2024-10-25 23:11:25,169] Trial 28 finished with value: 0.08355510701731728 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 4, 'weights': 'distance'}. Best is trial 28 with value: 0.08355510701731728.
running
[I 2024-10-25 23:11:29,981] Trial 26 finished with value: 0.33569498278619203 and parameters: {'model_name': 'GAIN', 'batch_size': 153, 'hint_rate': 0.18797024887028535, 'alpha': 44, 'iterations': 17, 'learning_rate': 0.00012907459130684503, 'p_miss': 0.1256819116770041}. Best is trial 28 with value: 0.08355510701731728.
running
[I 2024-10-25 23:12:01,248] Trial 4 finished with value: 0.1306993921593627 and parameters: {'model_name': 'VAE', 'batch_size': 151, 'iterations': 11, 'learning_rate': 0.014373870518131852, 'p_miss': 0.12706311342986323}. Best is trial 28 with value: 0.08355510701731728.
running
[I 2024-10-25 23:12:03,609] Trial 10 finished with value: inf and parameters: {'model_name': 'GAIN', 'batch_size': 4, 'hint_rate': 0.6440556055078055, 'alpha': 74, 'iterations': 219, 'learning_rate': 0.00010195837890737675, 'p_miss': 0.12572483461068612}. Best is trial 28 with value: 0.08355510701731728.
running
[I 2024-10-25 23:12:09,546] Trial 31 finished with value: 0.07713682403863048 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Bayesian', 'initial_strategy': 'median', 'n_nearest_features': 6, 'imputation_order': 'descending', 'sample_posterior': False}. Best is trial 31 with value: 0.07713682403863048.
running
[I 2024-10-25 23:12:11,521] Trial 32 finished with value: 0.08232483345283939 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'constant', 'n_nearest_features': 6, 'imputation_order': 'arabic'}. Best is trial 31 with value: 0.07713682403863048.
running
[I 2024-10-25 23:12:14,951] Trial 11 finished with value: inf and parameters: {'model_name': 'GAIN', 'batch_size': 53, 'hint_rate': 0.8147052569390917, 'alpha': 62, 'iterations': 319, 'learning_rate': 0.002779960612833271, 'p_miss': 0.016910345841645715}. Best is trial 31 with value: 0.07713682403863048.
running
[I 2024-10-25 23:12:16,032] Trial 33 finished with value: 0.07713682403863048 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Bayesian', 'initial_strategy': 'median', 'n_nearest_features': 6, 'imputation_order': 'descending', 'sample_posterior': False}. Best is trial 31 with value: 0.07713682403863048.
running
[I 2024-10-25 23:12:20,114] Trial 34 finished with value: 0.08196350648655307 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'median', 'n_nearest_features': 6, 'imputation_order': 'arabic'}. Best is trial 31 with value: 0.07713682403863048.
running
[I 2024-10-25 23:12:23,506] Trial 36 finished with value: 0.07713682403863048 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Bayesian', 'initial_strategy': 'median', 'n_nearest_features': 6, 'imputation_order': 'descending', 'sample_posterior': False}. Best is trial 31 with value: 0.07713682403863048.
running
[I 2024-10-25 23:12:24,489] Trial 35 finished with value: 0.08232483345283939 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'constant', 'n_nearest_features': 6, 'imputation_order': 'arabic'}. Best is trial 31 with value: 0.07713682403863048.
running
[I 2024-10-25 23:12:26,509] Trial 37 finished with value: 0.07713682403863048 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Bayesian', 'initial_strategy': 'median', 'n_nearest_features': 6, 'imputation_order': 'descending', 'sample_posterior': False}. Best is trial 31 with value: 0.07713682403863048.
running
[I 2024-10-25 23:12:29,531] Trial 38 finished with value: 0.07713682403863048 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Bayesian', 'initial_strategy': 'median', 'n_nearest_features': 6, 'imputation_order': 'descending', 'sample_posterior': False}. Best is trial 31 with value: 0.07713682403863048.
running
[I 2024-10-25 23:12:30,659] Trial 39 finished with value: 0.0771368240386305 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Bayesian', 'initial_strategy': 'median', 'n_nearest_features': 5, 'imputation_order': 'descending', 'sample_posterior': False}. Best is trial 31 with value: 0.07713682403863048.
running
[I 2024-10-25 23:12:38,520] Trial 40 finished with value: 0.07767490015282119 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Bayesian', 'initial_strategy': 'median', 'n_nearest_features': 4, 'imputation_order': 'descending', 'sample_posterior': False}. Best is trial 31 with value: 0.07713682403863048.
running
[I 2024-10-25 23:12:43,227] Trial 41 finished with value: 0.0785236244567253 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Bayesian', 'initial_strategy': 'most_frequent', 'n_nearest_features': 4, 'imputation_order': 'descending', 'sample_posterior': False}. Best is trial 31 with value: 0.07713682403863048.
running
[I 2024-10-25 23:15:14,784] Trial 15 finished with value: 0.176381233565596 and parameters: {'model_name': 'VAE', 'batch_size': 2, 'iterations': 82, 'learning_rate': 0.0001782795169913527, 'p_miss': 0.2867974058863933}. Best is trial 31 with value: 0.07713682403863048.
running
[I 2024-10-25 23:25:06,388] Trial 7 finished with value: 0.07565137035921946 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'median', 'n_nearest_features': 4, 'imputation_order': 'arabic'}. Best is trial 7 with value: 0.07565137035921946.
running
[I 2024-10-25 23:25:49,850] Trial 44 finished with value: 0.08600181444010335 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'median', 'n_nearest_features': 2, 'imputation_order': 'ascending'}. Best is trial 7 with value: 0.07565137035921946.
running
[I 2024-10-25 23:26:14,952] Trial 3 finished with value: 0.363075250138877 and parameters: {'model_name': 'GAIN', 'batch_size': 6, 'hint_rate': 0.2785702428590203, 'alpha': 2, 'iterations': 561, 'learning_rate': 0.030956995563646263, 'p_miss': 0.2311126801404028}. Best is trial 7 with value: 0.07565137035921946.
running
[I 2024-10-25 23:26:58,121] Trial 43 finished with value: 0.08105390002220314 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 4, 'imputation_order': 'ascending'}. Best is trial 7 with value: 0.07565137035921946.
running
[I 2024-10-25 23:27:00,063] Trial 42 finished with value: 0.07458618879506253 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 4, 'imputation_order': 'descending'}. Best is trial 42 with value: 0.07458618879506253.
running
[I 2024-10-25 23:27:54,878] Trial 45 finished with value: 0.08929207750598005 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'median', 'n_nearest_features': 2, 'imputation_order': 'random'}. Best is trial 42 with value: 0.07458618879506253.
running
[I 2024-10-25 23:36:34,693] Trial 2 finished with value: 0.13304303682873975 and parameters: {'model_name': 'VAE', 'batch_size': 111, 'iterations': 468, 'learning_rate': 0.0012266748117627168, 'p_miss': 0.21569315572746614}. Best is trial 42 with value: 0.07458618879506253.
running
[I 2024-10-25 23:36:53,111] Trial 0 finished with value: 0.3874094870463021 and parameters: {'model_name': 'GAIN', 'batch_size': 77, 'hint_rate': 0.47370071016251064, 'alpha': 31, 'iterations': 916, 'learning_rate': 0.07636158368910939, 'p_miss': 0.21600864844542572}. Best is trial 42 with value: 0.07458618879506253.
running
[I 2024-10-25 23:37:50,515] Trial 46 finished with value: 0.08337226073935881 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'median', 'n_nearest_features': 2, 'imputation_order': 'ascending'}. Best is trial 42 with value: 0.07458618879506253.
running
[I 2024-10-25 23:40:36,518] Trial 50 finished with value: 0.08372477909101858 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 3, 'imputation_order': 'random'}. Best is trial 42 with value: 0.07458618879506253.
running
[I 2024-10-25 23:40:53,836] Trial 47 finished with value: 0.07628518712106733 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'median', 'n_nearest_features': 5, 'imputation_order': 'random'}. Best is trial 42 with value: 0.07458618879506253.
running
[I 2024-10-25 23:41:17,520] Trial 48 finished with value: 0.07391123323809229 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'median', 'n_nearest_features': 5, 'imputation_order': 'descending'}. Best is trial 48 with value: 0.07391123323809229.
running
[I 2024-10-25 23:41:45,479] Trial 49 finished with value: 0.07561831006827435 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'median', 'n_nearest_features': 5, 'imputation_order': 'random'}. Best is trial 48 with value: 0.07391123323809229.
running
[I 2024-10-25 23:42:48,315] Trial 51 finished with value: 0.07550005072055806 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 5, 'imputation_order': 'descending'}. Best is trial 48 with value: 0.07391123323809229.
running
[I 2024-10-25 23:51:10,613] Trial 52 finished with value: 0.07380225368549806 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 5, 'imputation_order': 'descending'}. Best is trial 52 with value: 0.07380225368549806.
running
[I 2024-10-25 23:51:32,159] Trial 53 finished with value: 0.07435819847026667 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 5, 'imputation_order': 'descending'}. Best is trial 52 with value: 0.07380225368549806.
running
[I 2024-10-25 23:55:28,526] Trial 56 finished with value: 0.07518762145792993 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'mean', 'n_nearest_features': 5, 'imputation_order': 'random'}. Best is trial 52 with value: 0.07380225368549806.
running
[I 2024-10-25 23:59:43,605] Trial 29 finished with value: 0.33728680625462815 and parameters: {'model_name': 'GAIN', 'batch_size': 38, 'hint_rate': 0.9852502507231294, 'alpha': 2, 'iterations': 1711, 'learning_rate': 0.00020577640464995841, 'p_miss': 0.22719813015396723}. Best is trial 52 with value: 0.07380225368549806.
running
[I 2024-10-26 00:21:57,743] Trial 8 finished with value: 0.13027462347956692 and parameters: {'model_name': 'VAE', 'batch_size': 430, 'iterations': 909, 'learning_rate': 0.01708854641224094, 'p_miss': 0.14994801402008814}. Best is trial 52 with value: 0.07380225368549806.
running
[I 2024-10-26 00:22:02,729] Trial 64 finished with value: 0.19099428045100048 and parameters: {'model_name': 'VAE', 'batch_size': 13, 'iterations': 1, 'learning_rate': 0.0006342298105003755, 'p_miss': 0.07738874295902924}. Best is trial 52 with value: 0.07380225368549806.
running
[I 2024-10-26 00:22:03,060] Trial 65 finished with value: 0.1262344379408548 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'mean'}. Best is trial 52 with value: 0.07380225368549806.
running
[I 2024-10-26 00:35:50,903] Trial 66 finished with value: 0.07373311408690625 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 5, 'imputation_order': 'descending'}. Best is trial 66 with value: 0.07373311408690625.
running
[I 2024-10-26 00:47:48,267] Trial 25 finished with value: 0.14027778354090753 and parameters: {'model_name': 'VAE', 'batch_size': 5, 'iterations': 1436, 'learning_rate': 0.02005693772008015, 'p_miss': 0.0506255615060167}. Best is trial 66 with value: 0.07373311408690625.
running
[I 2024-10-26 00:49:48,750] Trial 67 finished with value: 0.07612461260698399 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 5, 'imputation_order': 'descending'}. Best is trial 66 with value: 0.07373311408690625.
running
[I 2024-10-26 01:01:52,512] Trial 68 finished with value: 0.07453533105120873 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 5, 'imputation_order': 'descending'}. Best is trial 66 with value: 0.07373311408690625.
running
[I 2024-10-26 01:03:53,896] Trial 69 finished with value: 0.07495337382376067 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'mean', 'n_nearest_features': 5, 'imputation_order': 'descending'}. Best is trial 66 with value: 0.07373311408690625.
running
[I 2024-10-26 01:03:54,415] Trial 71 finished with value: 0.5634672125752068 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'most_frequent'}. Best is trial 66 with value: 0.07373311408690625.
running
[I 2024-10-26 01:03:57,173] Trial 72 finished with value: 0.07722506204181856 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Ridge', 'initial_strategy': 'most_frequent', 'n_nearest_features': 5, 'imputation_order': 'descending'}. Best is trial 66 with value: 0.07373311408690625.
running
[I 2024-10-26 01:15:34,031] Trial 70 finished with value: 0.07540653547620746 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 5, 'imputation_order': 'descending'}. Best is trial 66 with value: 0.07373311408690625.
running
[I 2024-10-26 01:35:55,792] Trial 19 finished with value: 0.13033939667053066 and parameters: {'model_name': 'VAE', 'batch_size': 980, 'iterations': 2044, 'learning_rate': 0.0690827553834532, 'p_miss': 0.012174715879756774}. Best is trial 66 with value: 0.07373311408690625.
running
[I 2024-10-26 04:04:23,072] Trial 9 finished with value: 0.1366761589870194 and parameters: {'model_name': 'VAE', 'batch_size': 13, 'iterations': 5510, 'learning_rate': 0.00028140836815163876, 'p_miss': 0.09476107742564535}. Best is trial 66 with value: 0.07373311408690625.
running
[I 2024-10-26 04:10:05,017] Trial 27 finished with value: 0.327252883255103 and parameters: {'model_name': 'GAIN', 'batch_size': 875, 'hint_rate': 0.3445757539013158, 'alpha': 28, 'iterations': 9412, 'learning_rate': 0.00012005851511267412, 'p_miss': 0.01386136536012178}. Best is trial 66 with value: 0.07373311408690625.
running
[I 2024-10-26 04:17:49,600] Trial 76 finished with value: 0.07531243415939297 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 5, 'imputation_order': 'descending'}. Best is trial 66 with value: 0.07373311408690625.
running
[I 2024-10-26 04:24:08,153] Trial 77 finished with value: 0.07607909567764182 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 5, 'imputation_order': 'descending'}. Best is trial 66 with value: 0.07373311408690625.
running
[I 2024-10-26 04:31:01,601] Trial 78 finished with value: 0.078443307098078 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'mean', 'n_nearest_features': 4, 'imputation_order': 'descending'}. Best is trial 66 with value: 0.07373311408690625.
running
[I 2024-10-26 04:36:58,682] Trial 79 finished with value: 0.07830081108232397 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'mean', 'n_nearest_features': 4, 'imputation_order': 'roman'}. Best is trial 66 with value: 0.07373311408690625.
running
[I 2024-10-26 04:40:21,277] Trial 22 finished with value: 0.21463647921112025 and parameters: {'model_name': 'VAE', 'batch_size': 1, 'iterations': 5823, 'learning_rate': 0.00021564196502243355, 'p_miss': 0.21361394320685526}. Best is trial 66 with value: 0.07373311408690625.
running
[I 2024-10-26 04:44:10,873] Trial 80 finished with value: 0.07721751578826666 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 4, 'imputation_order': 'roman'}. Best is trial 66 with value: 0.07373311408690625.
running
[I 2024-10-26 04:44:11,139] Trial 83 finished with value: 0.5634672125752068 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'constant'}. Best is trial 66 with value: 0.07373311408690625.
running
[I 2024-10-26 04:44:15,421] Trial 84 finished with value: 0.07722506204181856 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Ridge', 'initial_strategy': 'most_frequent', 'n_nearest_features': 5, 'imputation_order': 'descending'}. Best is trial 66 with value: 0.07373311408690625.
running
[I 2024-10-26 04:44:16,748] Trial 85 finished with value: 0.07649966482703836 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 111, 'weights': 'uniform'}. Best is trial 66 with value: 0.07373311408690625.
running
[I 2024-10-26 04:51:15,563] Trial 81 finished with value: 0.0775074777282538 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 5, 'imputation_order': 'descending'}. Best is trial 66 with value: 0.07373311408690625.
running
[I 2024-10-26 04:54:56,484] Trial 82 finished with value: 0.07375602365754562 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 5, 'imputation_order': 'descending'}. Best is trial 66 with value: 0.07373311408690625.
running
[I 2024-10-26 04:59:05,328] Trial 86 finished with value: 0.07395350492976696 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'mean', 'n_nearest_features': 5, 'imputation_order': 'descending'}. Best is trial 66 with value: 0.07373311408690625.
running
[I 2024-10-26 05:05:53,953] Trial 87 finished with value: 0.07451579226059675 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'mean', 'n_nearest_features': 5, 'imputation_order': 'descending'}. Best is trial 66 with value: 0.07373311408690625.
running
[I 2024-10-26 05:06:00,779] Trial 90 finished with value: 0.33693621170795496 and parameters: {'model_name': 'GAIN', 'batch_size': 26, 'hint_rate': 0.6483238708178805, 'alpha': 89, 'iterations': 3, 'learning_rate': 0.007079261103427757, 'p_miss': 0.1811304563683512}. Best is trial 66 with value: 0.07373311408690625.
running
[I 2024-10-26 05:08:38,947] Trial 54 finished with value: 0.13737032034397992 and parameters: {'model_name': 'VAE', 'batch_size': 14, 'iterations': 6239, 'learning_rate': 0.00046423539064783235, 'p_miss': 0.18081334004084715}. Best is trial 66 with value: 0.07373311408690625.
running
[I 2024-10-26 05:09:18,626] Trial 88 finished with value: 0.07544857705956175 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 5, 'imputation_order': 'descending'}. Best is trial 66 with value: 0.07373311408690625.
running
[I 2024-10-26 05:09:30,320] Trial 93 finished with value: 0.0825138711079375 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'mean', 'n_nearest_features': 5, 'imputation_order': 'descending'}. Best is trial 66 with value: 0.07373311408690625.
running
[I 2024-10-26 05:13:49,206] Trial 89 finished with value: 0.0737888681100242 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 5, 'imputation_order': 'descending'}. Best is trial 66 with value: 0.07373311408690625.
running
[I 2024-10-26 05:18:44,217] Trial 75 finished with value: 0.35762479792064095 and parameters: {'model_name': 'GAIN', 'batch_size': 18, 'hint_rate': 0.4716609442021523, 'alpha': 100, 'iterations': 8683, 'learning_rate': 0.0006225064062963711, 'p_miss': 0.18024467331226215}. Best is trial 66 with value: 0.07373311408690625.
running
[I 2024-10-26 05:20:42,359] Trial 91 finished with value: 0.07734973301969042 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'mean', 'n_nearest_features': 5, 'imputation_order': 'descending'}. Best is trial 66 with value: 0.07373311408690625.
running
[I 2024-10-26 05:23:20,304] Trial 92 finished with value: 0.07491951845584477 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'mean', 'n_nearest_features': 5, 'imputation_order': 'descending'}. Best is trial 66 with value: 0.07373311408690625.
running
[I 2024-10-26 05:24:20,192] Trial 94 finished with value: 0.07628804610571664 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'constant', 'n_nearest_features': 6, 'imputation_order': 'arabic'}. Best is trial 66 with value: 0.07373311408690625.
running
[I 2024-10-26 05:28:46,657] Trial 95 finished with value: 0.07600289653490269 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'constant', 'n_nearest_features': 6, 'imputation_order': 'arabic'}. Best is trial 66 with value: 0.07373311408690625.
running
[I 2024-10-26 05:33:32,013] Trial 96 finished with value: 0.07556837650273392 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'constant', 'n_nearest_features': 5, 'imputation_order': 'descending'}. Best is trial 66 with value: 0.07373311408690625.
running
[I 2024-10-26 05:33:43,012] Trial 101 finished with value: 0.08251751955578276 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'most_frequent', 'n_nearest_features': 6, 'imputation_order': 'descending'}. Best is trial 66 with value: 0.07373311408690625.
running
[I 2024-10-26 05:35:23,448] Trial 97 finished with value: 0.07536059996937412 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'constant', 'n_nearest_features': 6, 'imputation_order': 'arabic'}. Best is trial 66 with value: 0.07373311408690625.
running
[I 2024-10-26 05:35:25,632] Trial 103 finished with value: 0.11914151987265298 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 1685, 'weights': 'uniform'}. Best is trial 66 with value: 0.07373311408690625.
running
[I 2024-10-26 05:35:31,257] Trial 104 finished with value: 0.07722506204181856 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Ridge', 'initial_strategy': 'most_frequent', 'n_nearest_features': 5, 'imputation_order': 'descending'}. Best is trial 66 with value: 0.07373311408690625.
running
[I 2024-10-26 05:36:03,452] Trial 63 finished with value: 0.13820377801414252 and parameters: {'model_name': 'VAE', 'batch_size': 9, 'iterations': 5942, 'learning_rate': 0.00065732288240383, 'p_miss': 0.07708920616026073}. Best is trial 66 with value: 0.07373311408690625.
running
[I 2024-10-26 05:37:53,820] Trial 98 finished with value: 0.07393834292500463 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'constant', 'n_nearest_features': 6, 'imputation_order': 'arabic'}. Best is trial 66 with value: 0.07373311408690625.
running
[I 2024-10-26 05:39:11,858] Trial 99 finished with value: 0.07425193861083293 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 6, 'imputation_order': 'descending'}. Best is trial 66 with value: 0.07373311408690625.
running
[I 2024-10-26 05:43:55,506] Trial 100 finished with value: 0.07535611040342714 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 5, 'imputation_order': 'descending'}. Best is trial 66 with value: 0.07373311408690625.
running
[I 2024-10-26 05:48:42,356] Trial 102 finished with value: 0.07515340968430677 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 5, 'imputation_order': 'descending'}. Best is trial 66 with value: 0.07373311408690625.
running
[I 2024-10-26 05:49:28,874] Trial 106 finished with value: 0.08814439942579262 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 3, 'imputation_order': 'descending'}. Best is trial 66 with value: 0.07373311408690625.
running
[I 2024-10-26 05:50:39,381] Trial 105 finished with value: 0.0746822251458302 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 5, 'imputation_order': 'descending'}. Best is trial 66 with value: 0.07373311408690625.
running
[I 2024-10-26 05:52:49,097] Trial 107 finished with value: 0.07629342484387407 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 5, 'imputation_order': 'descending'}. Best is trial 66 with value: 0.07373311408690625.
running
[I 2024-10-26 05:54:12,608] Trial 108 finished with value: 0.07548812379714637 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 6, 'imputation_order': 'arabic'}. Best is trial 66 with value: 0.07373311408690625.
running
[I 2024-10-26 05:54:13,027] Trial 114 finished with value: 0.12660445263503006 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 66 with value: 0.07373311408690625.
running
[I 2024-10-26 05:58:50,410] Trial 109 finished with value: 0.07501322486884449 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'constant', 'n_nearest_features': 6, 'imputation_order': 'arabic'}. Best is trial 66 with value: 0.07373311408690625.
running
[I 2024-10-26 06:03:33,589] Trial 110 finished with value: 0.07585540220766251 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'constant', 'n_nearest_features': 6, 'imputation_order': 'arabic'}. Best is trial 66 with value: 0.07373311408690625.
running
[I 2024-10-26 06:04:19,175] Trial 111 finished with value: 0.07420255474183983 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'constant', 'n_nearest_features': 6, 'imputation_order': 'arabic'}. Best is trial 66 with value: 0.07373311408690625.
running
[I 2024-10-26 06:05:25,758] Trial 112 finished with value: 0.07480085965265967 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'constant', 'n_nearest_features': 6, 'imputation_order': 'arabic'}. Best is trial 66 with value: 0.07373311408690625.
running
[I 2024-10-26 06:06:02,035] Trial 119 finished with value: 0.12574121658409287 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Bayesian', 'initial_strategy': 'mean', 'n_nearest_features': 6, 'imputation_order': 'descending', 'sample_posterior': True}. Best is trial 66 with value: 0.07373311408690625.
running
[I 2024-10-26 06:07:51,308] Trial 113 finished with value: 0.07659666050134734 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'constant', 'n_nearest_features': 6, 'imputation_order': 'arabic'}. Best is trial 66 with value: 0.07373311408690625.
running
[I 2024-10-26 06:09:03,870] Trial 115 finished with value: 0.07409718062829732 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'constant', 'n_nearest_features': 6, 'imputation_order': 'roman'}. Best is trial 66 with value: 0.07373311408690625.
running
[I 2024-10-26 06:10:09,516] Trial 61 finished with value: 0.13472458121827366 and parameters: {'model_name': 'VAE', 'batch_size': 16, 'iterations': 6050, 'learning_rate': 0.00048322569689591494, 'p_miss': 0.06298898961463335}. Best is trial 66 with value: 0.07373311408690625.
running
[I 2024-10-26 06:14:11,847] Trial 116 finished with value: 0.0742820565725755 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'mean', 'n_nearest_features': 6, 'imputation_order': 'descending'}. Best is trial 66 with value: 0.07373311408690625.
running
[I 2024-10-26 06:14:24,367] Trial 124 finished with value: 0.08179859814545175 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'constant', 'n_nearest_features': 6, 'imputation_order': 'roman'}. Best is trial 66 with value: 0.07373311408690625.
running
[I 2024-10-26 06:15:29,159] Trial 125 finished with value: 0.3411514104243059 and parameters: {'model_name': 'GAIN', 'batch_size': 287, 'hint_rate': 0.023854291083536372, 'alpha': 24, 'iterations': 32, 'learning_rate': 0.007541870876732457, 'p_miss': 0.27556247567338815}. Best is trial 66 with value: 0.07373311408690625.
running
[I 2024-10-26 06:18:39,637] Trial 117 finished with value: 0.07531348798336839 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'mean', 'n_nearest_features': 6, 'imputation_order': 'descending'}. Best is trial 66 with value: 0.07373311408690625.
running
[I 2024-10-26 06:19:31,559] Trial 121 finished with value: 0.11129272537420834 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'median', 'n_nearest_features': 1, 'imputation_order': 'ascending'}. Best is trial 66 with value: 0.07373311408690625.
running
[I 2024-10-26 06:19:36,985] Trial 118 finished with value: 0.07535308145493405 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'constant', 'n_nearest_features': 6, 'imputation_order': 'ascending'}. Best is trial 66 with value: 0.07373311408690625.
running
[I 2024-10-26 06:21:12,108] Trial 120 finished with value: 0.0748976529136369 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'constant', 'n_nearest_features': 6, 'imputation_order': 'ascending'}. Best is trial 66 with value: 0.07373311408690625.
running
[I 2024-10-26 06:21:14,981] Trial 130 finished with value: 0.09989610796745088 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 1498, 'weights': 'distance'}. Best is trial 66 with value: 0.07373311408690625.
running
[I 2024-10-26 06:24:07,011] Trial 122 finished with value: 0.07486976731247022 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'constant', 'n_nearest_features': 6, 'imputation_order': 'roman'}. Best is trial 66 with value: 0.07373311408690625.
running
[I 2024-10-26 06:25:12,259] Trial 123 finished with value: 0.07579878039027002 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'constant', 'n_nearest_features': 6, 'imputation_order': 'roman'}. Best is trial 66 with value: 0.07373311408690625.
running
[I 2024-10-26 06:30:33,426] Trial 126 finished with value: 0.0733046121203567 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'constant', 'n_nearest_features': 6, 'imputation_order': 'roman'}. Best is trial 126 with value: 0.0733046121203567.
running
[I 2024-10-26 06:33:40,290] Trial 127 finished with value: 0.07495016057586752 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'median', 'n_nearest_features': 6, 'imputation_order': 'roman'}. Best is trial 126 with value: 0.0733046121203567.
running
[I 2024-10-26 06:33:45,612] Trial 135 finished with value: 0.07722500086832043 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Ridge', 'initial_strategy': 'constant', 'n_nearest_features': 6, 'imputation_order': 'roman'}. Best is trial 126 with value: 0.0733046121203567.
running
[I 2024-10-26 06:34:23,345] Trial 128 finished with value: 0.074772579310288 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'constant', 'n_nearest_features': 6, 'imputation_order': 'descending'}. Best is trial 126 with value: 0.0733046121203567.
running
[I 2024-10-26 06:34:26,930] Trial 129 finished with value: 0.0778618029365772 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'constant', 'n_nearest_features': 6, 'imputation_order': 'roman'}. Best is trial 126 with value: 0.0733046121203567.
running
[I 2024-10-26 06:36:26,031] Trial 131 finished with value: 0.07396625139459648 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 6, 'imputation_order': 'roman'}. Best is trial 126 with value: 0.0733046121203567.
running
[I 2024-10-26 06:38:57,234] Trial 55 finished with value: 0.1359519117002302 and parameters: {'model_name': 'VAE', 'batch_size': 15, 'iterations': 7492, 'learning_rate': 0.0005923748794644619, 'p_miss': 0.055220608945202115}. Best is trial 126 with value: 0.0733046121203567.
running
[I 2024-10-26 06:39:13,727] Trial 132 finished with value: 0.0742881745964242 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 6, 'imputation_order': 'roman'}. Best is trial 126 with value: 0.0733046121203567.
running
[I 2024-10-26 06:39:27,851] Trial 141 finished with value: 0.13245912993557182 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Bayesian', 'initial_strategy': 'most_frequent', 'n_nearest_features': 4, 'imputation_order': 'roman', 'sample_posterior': True}. Best is trial 126 with value: 0.0733046121203567.
running
[I 2024-10-26 06:39:37,607] Trial 133 finished with value: 0.07774973749903472 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'median', 'n_nearest_features': 4, 'imputation_order': 'descending'}. Best is trial 126 with value: 0.0733046121203567.
running
[I 2024-10-26 06:39:38,143] Trial 143 finished with value: 0.12660445263503006 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 126 with value: 0.0733046121203567.
running
[I 2024-10-26 06:41:15,881] Trial 62 finished with value: 0.13894548602191664 and parameters: {'model_name': 'VAE', 'batch_size': 15, 'iterations': 7601, 'learning_rate': 0.0005838213668196739, 'p_miss': 0.06275050428079171}. Best is trial 126 with value: 0.0733046121203567.
running
[I 2024-10-26 06:45:45,139] Trial 134 finished with value: 0.07476066348402002 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'median', 'n_nearest_features': 6, 'imputation_order': 'roman'}. Best is trial 126 with value: 0.0733046121203567.
running
[I 2024-10-26 06:49:06,652] Trial 136 finished with value: 0.07325898406611354 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 6, 'imputation_order': 'roman'}. Best is trial 136 with value: 0.07325898406611354.
running
[I 2024-10-26 06:49:45,721] Trial 138 finished with value: 0.07426693084825593 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 5, 'imputation_order': 'descending'}. Best is trial 136 with value: 0.07325898406611354.
running
[I 2024-10-26 06:49:48,893] Trial 137 finished with value: 0.0746152723546057 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 6, 'imputation_order': 'roman'}. Best is trial 136 with value: 0.07325898406611354.
running
[I 2024-10-26 06:51:59,121] Trial 139 finished with value: 0.07570686606988139 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 6, 'imputation_order': 'roman'}. Best is trial 136 with value: 0.07325898406611354.
running
[I 2024-10-26 06:52:38,748] Trial 58 finished with value: 0.13636023112411857 and parameters: {'model_name': 'VAE', 'batch_size': 14, 'iterations': 7997, 'learning_rate': 0.0006213062774019058, 'p_miss': 0.05722690386866296}. Best is trial 136 with value: 0.07325898406611354.
running
[I 2024-10-26 06:54:33,578] Trial 140 finished with value: 0.07580609639374628 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 6, 'imputation_order': 'roman'}. Best is trial 136 with value: 0.07325898406611354.
running
[I 2024-10-26 06:54:47,637] Trial 142 finished with value: 0.07353984145642652 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'mean', 'n_nearest_features': 6, 'imputation_order': 'roman'}. Best is trial 136 with value: 0.07325898406611354.
running
[I 2024-10-26 06:55:02,636] Trial 144 finished with value: 0.0740107591752656 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'mean', 'n_nearest_features': 6, 'imputation_order': 'roman'}. Best is trial 136 with value: 0.07325898406611354.
running
[I 2024-10-26 06:55:04,608] Trial 154 finished with value: inf and parameters: {'model_name': 'GAIN', 'batch_size': 3, 'hint_rate': 0.9586890770530332, 'alpha': 77, 'iterations': 4, 'learning_rate': 0.0789907854941277, 'p_miss': 0.2475115497861145}. Best is trial 136 with value: 0.07325898406611354.
running
[I 2024-10-26 06:56:52,795] Trial 145 finished with value: 0.07327409690016125 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'mean', 'n_nearest_features': 6, 'imputation_order': 'roman'}. Best is trial 136 with value: 0.07325898406611354.
running
[I 2024-10-26 07:01:22,172] Trial 146 finished with value: 0.07148351657505661 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 6, 'imputation_order': 'roman'}. Best is trial 146 with value: 0.07148351657505661.
running
[I 2024-10-26 07:04:33,654] Trial 147 finished with value: 0.07512063332478766 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 6, 'imputation_order': 'roman'}. Best is trial 146 with value: 0.07148351657505661.
running
[I 2024-10-26 07:05:07,978] Trial 149 finished with value: 0.07506283151574153 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 5, 'imputation_order': 'roman'}. Best is trial 146 with value: 0.07148351657505661.
running
[I 2024-10-26 07:05:13,218] Trial 148 finished with value: 0.07591502899408126 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 5, 'imputation_order': 'roman'}. Best is trial 146 with value: 0.07148351657505661.
running
[I 2024-10-26 07:07:25,567] Trial 150 finished with value: 0.07462390993054166 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 5, 'imputation_order': 'random'}. Best is trial 146 with value: 0.07148351657505661.
running
[I 2024-10-26 07:08:00,942] Trial 151 finished with value: 0.0743905499836364 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 5, 'imputation_order': 'random'}. Best is trial 146 with value: 0.07148351657505661.
running
[I 2024-10-26 07:08:03,486] Trial 162 finished with value: 0.08271775094559712 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 465, 'weights': 'distance'}. Best is trial 146 with value: 0.07148351657505661.
running
[I 2024-10-26 07:10:10,638] Trial 152 finished with value: 0.07579309848666742 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 5, 'imputation_order': 'random'}. Best is trial 146 with value: 0.07148351657505661.
running
[I 2024-10-26 07:10:20,761] Trial 164 finished with value: 0.08123365426913112 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'mean', 'n_nearest_features': 6, 'imputation_order': 'roman'}. Best is trial 146 with value: 0.07148351657505661.
running
[I 2024-10-26 07:10:25,318] Trial 153 finished with value: 0.07549797558387958 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 5, 'imputation_order': 'roman'}. Best is trial 146 with value: 0.07148351657505661.
running
[I 2024-10-26 07:10:34,539] Trial 155 finished with value: 0.07564547257475723 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'mean', 'n_nearest_features': 5, 'imputation_order': 'roman'}. Best is trial 146 with value: 0.07148351657505661.
running
[I 2024-10-26 07:12:32,403] Trial 156 finished with value: 0.07520056833538116 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'mean', 'n_nearest_features': 6, 'imputation_order': 'roman'}. Best is trial 146 with value: 0.07148351657505661.
running
[I 2024-10-26 07:16:51,555] Trial 157 finished with value: 0.07447090649468793 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'mean', 'n_nearest_features': 5, 'imputation_order': 'roman'}. Best is trial 146 with value: 0.07148351657505661.
running
[I 2024-10-26 07:19:57,076] Trial 158 finished with value: 0.07578263756798242 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'mean', 'n_nearest_features': 5, 'imputation_order': 'roman'}. Best is trial 146 with value: 0.07148351657505661.
running
[I 2024-10-26 07:20:25,238] Trial 159 finished with value: 0.07585283836354281 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'mean', 'n_nearest_features': 6, 'imputation_order': 'roman'}. Best is trial 146 with value: 0.07148351657505661.
running
[I 2024-10-26 07:20:28,775] Trial 160 finished with value: 0.07357260998902473 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'mean', 'n_nearest_features': 6, 'imputation_order': 'roman'}. Best is trial 146 with value: 0.07148351657505661.
running
[I 2024-10-26 07:20:32,319] Trial 171 finished with value: 0.07722494816554612 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Ridge', 'initial_strategy': 'mean', 'n_nearest_features': 6, 'imputation_order': 'arabic'}. Best is trial 146 with value: 0.07148351657505661.
running
[I 2024-10-26 07:20:36,468] Trial 172 finished with value: 0.07722500484870572 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Ridge', 'initial_strategy': 'mean', 'n_nearest_features': 6, 'imputation_order': 'roman'}. Best is trial 146 with value: 0.07148351657505661.
running
[I 2024-10-26 07:22:49,295] Trial 161 finished with value: 0.07497872208871738 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'mean', 'n_nearest_features': 6, 'imputation_order': 'roman'}. Best is trial 146 with value: 0.07148351657505661.
running
[I 2024-10-26 07:23:09,682] Trial 163 finished with value: 0.0734830338613476 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'mean', 'n_nearest_features': 6, 'imputation_order': 'roman'}. Best is trial 146 with value: 0.07148351657505661.
running
[I 2024-10-26 07:23:17,237] Trial 60 finished with value: 0.13760361718585018 and parameters: {'model_name': 'VAE', 'batch_size': 14, 'iterations': 8364, 'learning_rate': 0.0006449491922552782, 'p_miss': 0.07695392230520627}. Best is trial 146 with value: 0.07148351657505661.
running
[I 2024-10-26 07:25:43,460] Trial 165 finished with value: 0.0755749449350683 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'mean', 'n_nearest_features': 6, 'imputation_order': 'roman'}. Best is trial 146 with value: 0.07148351657505661.
running
[I 2024-10-26 07:25:46,228] Trial 166 finished with value: 0.07560602825635412 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'mean', 'n_nearest_features': 6, 'imputation_order': 'roman'}. Best is trial 146 with value: 0.07148351657505661.
running
[I 2024-10-26 07:25:52,389] Trial 167 finished with value: 0.07586016629540523 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'mean', 'n_nearest_features': 6, 'imputation_order': 'roman'}. Best is trial 146 with value: 0.07148351657505661.
running
[I 2024-10-26 07:28:11,501] Trial 168 finished with value: 0.07501609683772886 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'mean', 'n_nearest_features': 6, 'imputation_order': 'roman'}. Best is trial 146 with value: 0.07148351657505661.
running
[I 2024-10-26 07:28:11,963] Trial 181 finished with value: 0.1262344379408548 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'mean'}. Best is trial 146 with value: 0.07148351657505661.
running
[I 2024-10-26 07:32:26,802] Trial 169 finished with value: 0.0749169805063151 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'mean', 'n_nearest_features': 6, 'imputation_order': 'arabic'}. Best is trial 146 with value: 0.07148351657505661.
running
[I 2024-10-26 07:32:38,654] Trial 183 finished with value: 0.13166257548301177 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Bayesian', 'initial_strategy': 'mean', 'n_nearest_features': 3, 'imputation_order': 'roman', 'sample_posterior': True}. Best is trial 146 with value: 0.07148351657505661.
running
[I 2024-10-26 07:34:43,755] Trial 174 finished with value: 0.08037850464244319 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'mean', 'n_nearest_features': 3, 'imputation_order': 'roman'}. Best is trial 146 with value: 0.07148351657505661.
running
[I 2024-10-26 07:35:33,586] Trial 170 finished with value: 0.07658511146283166 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'mean', 'n_nearest_features': 6, 'imputation_order': 'arabic'}. Best is trial 146 with value: 0.07148351657505661.
running
[I 2024-10-26 07:36:11,322] Trial 173 finished with value: 0.07640187649085887 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'mean', 'n_nearest_features': 6, 'imputation_order': 'roman'}. Best is trial 146 with value: 0.07148351657505661.
running
[I 2024-10-26 07:38:33,285] Trial 175 finished with value: 0.07497020572344866 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'mean', 'n_nearest_features': 6, 'imputation_order': 'roman'}. Best is trial 146 with value: 0.07148351657505661.
running
[I 2024-10-26 07:38:45,257] Trial 176 finished with value: 0.07527717401917478 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'mean', 'n_nearest_features': 6, 'imputation_order': 'roman'}. Best is trial 146 with value: 0.07148351657505661.
running
[I 2024-10-26 07:38:58,913] Trial 177 finished with value: 0.07426026575083211 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'mean', 'n_nearest_features': 6, 'imputation_order': 'roman'}. Best is trial 146 with value: 0.07148351657505661.
running
[I 2024-10-26 07:40:07,412] Trial 179 finished with value: 0.08255321143141753 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'mean', 'n_nearest_features': 3, 'imputation_order': 'roman'}. Best is trial 146 with value: 0.07148351657505661.
running
[I 2024-10-26 07:41:29,313] Trial 178 finished with value: 0.07445882731129692 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'mean', 'n_nearest_features': 6, 'imputation_order': 'roman'}. Best is trial 146 with value: 0.07148351657505661.
running
[I 2024-10-26 07:41:38,462] Trial 180 finished with value: 0.07490959548121348 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'mean', 'n_nearest_features': 6, 'imputation_order': 'roman'}. Best is trial 146 with value: 0.07148351657505661.
running
[I 2024-10-26 07:42:19,862] Trial 193 finished with value: inf and parameters: {'model_name': 'GAIN', 'batch_size': 2, 'hint_rate': 0.7328514322490893, 'alpha': 14, 'iterations': 117, 'learning_rate': 0.0015455081477157276, 'p_miss': 0.2554195614621545}. Best is trial 146 with value: 0.07148351657505661.
running
[I 2024-10-26 07:43:59,226] Trial 182 finished with value: 0.0748079715958792 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'mean', 'n_nearest_features': 6, 'imputation_order': 'roman'}. Best is trial 146 with value: 0.07148351657505661.
running
[I 2024-10-26 07:48:23,804] Trial 184 finished with value: 0.07535974403873487 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'median', 'n_nearest_features': 6, 'imputation_order': 'roman'}. Best is trial 146 with value: 0.07148351657505661.
running
[I 2024-10-26 07:50:21,015] Trial 185 finished with value: 0.07273611952100681 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 6, 'imputation_order': 'descending'}. Best is trial 146 with value: 0.07148351657505661.
running
[I 2024-10-26 07:51:04,932] Trial 186 finished with value: 0.07571501791628352 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'constant', 'n_nearest_features': 6, 'imputation_order': 'descending'}. Best is trial 146 with value: 0.07148351657505661.
running
[I 2024-10-26 07:51:37,122] Trial 187 finished with value: 0.07549966628662683 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'constant', 'n_nearest_features': 6, 'imputation_order': 'descending'}. Best is trial 146 with value: 0.07148351657505661.
running
[I 2024-10-26 07:54:11,994] Trial 189 finished with value: 0.0752907683997308 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'constant', 'n_nearest_features': 6, 'imputation_order': 'descending'}. Best is trial 146 with value: 0.07148351657505661.
[I 2024-10-26 07:54:13,703] Trial 188 finished with value: 0.07410983116998796 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'constant', 'n_nearest_features': 6, 'imputation_order': 'descending'}. Best is trial 146 with value: 0.07148351657505661.
[I 2024-10-26 07:54:21,703] Trial 190 finished with value: 0.07489779997117614 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'constant', 'n_nearest_features': 6, 'imputation_order': 'descending'}. Best is trial 146 with value: 0.07148351657505661.
[I 2024-10-26 07:55:25,761] Trial 191 finished with value: 0.074866938206072 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'constant', 'n_nearest_features': 6, 'imputation_order': 'descending'}. Best is trial 146 with value: 0.07148351657505661.
[I 2024-10-26 07:56:38,371] Trial 192 finished with value: 0.0757663443241454 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'constant', 'n_nearest_features': 6, 'imputation_order': 'descending'}. Best is trial 146 with value: 0.07148351657505661.
[I 2024-10-26 07:57:07,313] Trial 194 finished with value: 0.07560943882502333 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'constant', 'n_nearest_features': 6, 'imputation_order': 'descending'}. Best is trial 146 with value: 0.07148351657505661.
[I 2024-10-26 07:58:07,250] Trial 195 finished with value: 0.07540479320584588 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'constant', 'n_nearest_features': 6, 'imputation_order': 'descending'}. Best is trial 146 with value: 0.07148351657505661.
[I 2024-10-26 08:00:37,225] Trial 196 finished with value: 0.0745482914251743 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'constant', 'n_nearest_features': 6, 'imputation_order': 'descending'}. Best is trial 146 with value: 0.07148351657505661.
[I 2024-10-26 08:01:35,898] Trial 197 finished with value: 0.07631623703064636 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'constant', 'n_nearest_features': 6, 'imputation_order': 'descending'}. Best is trial 146 with value: 0.07148351657505661.
[I 2024-10-26 08:01:56,127] Trial 198 finished with value: 0.07608873224339577 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'constant', 'n_nearest_features': 6, 'imputation_order': 'descending'}. Best is trial 146 with value: 0.07148351657505661.
[I 2024-10-26 08:02:09,973] Trial 199 finished with value: 0.07500516564135709 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 6, 'imputation_order': 'descending'}. Best is trial 146 with value: 0.07148351657505661.
[I 2024-10-26 08:12:05,930] Trial 59 finished with value: 0.13706255409266102 and parameters: {'model_name': 'VAE', 'batch_size': 12, 'iterations': 9771, 'learning_rate': 0.0005715253437741603, 'p_miss': 0.07229915635002375}. Best is trial 146 with value: 0.07148351657505661.
[I 2024-10-26 08:13:54,030] Trial 30 finished with value: 0.1662304894948908 and parameters: {'model_name': 'VAE', 'batch_size': 2, 'iterations': 9281, 'learning_rate': 0.0914648975267345, 'p_miss': 0.2999081389878723}. Best is trial 146 with value: 0.07148351657505661.
[I 2024-10-26 08:15:45,155] Trial 74 finished with value: 0.13423965263348775 and parameters: {'model_name': 'VAE', 'batch_size': 16, 'iterations': 7783, 'learning_rate': 0.0005473708141710974, 'p_miss': 0.18627696092206453}. Best is trial 146 with value: 0.07148351657505661.
[I 2024-10-26 08:15:53,761] Trial 73 finished with value: 0.13526685657268608 and parameters: {'model_name': 'VAE', 'batch_size': 17, 'iterations': 9997, 'learning_rate': 0.007584587409836024, 'p_miss': 0.1828069200764014}. Best is trial 146 with value: 0.07148351657505661.
[I 2024-10-26 08:17:36,570] Trial 57 finished with value: 0.13033288142487792 and parameters: {'model_name': 'VAE', 'batch_size': 745, 'iterations': 9536, 'learning_rate': 0.0005754663438716019, 'p_miss': 0.07532305305881226}. Best is trial 146 with value: 0.07148351657505661.
fit
auto fit
auto transform
0    0
1    0
2    0
3    0
4    0
5    0
dtype: int64
0    0
1    0
2    0
3    0
4    0
5    0
dtype: int64
0.07148351657505661
{'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 6, 'imputation_order': 'roman'}
running experiment 2/3 - Does reconstruction give good automl predictions
Start est fit
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
  0%|          | 0/25 [00:00<?, ?it/s]Generation:   0%|          | 0/25 [00:00<?, ?it/s]Generation:  1
Best f1_score score: 0.8260203798404518
Generation:   4%|▍         | 1/25 [01:44<41:41, 104.22s/it]Generation:  2
Best f1_score score: 0.8565059585292711
Generation:   8%|▊         | 2/25 [04:10<49:22, 128.82s/it]Generation:  3
Best f1_score score: 0.8565059585292711
Generation:  12%|█▏        | 3/25 [04:50<32:23, 88.36s/it] Generation:  4
Best f1_score score: 0.8565059585292711
Generation:  16%|█▌        | 4/25 [06:41<34:00, 97.15s/it]Generation:  5
Best f1_score score: 0.8565059585292711
Generation:  20%|██        | 5/25 [07:04<23:30, 70.54s/it]Generation:  6
Best f1_score score: 0.8565059585292711
Generation:  24%|██▍       | 6/25 [09:07<27:58, 88.33s/it]Generation:  7
Best f1_score score: 0.8565059585292711
Generation:  28%|██▊       | 7/25 [12:21<36:52, 122.93s/it]Generation:  8
Best f1_score score: 0.8565059585292711
Generation:  32%|███▏      | 8/25 [13:22<29:14, 103.21s/it]Generation:  9
Best f1_score score: 0.8565059585292711
Generation:  36%|███▌      | 9/25 [16:50<36:13, 135.87s/it]Generation:  10
Best f1_score score: 0.8565059585292711
Generation:  40%|████      | 10/25 [17:58<28:44, 114.96s/it]Generation:  11
Best f1_score score: 0.8565059585292711
Generation:  44%|████▍     | 11/25 [18:59<22:59, 98.52s/it] Generation:  12
Best f1_score score: 0.8565059585292711
Generation:  48%|████▊     | 12/25 [20:10<19:30, 90.07s/it]Generation:  13
Best f1_score score: 0.8565059585292711
Generation:  52%|█████▏    | 13/25 [22:28<20:55, 104.60s/it]Generation:  14
Best f1_score score: 0.8565059585292711
Generation:  56%|█████▌    | 14/25 [24:49<21:11, 115.56s/it]Generation:  15
Best f1_score score: 0.8565059585292711
Generation:  60%|██████    | 15/25 [27:23<21:13, 127.31s/it]Generation:  16
Best f1_score score: 0.8565059585292711
Generation:  64%|██████▍   | 16/25 [28:23<16:03, 107.11s/it]Generation:  17
Best f1_score score: 0.8565059585292711
Generation:  68%|██████▊   | 17/25 [31:22<17:08, 128.57s/it]Generation:  18
Best f1_score score: 0.8565059585292711
Generation:  72%|███████▏  | 18/25 [34:09<16:21, 140.26s/it]Generation:  19
Best f1_score score: 0.8565059585292711
Generation:  76%|███████▌  | 19/25 [36:49<14:36, 146.04s/it]Generation:  20
Best f1_score score: 0.8565059585292711
Generation:  80%|████████  | 20/25 [40:04<13:24, 160.89s/it]Generation:  21
Best f1_score score: 0.8565059585292711
Generation:  84%|████████▍ | 21/25 [44:02<12:15, 183.93s/it]Generation:  22
Best f1_score score: 0.8565059585292711
Generation:  88%|████████▊ | 22/25 [45:59<08:11, 163.79s/it]Generation:  23
Best f1_score score: 0.8565059585292711
Generation:  92%|█████████▏| 23/25 [47:58<05:00, 150.45s/it]Generation:  24
Best f1_score score: 0.8565059585292711
Generation:  96%|█████████▌| 24/25 [50:45<02:35, 155.30s/it]Generation:  25
Best f1_score score: 0.8565059585292711
Generation: 100%|██████████| 25/25 [54:46<00:00, 180.94s/it]Generation: 100%|██████████| 25/25 [54:49<00:00, 131.58s/it]
2024-10-26 09:13:49,870 - distributed.scheduler - ERROR - Removing worker 'tcp://127.0.0.1:46761' caused the cluster to lose scattered data, which can't be recovered: {'ndarray-3b1d202420b8924021db0d6d9c4f357b', 'ndarray-bc1ee22df90b340c13f4c4b70d48b351'} (stimulus_id='handle-worker-cleanup-1729959229.8702397')
Fitted
Pipeline(steps=[('mlpclassifier',
                 MLPClassifier(alpha=0.0002313754944,
                               hidden_layer_sizes=[335, 335, 335],
                               learning_rate='adaptive',
                               learning_rate_init=0.0004861599886,
                               n_iter_no_change=32))])
score start
train score: {'auroc': 0.9331450862723454, 'accuracy': 0.8732394366197183, 'balanced_accuracy': 0.8730381754156853, 'logloss': 0.319853055560318, 'f1': 0.8731012607438987}
original test score: {'auroc': 0.9371432707419968, 'accuracy': 0.8713826366559485, 'balanced_accuracy': 0.8711845479361403, 'logloss': 0.31483814056070186, 'f1': 0.8712748344370861}
imputed test score: {'auroc': 0.9359024733228555, 'accuracy': 0.8697749196141479, 'balanced_accuracy': 0.8695921912482423, 'logloss': 0.31809872393994804, 'f1': 0.8696775695495286}
score end
check intended
EXP2 Finished
running experiment 3/3 - What is the best automl settings?
<tpot2.search_spaces.pipelines.sequential.SequentialPipeline object at 0x155435014610>
Start tpot fit
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
  0%|          | 0/25 [00:00<?, ?it/s]Generation:   0%|          | 0/25 [00:00<?, ?it/s]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155474cd5900> 
 Negative values in data passed to MultinomialNB (input X) 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/naive_bayes.py", line 759, in fit
    self._count(X, Y)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/naive_bayes.py", line 881, in _count
    check_non_negative(X, "MultinomialNB (input X)")
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1689, in check_non_negative
    raise ValueError("Negative values in data passed to %s" % whom)
ValueError: Negative values in data passed to MultinomialNB (input X)

WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155474cd4ee0> 
 Input X contains NaN.
SGDClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/linear_model/_stochastic_gradient.py", line 938, in fit
    return self._fit(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/linear_model/_stochastic_gradient.py", line 725, in _fit
    self._partial_fit(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/linear_model/_stochastic_gradient.py", line 596, in _partial_fit
    X, y = self._validate_data(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 650, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1301, in check_X_y
    X = check_array(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1064, in check_array
    _assert_all_finite(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 123, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 172, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
SGDClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Generation:  1
Best f1_score score: 0.83557754059272
Generation:   4%|▍         | 1/25 [03:48<1:31:23, 228.49s/it]WARNING AN INDIVIDUAL TIMED OUT: 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x1554745971c0> 

Generation:  2
Best f1_score score: 0.83557754059272
Generation:   8%|▊         | 2/25 [13:53<2:52:23, 449.72s/it]Generation:  3
Best f1_score score: 0.844688615608592
Generation:  12%|█▏        | 3/25 [17:45<2:08:29, 350.43s/it]Generation:  4
Best f1_score score: 0.844688615608592
Generation:  16%|█▌        | 4/25 [22:26<1:53:03, 323.01s/it]Generation:  5
Best f1_score score: 0.846746987713605
Generation:  20%|██        | 5/25 [26:17<1:36:39, 289.96s/it]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x1554575c1570> 
 Input X contains NaN.
LogisticRegression does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py", line 1223, in fit
    X, y = self._validate_data(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 650, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1301, in check_X_y
    X = check_array(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1064, in check_array
    _assert_all_finite(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 123, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 172, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
LogisticRegression does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Generation:  6
Best f1_score score: 0.846746987713605
Generation:  24%|██▍       | 6/25 [30:57<1:30:40, 286.35s/it]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x1554550818a0> 
 Input X contains NaN.
MLPClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/neural_network/_multilayer_perceptron.py", line 751, in fit
    return self._fit(X, y, incremental=False)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/neural_network/_multilayer_perceptron.py", line 441, in _fit
    X, y = self._validate_input(X, y, incremental, reset=first_pass)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/neural_network/_multilayer_perceptron.py", line 1096, in _validate_input
    X, y = self._validate_data(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 650, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1301, in check_X_y
    X = check_array(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1064, in check_array
    _assert_all_finite(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 123, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 172, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
MLPClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Generation:  7
Best f1_score score: 0.8545095652188864
Generation:  28%|██▊       | 7/25 [34:47<1:20:27, 268.21s/it]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x15545f894d00> 
 Input X contains NaN.
MLPClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/neural_network/_multilayer_perceptron.py", line 751, in fit
    return self._fit(X, y, incremental=False)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/neural_network/_multilayer_perceptron.py", line 441, in _fit
    X, y = self._validate_input(X, y, incremental, reset=first_pass)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/neural_network/_multilayer_perceptron.py", line 1096, in _validate_input
    X, y = self._validate_data(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 650, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1301, in check_X_y
    X = check_array(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1064, in check_array
    _assert_all_finite(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 123, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 172, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
MLPClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Generation:  8
Best f1_score score: 0.8545095652188864
Generation:  32%|███▏      | 8/25 [39:27<1:17:00, 271.79s/it]Generation:  9
Best f1_score score: 0.8545095652188864
Generation:  36%|███▌      | 9/25 [44:10<1:13:25, 275.33s/it]Generation:  10
Best f1_score score: 0.8545095652188864
Generation:  40%|████      | 10/25 [48:03<1:05:33, 262.22s/it]Generation:  11
Best f1_score score: 0.8545095652188864
Generation:  44%|████▍     | 11/25 [52:00<59:24, 254.62s/it]  Generation:  12
Best f1_score score: 0.8545095652188864
Generation:  48%|████▊     | 12/25 [52:47<41:27, 191.31s/it]Generation:  13
Best f1_score score: 0.8545095652188864
Generation:  52%|█████▏    | 13/25 [59:48<52:11, 260.96s/it]WARNING AN INDIVIDUAL TIMED OUT: 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155421fc9b10> 

Generation:  14
Best f1_score score: 0.8545095652188864
Generation:  56%|█████▌    | 14/25 [1:09:55<1:06:59, 365.44s/it]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155475051de0> 
 Input X contains NaN.
MLPClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/neural_network/_multilayer_perceptron.py", line 751, in fit
    return self._fit(X, y, incremental=False)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/neural_network/_multilayer_perceptron.py", line 441, in _fit
    X, y = self._validate_input(X, y, incremental, reset=first_pass)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/neural_network/_multilayer_perceptron.py", line 1096, in _validate_input
    X, y = self._validate_data(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 650, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1301, in check_X_y
    X = check_array(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1064, in check_array
    _assert_all_finite(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 123, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 172, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
MLPClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Generation:  15
Best f1_score score: 0.8545095652188864
Generation:  60%|██████    | 15/25 [1:11:07<46:11, 277.17s/it]  Generation:  16
Best f1_score score: 0.8545095652188864
Generation:  64%|██████▍   | 16/25 [1:15:51<41:50, 278.95s/it]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155474d1c3a0> 
 Input X contains NaN.
MLPClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/neural_network/_multilayer_perceptron.py", line 751, in fit
    return self._fit(X, y, incremental=False)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/neural_network/_multilayer_perceptron.py", line 441, in _fit
    X, y = self._validate_input(X, y, incremental, reset=first_pass)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/neural_network/_multilayer_perceptron.py", line 1096, in _validate_input
    X, y = self._validate_data(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 650, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1301, in check_X_y
    X = check_array(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1064, in check_array
    _assert_all_finite(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 123, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 172, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
MLPClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Generation:  17
Best f1_score score: 0.8545095652188864
Generation:  68%|██████▊   | 17/25 [1:19:47<35:29, 266.15s/it]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155452cbb4c0> 
 Input X contains NaN.
MLPClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/neural_network/_multilayer_perceptron.py", line 751, in fit
    return self._fit(X, y, incremental=False)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/neural_network/_multilayer_perceptron.py", line 441, in _fit
    X, y = self._validate_input(X, y, incremental, reset=first_pass)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/neural_network/_multilayer_perceptron.py", line 1096, in _validate_input
    X, y = self._validate_data(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 650, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1301, in check_X_y
    X = check_array(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1064, in check_array
    _assert_all_finite(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 123, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 172, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
MLPClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Generation:  18
Best f1_score score: 0.8545095652188864
Generation:  72%|███████▏  | 18/25 [1:20:49<23:54, 204.95s/it]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x15545ac64ca0> 
 Input X contains NaN.
MLPClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/neural_network/_multilayer_perceptron.py", line 751, in fit
    return self._fit(X, y, incremental=False)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/neural_network/_multilayer_perceptron.py", line 441, in _fit
    X, y = self._validate_input(X, y, incremental, reset=first_pass)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/neural_network/_multilayer_perceptron.py", line 1096, in _validate_input
    X, y = self._validate_data(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 650, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1301, in check_X_y
    X = check_array(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1064, in check_array
    _assert_all_finite(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 123, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 172, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
MLPClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Generation:  19
Best f1_score score: 0.8545095652188864
Generation:  76%|███████▌  | 19/25 [1:22:26<17:13, 172.33s/it]Generation:  20
Best f1_score score: 0.8545095652188864
Generation:  80%|████████  | 20/25 [1:27:05<17:02, 204.54s/it]Generation:  21
Best f1_score score: 0.8545095652188864
Generation:  84%|████████▍ | 21/25 [1:31:47<15:10, 227.57s/it]Generation:  22
Best f1_score score: 0.8545095652188864
Generation:  88%|████████▊ | 22/25 [1:36:23<12:06, 242.27s/it]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x15545762f580> 
 Input X contains NaN.
MLPClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/neural_network/_multilayer_perceptron.py", line 751, in fit
    return self._fit(X, y, incremental=False)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/neural_network/_multilayer_perceptron.py", line 441, in _fit
    X, y = self._validate_input(X, y, incremental, reset=first_pass)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/neural_network/_multilayer_perceptron.py", line 1096, in _validate_input
    X, y = self._validate_data(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 650, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1301, in check_X_y
    X = check_array(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1064, in check_array
    _assert_all_finite(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 123, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 172, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
MLPClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Generation:  23
Best f1_score score: 0.8545095652188864
Generation:  92%|█████████▏| 23/25 [1:38:28<06:53, 206.95s/it]Generation:  24
Best f1_score score: 0.8545095652188864
Generation:  96%|█████████▌| 24/25 [1:43:09<03:49, 229.14s/it]Generation:  25
Best f1_score score: 0.8570105963947668
Generation: 100%|██████████| 25/25 [1:48:29<00:00, 256.48s/it]Generation: 100%|██████████| 25/25 [1:48:29<00:00, 260.37s/it]
2024-10-26 11:02:29,796 - distributed.worker - ERROR - Failed to communicate with scheduler during heartbeat.
Traceback (most recent call last):
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/distributed/comm/tcp.py", line 225, in read
    frames_nosplit_nbytes_bin = await stream.read_bytes(fmt_size)
tornado.iostream.StreamClosedError: Stream is closed

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/distributed/worker.py", line 1250, in heartbeat
    response = await retry_operation(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/distributed/utils_comm.py", line 459, in retry_operation
    return await retry(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/distributed/utils_comm.py", line 438, in retry
    return await coro()
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/distributed/core.py", line 1256, in send_recv_from_rpc
    return await send_recv(comm=comm, op=key, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/distributed/core.py", line 1015, in send_recv
    response = await comm.read(deserializers=deserializers)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/distributed/comm/tcp.py", line 236, in read
    convert_stream_closed_error(self, e)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/distributed/comm/tcp.py", line 142, in convert_stream_closed_error
    raise CommClosedError(f"in {obj}: {exc}") from exc
distributed.comm.core.CommClosedError: in <TCP (closed) ConnectionPool.heartbeat_worker local=tcp://127.0.0.1:45372 remote=tcp://127.0.0.1:36741>: Stream is closed
2024-10-26 11:02:29,848 - distributed.scheduler - ERROR - Removing worker 'tcp://127.0.0.1:40007' caused the cluster to lose scattered data, which can't be recovered: {'DataFrame-b3d6b4d9b81a45f5c5672e9e7ffe8c7a', 'ndarray-bc1ee22df90b340c13f4c4b70d48b351'} (stimulus_id='handle-worker-cleanup-1729965749.8483052')
Fitted
Pipeline(steps=[('iterativeimputer',
                 IterativeImputer(estimator=KNeighborsRegressor(),
                                  imputation_order='descending',
                                  initial_strategy='constant',
                                  n_nearest_features=17)),
                ('mlpclassifier',
                 MLPClassifier(activation='tanh', alpha=0.0030283066294,
                               hidden_layer_sizes=[24, 24, 24],
                               learning_rate_init=0.0054724136393,
                               n_iter_no_change=32))])
transform worked
try transform
transform worked
score start
train score: {'auroc': 0.9247834446232339, 'accuracy': 0.8627766599597585, 'balanced_accuracy': 0.8626055569806881, 'logloss': 0.34377467513736204, 'f1': 0.8626613664317628}
test score: {'auroc': 0.9257175945074034, 'accuracy': 0.8520900321543409, 'balanced_accuracy': 0.8519211680039706, 'logloss': 0.3445414834324288, 'f1': 0.8519920957613003}
original test score: {'auroc': 0.9265241128298453, 'accuracy': 0.8536977491961415, 'balanced_accuracy': 0.8535135246918686, 'logloss': 0.3420205751074042, 'f1': 0.853588380605026}
score end
737
lvl
0.01
type
MCAR
num_run
2
class_full
finished
all finished
full run takes
11.862462005549007
hours
DONE
