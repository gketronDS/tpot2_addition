Run: 50
/cm/local/apps/slurm/var/spool/job1047384/slurm_script: line 27: 
pip install -e tpot2
pip install -r tpot2/ImputerExperiments/requirements_.txt
: No such file or directory
RunStart
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
starting loops
../data/c/1496/1496.pkl
working on 
../data/c/1496/class_full_MCAR_0.1_3
1.9713349342346191
running experiment 1/3 - Does large hyperparameter space improve reconstruction accuracy over simple
[I 2024-11-13 05:37:00,254] A new study created in memory with name: no-name-40fd922e-bf94-4d71-a71b-4e0269dc92d7
running
running
running
running
running
running
running
running
running
running
running
running
running
running
running
running
[I 2024-11-13 05:37:00,536] Trial 3 finished with value: 0.5077534657762304 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'constant'}. Best is trial 3 with value: 0.5077534657762304.
[I 2024-11-13 05:37:00,653] Trial 4 finished with value: 0.5077534657762304 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'constant'}. Best is trial 3 with value: 0.5077534657762304.
running
[I 2024-11-13 05:37:00,791] Trial 7 finished with value: 0.5077534657762304 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'constant'}. Best is trial 3 with value: 0.5077534657762304.
running
running
[I 2024-11-13 05:37:00,923] Trial 6 finished with value: 0.5077534657762304 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'constant'}. Best is trial 3 with value: 0.5077534657762304.
running
[I 2024-11-13 05:37:01,124] Trial 13 finished with value: 0.10322372339637827 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 05:37:01,485] Trial 0 finished with value: 0.5077534657762304 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'most_frequent'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 05:37:05,864] Trial 11 finished with value: 0.11191485290306039 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 468, 'weights': 'uniform'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 05:37:06,193] Trial 17 finished with value: 0.11338602857462558 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 5718, 'weights': 'uniform'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 05:37:07,038] Trial 12 finished with value: 0.11252233465728552 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 1309, 'weights': 'uniform'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 05:37:07,546] Trial 18 finished with value: 0.11267946685083874 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 1698, 'weights': 'uniform'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 05:37:07,882] Trial 20 finished with value: 0.1125923226030009 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 1452, 'weights': 'uniform'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 05:37:08,131] Trial 8 finished with value: 0.4545928730627474 and parameters: {'model_name': 'GAIN', 'batch_size': 35, 'hint_rate': 0.6399611653573877, 'alpha': 10, 'iterations': 1, 'learning_rate': 0.03457457293025997, 'p_miss': 0.16393568643455264}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 05:37:08,329] Trial 14 finished with value: 0.13107375212193245 and parameters: {'model_name': 'VAE', 'batch_size': 47, 'iterations': 1, 'learning_rate': 0.000588874823624906, 'p_miss': 0.0846457839523236}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 05:37:08,618] Trial 15 finished with value: 0.1129331816701229 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 2853, 'weights': 'uniform'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 05:37:11,748] Trial 22 finished with value: inf and parameters: {'model_name': 'GAIN', 'batch_size': 3, 'hint_rate': 0.21984519499867486, 'alpha': 7, 'iterations': 53, 'learning_rate': 0.08069848182305896, 'p_miss': 0.04614592982070666}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 05:37:12,745] Trial 1 finished with value: 0.11983536758438569 and parameters: {'model_name': 'VAE', 'batch_size': 18, 'iterations': 5, 'learning_rate': 0.005859242226016871, 'p_miss': 0.028757685912208023}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 05:37:16,462] Trial 25 finished with value: 0.4522868079220932 and parameters: {'model_name': 'GAIN', 'batch_size': 20, 'hint_rate': 0.06770903498815972, 'alpha': 29, 'iterations': 11, 'learning_rate': 0.03009021702720578, 'p_miss': 0.15085911870814228}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 05:37:19,005] Trial 23 finished with value: 0.16170604733322008 and parameters: {'model_name': 'VAE', 'batch_size': 1, 'iterations': 12, 'learning_rate': 0.07051827990414954, 'p_miss': 0.03238715490348752}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 05:37:30,108] Trial 10 finished with value: 0.1314902930242265 and parameters: {'model_name': 'VAE', 'batch_size': 363, 'iterations': 8, 'learning_rate': 0.00011960645404280267, 'p_miss': 0.11240932086510791}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 05:37:32,894] Trial 33 finished with value: 0.11358210672048577 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Ridge', 'initial_strategy': 'constant', 'n_nearest_features': 20, 'imputation_order': 'descending'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 05:37:44,536] Trial 27 finished with value: 0.1134738876561551 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Ridge', 'initial_strategy': 'most_frequent', 'n_nearest_features': 11, 'imputation_order': 'random'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 05:37:45,756] Trial 24 finished with value: 0.11354969515008688 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Ridge', 'initial_strategy': 'constant', 'n_nearest_features': 17, 'imputation_order': 'roman'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 05:37:46,303] Trial 9 finished with value: 0.13115072617135085 and parameters: {'model_name': 'VAE', 'batch_size': 11, 'iterations': 36, 'learning_rate': 0.0003242110694641519, 'p_miss': 0.2408788956601912}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 05:37:49,707] Trial 16 finished with value: 0.12392434709233702 and parameters: {'model_name': 'VAE', 'batch_size': 29, 'iterations': 40, 'learning_rate': 0.002626361740767462, 'p_miss': 0.1699907566935006}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 05:37:52,379] Trial 37 finished with value: 0.12872604487762182 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 7, 'weights': 'distance'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 05:37:52,651] Trial 36 finished with value: 0.11350875235648113 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 64, 'weights': 'distance'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 05:37:55,827] Trial 38 finished with value: 0.1118853191339028 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 457, 'weights': 'distance'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 05:37:57,892] Trial 39 finished with value: 0.11278391011844317 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 99, 'weights': 'distance'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 05:37:58,557] Trial 43 finished with value: 0.10322372339637827 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 05:37:59,313] Trial 44 finished with value: 0.10322372339637827 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 05:37:59,989] Trial 40 finished with value: 0.11193130391484249 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 305, 'weights': 'uniform'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 05:38:00,215] Trial 45 finished with value: 0.10322372339637827 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 05:38:01,081] Trial 46 finished with value: 0.10322372339637827 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 05:38:01,387] Trial 47 finished with value: 0.10322372339637827 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 05:38:01,819] Trial 48 finished with value: 0.10322372339637827 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 05:38:02,371] Trial 49 finished with value: 0.10322372339637827 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 05:38:02,657] Trial 50 finished with value: 0.10322372339637827 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 05:38:03,017] Trial 41 finished with value: 0.1126314975482942 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 1532, 'weights': 'uniform'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 05:38:03,218] Trial 51 finished with value: 0.10322372339637827 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 05:38:03,609] Trial 52 finished with value: 0.11338602857462558 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'mean'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 05:38:03,794] Trial 53 finished with value: 0.11338602857462558 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'mean'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 05:38:04,057] Trial 54 finished with value: 0.11338602857462558 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'mean'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 05:38:04,700] Trial 55 finished with value: 0.10322372339637827 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 05:38:04,859] Trial 56 finished with value: 0.10322372339637827 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 05:38:05,040] Trial 57 finished with value: 0.10322372339637827 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 05:38:05,700] Trial 60 finished with value: 0.10322372339637827 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.10322372339637827.
[I 2024-11-13 05:38:05,850] Trial 59 finished with value: 0.10322372339637827 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.10322372339637827.
running
running
[I 2024-11-13 05:38:06,023] Trial 58 finished with value: 0.10322372339637827 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 05:38:06,568] Trial 61 finished with value: 0.10322372339637827 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 05:38:06,720] Trial 62 finished with value: 0.10322372339637827 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 05:38:07,793] Trial 63 finished with value: 0.5077534657762304 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'most_frequent'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 05:38:08,285] Trial 64 finished with value: 0.5077534657762304 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'most_frequent'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 05:38:08,445] Trial 66 finished with value: 0.10322372339637827 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 05:38:09,202] Trial 67 finished with value: 0.10322372339637827 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 05:38:09,373] Trial 42 finished with value: 0.11318317156333053 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 4701, 'weights': 'distance'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 05:38:12,955] Trial 29 finished with value: 0.11333831951606048 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Bayesian', 'initial_strategy': 'mean', 'n_nearest_features': 4, 'imputation_order': 'random', 'sample_posterior': False}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 05:38:25,282] Trial 35 finished with value: 0.2149666761801438 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Bayesian', 'initial_strategy': 'median', 'n_nearest_features': 1, 'imputation_order': 'arabic', 'sample_posterior': True}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 05:38:49,618] Trial 21 finished with value: 0.21364442940342068 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Bayesian', 'initial_strategy': 'constant', 'n_nearest_features': 13, 'imputation_order': 'arabic', 'sample_posterior': True}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 05:39:18,160] Trial 28 finished with value: 0.13490461224147088 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'constant', 'n_nearest_features': 12, 'imputation_order': 'ascending'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 05:40:40,273] Trial 26 finished with value: 0.1526866215223045 and parameters: {'model_name': 'VAE', 'batch_size': 1, 'iterations': 234, 'learning_rate': 0.0010818340019971904, 'p_miss': 0.040875760687183196}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 05:41:02,628] Trial 5 finished with value: 0.4283538972392029 and parameters: {'model_name': 'GAIN', 'batch_size': 7, 'hint_rate': 0.9033676126999327, 'alpha': 36, 'iterations': 384, 'learning_rate': 0.005549287178886444, 'p_miss': 0.2621778751227464}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 05:43:34,232] Trial 31 finished with value: 0.13437548089136872 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'most_frequent', 'n_nearest_features': 18, 'imputation_order': 'random'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 06:34:45,986] Trial 2 finished with value: 0.12757951853755975 and parameters: {'model_name': 'VAE', 'batch_size': 18, 'iterations': 1727, 'learning_rate': 0.00035160402768260224, 'p_miss': 0.13212235028009178}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 06:59:55,835] Trial 68 finished with value: 0.44893841325818623 and parameters: {'model_name': 'GAIN', 'batch_size': 283, 'hint_rate': 0.9755890526874031, 'alpha': 100, 'iterations': 3790, 'learning_rate': 0.005564749625640914, 'p_miss': 0.29744106469654963}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 06:59:56,657] Trial 79 finished with value: 0.10322372339637827 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 06:59:57,316] Trial 80 finished with value: 0.10322372339637827 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 06:59:58,043] Trial 81 finished with value: 0.10322372339637827 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 06:59:58,675] Trial 82 finished with value: 0.10322372339637827 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 06:59:59,350] Trial 83 finished with value: 0.10322372339637827 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 07:08:11,841] Trial 32 finished with value: 0.12157741609096546 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'constant', 'n_nearest_features': 7, 'imputation_order': 'arabic'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 07:17:39,478] Trial 65 finished with value: 0.46093733603433484 and parameters: {'model_name': 'GAIN', 'batch_size': 979, 'hint_rate': 0.944126072355184, 'alpha': 98, 'iterations': 2490, 'learning_rate': 0.003946528441900938, 'p_miss': 0.2981986230310318}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 07:17:40,214] Trial 86 finished with value: 0.10322372339637827 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 07:17:40,834] Trial 87 finished with value: 0.10322372339637827 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 07:17:41,360] Trial 88 finished with value: 0.10322372339637827 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 07:20:42,146] Trial 75 finished with value: 0.4515456042906491 and parameters: {'model_name': 'GAIN', 'batch_size': 627, 'hint_rate': 0.9868831520862507, 'alpha': 100, 'iterations': 3286, 'learning_rate': 0.007069539802873869, 'p_miss': 0.2798816526609026}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 07:40:17,486] Trial 90 finished with value: 0.12590715108756365 and parameters: {'model_name': 'VAE', 'batch_size': 109, 'iterations': 520, 'learning_rate': 0.01460982293033289, 'p_miss': 0.21868885355552786}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 07:40:18,125] Trial 91 finished with value: 0.10322372339637827 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 07:40:18,631] Trial 92 finished with value: 0.10322372339637827 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 07:40:19,013] Trial 93 finished with value: 0.5077534657762304 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'constant'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 07:40:19,693] Trial 94 finished with value: 0.10322372339637827 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 07:40:21,535] Trial 95 finished with value: 0.5077534657762304 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'most_frequent'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 07:40:22,289] Trial 96 finished with value: 0.10322372339637827 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 07:40:22,966] Trial 97 finished with value: 0.10322372339637827 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 07:40:23,615] Trial 98 finished with value: 0.10322372339637827 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 07:40:24,205] Trial 99 finished with value: 0.11338602857462558 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'mean'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 07:40:24,653] Trial 100 finished with value: 0.5077534657762304 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'constant'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 08:18:55,959] Trial 72 finished with value: 0.4604193901256166 and parameters: {'model_name': 'GAIN', 'batch_size': 803, 'hint_rate': 0.9368385168395394, 'alpha': 99, 'iterations': 4173, 'learning_rate': 0.004933045252344071, 'p_miss': 0.28835414192148706}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 08:25:05,536] Trial 19 finished with value: 0.4610279643482307 and parameters: {'model_name': 'GAIN', 'batch_size': 118, 'hint_rate': 0.9057222401708509, 'alpha': 80, 'iterations': 7824, 'learning_rate': 0.0030503692982633214, 'p_miss': 0.2774340987542101}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 08:25:14,992] Trial 103 finished with value: 0.13819187938257377 and parameters: {'model_name': 'VAE', 'batch_size': 4, 'iterations': 3, 'learning_rate': 0.00010254551624012571, 'p_miss': 0.19992421145145184}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 08:25:15,691] Trial 104 finished with value: 0.10322372339637827 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 08:25:16,356] Trial 105 finished with value: 0.10322372339637827 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 08:25:17,065] Trial 106 finished with value: 0.10322372339637827 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 08:25:17,627] Trial 107 finished with value: 0.10322372339637827 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 08:25:18,398] Trial 108 finished with value: 0.10322372339637827 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 08:25:19,062] Trial 109 finished with value: 0.10322372339637827 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 08:25:19,514] Trial 110 finished with value: 0.11338602857462558 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'mean'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 08:25:20,249] Trial 111 finished with value: 0.10322372339637827 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 08:25:20,890] Trial 112 finished with value: 0.10322372339637827 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 08:25:21,487] Trial 113 finished with value: 0.10322372339637827 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 08:25:22,130] Trial 114 finished with value: 0.10322372339637827 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 08:25:22,595] Trial 115 finished with value: 0.10322372339637827 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 08:25:23,265] Trial 116 finished with value: 0.10322372339637827 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 08:25:23,873] Trial 117 finished with value: 0.10322372339637827 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 08:25:24,621] Trial 118 finished with value: 0.10322372339637827 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 08:25:26,357] Trial 119 finished with value: 0.5077534657762304 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'most_frequent'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 08:25:27,064] Trial 120 finished with value: 0.10322372339637827 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 08:25:27,733] Trial 121 finished with value: 0.10322372339637827 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 08:31:22,507] Trial 34 finished with value: 0.12086980760792228 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'constant', 'n_nearest_features': 18, 'imputation_order': 'random'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 08:39:14,506] Trial 30 finished with value: 0.12038399505093515 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'constant', 'n_nearest_features': 20, 'imputation_order': 'ascending'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 08:46:06,786] Trial 124 finished with value: 0.13138380368405383 and parameters: {'model_name': 'VAE', 'batch_size': 2, 'iterations': 164, 'learning_rate': 0.0011477755367518235, 'p_miss': 0.08403057295853587}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 08:46:07,539] Trial 125 finished with value: 0.10322372339637827 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 08:46:08,162] Trial 126 finished with value: 0.10322372339637827 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 08:46:08,820] Trial 127 finished with value: 0.10322372339637827 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 08:46:09,508] Trial 128 finished with value: 0.10322372339637827 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 08:46:09,995] Trial 129 finished with value: 0.5077534657762304 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'constant'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 08:46:10,656] Trial 130 finished with value: 0.10322372339637827 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 08:46:11,408] Trial 131 finished with value: 0.10322372339637827 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 08:46:12,036] Trial 132 finished with value: 0.10322372339637827 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 08:46:12,700] Trial 133 finished with value: 0.10322372339637827 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 08:50:59,451] Trial 71 finished with value: 0.45220423311210534 and parameters: {'model_name': 'GAIN', 'batch_size': 619, 'hint_rate': 0.9837739616063466, 'alpha': 77, 'iterations': 6213, 'learning_rate': 0.004043402835314615, 'p_miss': 0.2910242119498599}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 08:51:00,088] Trial 135 finished with value: 0.10322372339637827 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 08:51:00,661] Trial 136 finished with value: 0.10322372339637827 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 08:51:01,279] Trial 137 finished with value: 0.10322372339637827 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 08:51:01,785] Trial 138 finished with value: 0.11338602857462558 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'mean'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 08:51:02,481] Trial 139 finished with value: 0.10322372339637827 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 08:51:44,147] Trial 140 finished with value: 0.1362135533655964 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'mean', 'n_nearest_features': 5, 'imputation_order': 'roman'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 08:51:45,976] Trial 141 finished with value: 0.5077534657762304 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'most_frequent'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 08:51:46,639] Trial 142 finished with value: 0.10322372339637827 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 08:52:06,327] Trial 143 finished with value: 0.1261953152254261 and parameters: {'model_name': 'VAE', 'batch_size': 96, 'iterations': 2, 'learning_rate': 0.01586917058060676, 'p_miss': 0.08276646292612369}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 08:52:07,118] Trial 144 finished with value: 0.10322372339637827 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 08:52:07,832] Trial 145 finished with value: 0.10322372339637827 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 08:52:08,418] Trial 146 finished with value: 0.10322372339637827 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 08:52:09,134] Trial 147 finished with value: 0.10322372339637827 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 08:52:09,693] Trial 148 finished with value: 0.10322372339637827 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 08:52:10,244] Trial 149 finished with value: 0.10322372339637827 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 09:06:14,923] Trial 134 finished with value: 0.48176196177730646 and parameters: {'model_name': 'GAIN', 'batch_size': 81, 'hint_rate': 0.42579214883201466, 'alpha': 64, 'iterations': 841, 'learning_rate': 0.016500248707062324, 'p_miss': 0.011175760951534164}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 09:06:15,743] Trial 151 finished with value: 0.10322372339637827 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 09:06:16,246] Trial 152 finished with value: 0.5077534657762304 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'constant'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 09:06:28,538] Trial 153 finished with value: 0.11300395431848687 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3862, 'weights': 'distance'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 09:06:29,081] Trial 154 finished with value: 0.10322372339637827 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 09:06:29,687] Trial 155 finished with value: 0.10322372339637827 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 09:06:30,496] Trial 156 finished with value: 0.10322372339637827 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 09:06:31,296] Trial 157 finished with value: 0.10322372339637827 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 09:06:32,053] Trial 158 finished with value: 0.10322372339637827 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 09:06:32,712] Trial 159 finished with value: 0.10322372339637827 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 09:06:33,508] Trial 160 finished with value: 0.10322372339637827 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 09:06:33,982] Trial 161 finished with value: 0.11338602857462558 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'mean'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 09:06:34,587] Trial 162 finished with value: 0.10322372339637827 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 09:06:35,196] Trial 163 finished with value: 0.10322372339637827 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 09:06:36,798] Trial 164 finished with value: 0.5077534657762304 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'most_frequent'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 09:07:30,448] Trial 165 finished with value: 0.1360057014126728 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'median', 'n_nearest_features': 8, 'imputation_order': 'descending'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 09:07:31,122] Trial 166 finished with value: 0.10322372339637827 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 09:07:31,787] Trial 167 finished with value: 0.10322372339637827 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 09:07:32,419] Trial 168 finished with value: 0.10322372339637827 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 09:07:32,965] Trial 169 finished with value: 0.10322372339637827 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 09:07:33,653] Trial 170 finished with value: 0.10322372339637827 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 09:07:34,435] Trial 171 finished with value: 0.10322372339637827 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 09:08:34,892] Trial 123 finished with value: 0.14883967555794406 and parameters: {'model_name': 'VAE', 'batch_size': 2, 'iterations': 896, 'learning_rate': 0.001038680826572809, 'p_miss': 0.19896293236355928}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 09:11:21,475] Trial 173 finished with value: 0.4564652222257516 and parameters: {'model_name': 'GAIN', 'batch_size': 212, 'hint_rate': 0.6246370668548261, 'alpha': 48, 'iterations': 103, 'learning_rate': 0.001770378384045757, 'p_miss': 0.24379725196623855}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 09:11:22,255] Trial 174 finished with value: 0.10322372339637827 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 09:11:22,878] Trial 175 finished with value: 0.10322372339637827 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 09:11:23,691] Trial 176 finished with value: 0.10322372339637827 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 09:11:24,385] Trial 177 finished with value: 0.10322372339637827 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 09:11:25,252] Trial 178 finished with value: 0.10322372339637827 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 09:11:25,891] Trial 179 finished with value: 0.10322372339637827 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 09:11:26,321] Trial 180 finished with value: 0.5077534657762304 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'constant'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 09:11:27,113] Trial 181 finished with value: 0.10322372339637827 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 09:11:27,750] Trial 182 finished with value: 0.10322372339637827 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 09:11:38,510] Trial 183 finished with value: 0.11279169064002374 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 2772, 'weights': 'distance'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 09:11:39,208] Trial 184 finished with value: 0.10322372339637827 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 09:11:39,722] Trial 185 finished with value: 0.10322372339637827 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 09:11:40,306] Trial 186 finished with value: 0.10322372339637827 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 09:11:40,999] Trial 187 finished with value: 0.10322372339637827 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 09:11:41,675] Trial 188 finished with value: 0.10322372339637827 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 09:11:42,538] Trial 189 finished with value: 0.10322372339637827 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 09:11:43,090] Trial 190 finished with value: 0.10322372339637827 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 09:11:43,804] Trial 191 finished with value: 0.10322372339637827 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 09:11:44,382] Trial 192 finished with value: 0.10322372339637827 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 09:12:32,745] Trial 193 finished with value: 0.13261516069444343 and parameters: {'model_name': 'VAE', 'batch_size': 8, 'iterations': 15, 'learning_rate': 0.00019899930724050262, 'p_miss': 0.1161437786272891}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 09:12:33,281] Trial 194 finished with value: 0.11338602857462558 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'mean'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 09:12:34,961] Trial 195 finished with value: 0.5077534657762304 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'most_frequent'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 09:12:35,564] Trial 196 finished with value: 0.10322372339637827 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 09:12:36,276] Trial 197 finished with value: 0.10322372339637827 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 09:12:36,929] Trial 198 finished with value: 0.10322372339637827 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.10322372339637827.
running
[I 2024-11-13 09:12:37,725] Trial 199 finished with value: 0.10322372339637827 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 13 with value: 0.10322372339637827.
[I 2024-11-13 09:15:32,363] Trial 172 finished with value: 0.12454475639330939 and parameters: {'model_name': 'VAE', 'batch_size': 194, 'iterations': 142, 'learning_rate': 0.001668611328467629, 'p_miss': 0.19287827052344841}. Best is trial 13 with value: 0.10322372339637827.
[I 2024-11-13 09:17:55,698] Trial 150 finished with value: 0.4454496610569551 and parameters: {'model_name': 'GAIN', 'batch_size': 7, 'hint_rate': 0.4515535478062422, 'alpha': 59, 'iterations': 1157, 'learning_rate': 0.0010221489672836972, 'p_miss': 0.195112203299283}. Best is trial 13 with value: 0.10322372339637827.
[I 2024-11-13 09:19:35,481] Trial 69 finished with value: 0.4646255306966792 and parameters: {'model_name': 'GAIN', 'batch_size': 912, 'hint_rate': 0.9882059819088693, 'alpha': 95, 'iterations': 5525, 'learning_rate': 0.00423158316419915, 'p_miss': 0.25952395878710527}. Best is trial 13 with value: 0.10322372339637827.
[I 2024-11-13 09:22:49,100] Trial 76 finished with value: 0.4567681757463526 and parameters: {'model_name': 'GAIN', 'batch_size': 189, 'hint_rate': 0.4790770894723442, 'alpha': 96, 'iterations': 9664, 'learning_rate': 0.013601133548989983, 'p_miss': 0.2990082834179585}. Best is trial 13 with value: 0.10322372339637827.
[I 2024-11-13 09:47:47,961] Trial 122 finished with value: 0.12298448200999638 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'median', 'n_nearest_features': 7, 'imputation_order': 'descending'}. Best is trial 13 with value: 0.10322372339637827.
[I 2024-11-13 10:05:41,624] Trial 78 finished with value: 0.46590298012034337 and parameters: {'model_name': 'GAIN', 'batch_size': 992, 'hint_rate': 0.4686779739233659, 'alpha': 97, 'iterations': 5888, 'learning_rate': 0.014352795473261014, 'p_miss': 0.2962238399923849}. Best is trial 13 with value: 0.10322372339637827.
[I 2024-11-13 10:11:56,406] Trial 74 finished with value: 0.4671017400627342 and parameters: {'model_name': 'GAIN', 'batch_size': 893, 'hint_rate': 0.9555299485136914, 'alpha': 99, 'iterations': 7581, 'learning_rate': 0.005097180717322324, 'p_miss': 0.28229812307829577}. Best is trial 13 with value: 0.10322372339637827.
[I 2024-11-13 10:24:42,127] Trial 73 finished with value: 0.4588610392714868 and parameters: {'model_name': 'GAIN', 'batch_size': 928, 'hint_rate': 0.985713596275694, 'alpha': 100, 'iterations': 8351, 'learning_rate': 0.004954482527957925, 'p_miss': 0.28650962909797295}. Best is trial 13 with value: 0.10322372339637827.
[I 2024-11-13 10:36:21,751] Trial 70 finished with value: 0.4600079967674106 and parameters: {'model_name': 'GAIN', 'batch_size': 848, 'hint_rate': 0.9785154979807577, 'alpha': 84, 'iterations': 9548, 'learning_rate': 0.005417382790661269, 'p_miss': 0.2841601149588053}. Best is trial 13 with value: 0.10322372339637827.
[I 2024-11-13 10:39:11,604] Trial 101 finished with value: 0.1466289216325058 and parameters: {'model_name': 'VAE', 'batch_size': 3, 'iterations': 8171, 'learning_rate': 0.001612637639736516, 'p_miss': 0.19891788879754976}. Best is trial 13 with value: 0.10322372339637827.
[I 2024-11-13 10:43:10,042] Trial 89 finished with value: 0.12472087943067056 and parameters: {'model_name': 'VAE', 'batch_size': 119, 'iterations': 8751, 'learning_rate': 0.018994983759621338, 'p_miss': 0.212615066022942}. Best is trial 13 with value: 0.10322372339637827.
[I 2024-11-13 10:44:36,018] Trial 77 finished with value: 0.4698360296910876 and parameters: {'model_name': 'GAIN', 'batch_size': 988, 'hint_rate': 0.47826237077779604, 'alpha': 98, 'iterations': 9858, 'learning_rate': 0.01309962095772547, 'p_miss': 0.29327756948056904}. Best is trial 13 with value: 0.10322372339637827.
[I 2024-11-13 10:45:13,549] Trial 102 finished with value: 0.12658401421271082 and parameters: {'model_name': 'VAE', 'batch_size': 111, 'iterations': 9567, 'learning_rate': 0.0012260986747641733, 'p_miss': 0.19681267197352081}. Best is trial 13 with value: 0.10322372339637827.
[I 2024-11-13 10:52:20,741] Trial 85 finished with value: 0.47314128104195063 and parameters: {'model_name': 'GAIN', 'batch_size': 943, 'hint_rate': 0.47815403123642997, 'alpha': 81, 'iterations': 9605, 'learning_rate': 0.00011186985191093605, 'p_miss': 0.19987496275667727}. Best is trial 13 with value: 0.10322372339637827.
[I 2024-11-13 10:52:31,377] Trial 84 finished with value: 0.4727027521233538 and parameters: {'model_name': 'GAIN', 'batch_size': 987, 'hint_rate': 0.454167857127393, 'alpha': 77, 'iterations': 9924, 'learning_rate': 0.01287496220598202, 'p_miss': 0.19965545413779462}. Best is trial 13 with value: 0.10322372339637827.
fit
auto fit
auto transform
0     0
1     0
2     0
3     0
4     0
5     0
6     0
7     0
8     0
9     0
10    0
11    0
12    0
13    0
14    0
15    0
16    0
17    0
18    0
19    0
dtype: int64
0     0
1     0
2     0
3     0
4     0
5     0
6     0
7     0
8     0
9     0
10    0
11    0
12    0
13    0
14    0
15    0
16    0
17    0
18    0
19    0
dtype: int64
0.10322372339637827
{'model_name': 'SimpleImputer', 'strategy': 'median'}
running experiment 2/3 - Does reconstruction give good automl predictions
Start est fit
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
  0%|          | 0/25 [00:00<?, ?it/s]Generation:   0%|          | 0/25 [00:00<?, ?it/s]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155465ab6ef0> 
 The 'min_samples_split' parameter of DecisionTreeClassifier must be an int in the range [2, inf) or a float in the range (0.0, 1.0]. Got 1 instead. 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1466, in wrapper
    estimator._validate_params()
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 666, in _validate_params
    validate_parameter_constraints(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/_param_validation.py", line 95, in validate_parameter_constraints
    raise InvalidParameterError(
sklearn.utils._param_validation.InvalidParameterError: The 'min_samples_split' parameter of DecisionTreeClassifier must be an int in the range [2, inf) or a float in the range (0.0, 1.0]. Got 1 instead.

Generation:  1
Best f1_score score: 0.9734690757311576
Generation:   4%|▍         | 1/25 [00:12<05:05, 12.74s/it]Generation:  2
Best f1_score score: 0.9734690757311576
Generation:   8%|▊         | 2/25 [02:03<27:05, 70.69s/it]Generation:  3
Best f1_score score: 0.9734690757311576
Generation:  12%|█▏        | 3/25 [02:38<19:48, 54.03s/it]Generation:  4
Best f1_score score: 0.9734690757311576
Generation:  16%|█▌        | 4/25 [03:06<15:17, 43.69s/it]Generation:  5
Best f1_score score: 0.9734690757311576
Generation:  20%|██        | 5/25 [03:45<14:04, 42.23s/it]Generation:  6
Best f1_score score: 0.9734690757311576
Generation:  24%|██▍       | 6/25 [04:24<13:02, 41.21s/it]Generation:  7
Best f1_score score: 0.9734690757311576
Generation:  28%|██▊       | 7/25 [05:09<12:40, 42.27s/it]Generation:  8
Best f1_score score: 0.9734690757311576
Generation:  32%|███▏      | 8/25 [05:49<11:49, 41.73s/it]Generation:  9
Best f1_score score: 0.9734690757311576
Generation:  36%|███▌      | 9/25 [06:09<09:18, 34.89s/it]Generation:  10
Best f1_score score: 0.9734690757311576
Generation:  40%|████      | 10/25 [07:04<10:15, 41.06s/it]Generation:  11
Best f1_score score: 0.9734690757311576
Generation:  44%|████▍     | 11/25 [07:32<08:36, 36.88s/it]Generation:  12
Best f1_score score: 0.9734690757311576
Generation:  48%|████▊     | 12/25 [07:59<07:21, 33.98s/it]Generation:  13
Best f1_score score: 0.9734690757311576
Generation:  52%|█████▏    | 13/25 [08:45<07:31, 37.62s/it]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x1554658d16f0> 
 Argument 'metric' has incorrect type (expected str, got numpy.str_) 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 31, in cross_val_score_objective
    this_fold_scores = [sklearn.metrics.get_scorer(scorer)(this_fold_pipeline, X_test, y_test) for scorer in scorers]
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 31, in <listcomp>
    this_fold_scores = [sklearn.metrics.get_scorer(scorer)(this_fold_pipeline, X_test, y_test) for scorer in scorers]
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/metrics/_scorer.py", line 279, in __call__
    return self._score(partial(_cached_call, None), estimator, X, y_true, **_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/metrics/_scorer.py", line 371, in _score
    y_pred = method_caller(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/metrics/_scorer.py", line 89, in _cached_call
    result, _ = _get_response_values(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/_response.py", line 211, in _get_response_values
    y_pred = prediction_method(X)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 601, in predict
    return self.steps[-1][1].predict(Xt, **params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 259, in predict
    probabilities = self.predict_proba(X)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 343, in predict_proba
    probabilities = ArgKminClassMode.compute(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/metrics/_pairwise_distances_reduction/_dispatcher.py", line 584, in compute
    return ArgKminClassMode64.compute(
TypeError: Argument 'metric' has incorrect type (expected str, got numpy.str_)

Generation:  14
Best f1_score score: 0.9734690757311576
Generation:  56%|█████▌    | 14/25 [09:13<06:22, 34.77s/it]Generation:  15
Best f1_score score: 0.9734690757311576
Generation:  60%|██████    | 15/25 [09:42<05:28, 32.88s/it]Generation:  16
Best f1_score score: 0.9734690757311576
Generation:  64%|██████▍   | 16/25 [10:20<05:10, 34.53s/it]Generation:  17
Best f1_score score: 0.9734690757311576
Generation:  68%|██████▊   | 17/25 [11:48<06:45, 50.68s/it]Generation:  18
Best f1_score score: 0.9734690757311576
Generation:  72%|███████▏  | 18/25 [12:46<06:10, 52.95s/it]Generation:  19
Best f1_score score: 0.9734690757311576
Generation:  76%|███████▌  | 19/25 [13:22<04:46, 47.71s/it]Generation:  20
Best f1_score score: 0.9734690757311576
Generation:  80%|████████  | 20/25 [15:20<05:44, 68.94s/it]Generation:  21
Best f1_score score: 0.9734690757311576
Generation:  84%|████████▍ | 21/25 [16:12<04:14, 63.68s/it]Generation:  22
Best f1_score score: 0.9734690757311576
Generation:  88%|████████▊ | 22/25 [17:02<02:58, 59.66s/it]Generation:  23
Best f1_score score: 0.9734690757311576
Generation:  92%|█████████▏| 23/25 [17:48<01:51, 55.51s/it]Generation:  24
Best f1_score score: 0.9734690757311576
Generation:  96%|█████████▌| 24/25 [19:17<01:05, 65.51s/it]Generation:  25
Best f1_score score: 0.9734690757311576
Generation: 100%|██████████| 25/25 [19:46<00:00, 54.60s/it]Generation: 100%|██████████| 25/25 [19:53<00:00, 47.73s/it]
2024-11-13 11:12:38,816 - distributed.scheduler - ERROR - Removing worker 'tcp://127.0.0.1:43513' caused the cluster to lose scattered data, which can't be recovered: {'ndarray-4cb56bbbe4ce60b80e8b59051bc5b8d8', 'ndarray-6eac02561829ff245f9e59686ce5b694'} (stimulus_id='handle-worker-cleanup-1731525158.8161547')
Fitted
Pipeline(steps=[('gaussiannb', GaussianNB())])
score start
train score: {'auroc': 0.9958697642521612, 'accuracy': 0.9736486486486486, 'balanced_accuracy': 0.9735468125535698, 'logloss': 0.07917229429541495, 'f1': 0.9736381750464911}
original test score: {'auroc': 0.9974267237207128, 'accuracy': 0.9783783783783784, 'balanced_accuracy': 0.9784147960646588, 'logloss': 0.059814419583808266, 'f1': 0.9783777466105656}
imputed test score: {'auroc': 0.994597763496003, 'accuracy': 0.9743243243243244, 'balanced_accuracy': 0.974219753045835, 'logloss': 0.08169403100985885, 'f1': 0.9743137702671842}
score end
check intended
EXP2 Finished
running experiment 3/3 - What is the best automl settings?
<tpot2.search_spaces.pipelines.sequential.SequentialPipeline object at 0x155435014610>
Start tpot fit
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
  0%|          | 0/25 [00:00<?, ?it/s]Generation:   0%|          | 0/25 [00:00<?, ?it/s]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155474cd54b0> 
 Input X contains NaN.
MultinomialNB does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/naive_bayes.py", line 732, in fit
    X, y = self._check_X_y(X, y)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/naive_bayes.py", line 578, in _check_X_y
    return self._validate_data(X, y, accept_sparse="csr", reset=reset)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 650, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1301, in check_X_y
    X = check_array(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1064, in check_array
    _assert_all_finite(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 123, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 172, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
MultinomialNB does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155474cd4ca0> 
 Input X contains NaN.
MultinomialNB does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/naive_bayes.py", line 732, in fit
    X, y = self._check_X_y(X, y)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/naive_bayes.py", line 578, in _check_X_y
    return self._validate_data(X, y, accept_sparse="csr", reset=reset)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 650, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1301, in check_X_y
    X = check_array(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1064, in check_array
    _assert_all_finite(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 123, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 172, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
MultinomialNB does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

WARNING AN INDIVIDUAL TIMED OUT: 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155474cd4970> 

WARNING AN INDIVIDUAL TIMED OUT: 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155474cd4e20> 

Generation:  1
Best f1_score score: 0.949701628391805
Generation:   4%|▍         | 1/25 [10:03<4:01:15, 603.15s/it]Generation:  2
Best f1_score score: 0.9570807219288898
Generation:   8%|▊         | 2/25 [13:54<2:27:23, 384.49s/it]Generation:  3
Best f1_score score: 0.9741445663341697
Generation:  12%|█▏        | 3/25 [14:35<1:23:26, 227.58s/it]WARNING AN INDIVIDUAL TIMED OUT: 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155474d7a260> 

Generation:  4
Best f1_score score: 0.9741445663341697
Generation:  16%|█▌        | 4/25 [24:39<2:11:39, 376.16s/it]Generation:  5
Best f1_score score: 0.9741445663341697
Generation:  20%|██        | 5/25 [25:08<1:23:41, 251.08s/it]Generation:  6
Best f1_score score: 0.9741445663341697
Generation:  24%|██▍       | 6/25 [32:02<1:37:02, 306.47s/it]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x1554570f5840> 
 Input X contains NaN.
GaussianNB does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/naive_bayes.py", line 263, in fit
    return self._partial_fit(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/naive_bayes.py", line 423, in _partial_fit
    X, y = self._validate_data(X, y, reset=first_call)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 650, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1301, in check_X_y
    X = check_array(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1064, in check_array
    _assert_all_finite(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 123, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 172, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
GaussianNB does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Generation:  7
Best f1_score score: 0.9741445663341697
Generation:  28%|██▊       | 7/25 [32:23<1:03:57, 213.21s/it]Generation:  8
Best f1_score score: 0.9743137118079244
Generation:  32%|███▏      | 8/25 [33:16<45:55, 162.11s/it]  WARNING AN INDIVIDUAL TIMED OUT: 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x1553ba4e8640> 

Generation:  9
Best f1_score score: 0.9743137118079244
Generation:  36%|███▌      | 9/25 [43:24<1:20:24, 301.56s/it]WARNING AN INDIVIDUAL TIMED OUT: 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x1554570bf7c0> 

Generation:  10
Best f1_score score: 0.9743137118079244
Generation:  40%|████      | 10/25 [53:31<1:38:57, 395.86s/it]Generation:  11
Best f1_score score: 0.9743137118079244
Generation:  44%|████▍     | 11/25 [54:10<1:06:50, 286.47s/it]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x15545bd2d9c0> 
 Input X contains NaN.
GaussianNB does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/naive_bayes.py", line 263, in fit
    return self._partial_fit(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/naive_bayes.py", line 423, in _partial_fit
    X, y = self._validate_data(X, y, reset=first_call)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 650, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1301, in check_X_y
    X = check_array(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1064, in check_array
    _assert_all_finite(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 123, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 172, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
GaussianNB does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Generation:  12
Best f1_score score: 0.9743137118079244
Generation:  48%|████▊     | 12/25 [56:04<50:44, 234.18s/it]  WARNING AN INDIVIDUAL TIMED OUT: 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x1553c5f0bbb0> 

Generation:  13
Best f1_score score: 0.9743137118079244
Generation:  52%|█████▏    | 13/25 [1:06:11<1:09:22, 346.90s/it]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155456d32ad0> 
 Input X contains NaN.
GaussianNB does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/naive_bayes.py", line 263, in fit
    return self._partial_fit(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/naive_bayes.py", line 423, in _partial_fit
    X, y = self._validate_data(X, y, reset=first_call)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 650, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1301, in check_X_y
    X = check_array(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1064, in check_array
    _assert_all_finite(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 123, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 172, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
GaussianNB does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x15545fb0ca30> 
 Input X contains NaN.
GaussianNB does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/naive_bayes.py", line 263, in fit
    return self._partial_fit(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/naive_bayes.py", line 423, in _partial_fit
    X, y = self._validate_data(X, y, reset=first_call)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 650, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1301, in check_X_y
    X = check_array(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1064, in check_array
    _assert_all_finite(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 123, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 172, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
GaussianNB does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Generation:  14
Best f1_score score: 0.9743137118079244
Generation:  56%|█████▌    | 14/25 [1:10:02<57:11, 311.91s/it]  WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x15545fff44f0> 
 Input X contains NaN.
GaussianNB does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/naive_bayes.py", line 263, in fit
    return self._partial_fit(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/naive_bayes.py", line 423, in _partial_fit
    X, y = self._validate_data(X, y, reset=first_call)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 650, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1301, in check_X_y
    X = check_array(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1064, in check_array
    _assert_all_finite(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 123, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 172, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
GaussianNB does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Generation:  15
Best f1_score score: 0.9743137118079244
Generation:  60%|██████    | 15/25 [1:12:17<43:05, 258.60s/it]Generation:  16
Best f1_score score: 0.9743137118079244
Generation:  64%|██████▍   | 16/25 [1:15:53<36:51, 245.74s/it]Generation:  17
Best f1_score score: 0.9743137118079244
Generation:  68%|██████▊   | 17/25 [1:16:34<24:34, 184.32s/it]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155455b019f0> 
 Input X contains NaN.
GaussianNB does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/naive_bayes.py", line 263, in fit
    return self._partial_fit(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/naive_bayes.py", line 423, in _partial_fit
    X, y = self._validate_data(X, y, reset=first_call)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 650, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1301, in check_X_y
    X = check_array(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1064, in check_array
    _assert_all_finite(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 123, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 172, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
GaussianNB does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

WARNING AN INDIVIDUAL TIMED OUT: 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x15545f808040> 

Generation:  18
Best f1_score score: 0.9743137118079244
Generation:  72%|███████▏  | 18/25 [1:26:40<36:16, 310.95s/it]Generation:  19
Best f1_score score: 0.9743137118079244
Generation:  76%|███████▌  | 19/25 [1:27:36<23:25, 234.33s/it]Generation:  20
Best f1_score score: 0.9743137118079244
Generation:  80%|████████  | 20/25 [1:30:17<17:42, 212.52s/it]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x1554745991e0> 
 Input X contains NaN.
GaussianNB does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/naive_bayes.py", line 263, in fit
    return self._partial_fit(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/naive_bayes.py", line 423, in _partial_fit
    X, y = self._validate_data(X, y, reset=first_call)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 650, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1301, in check_X_y
    X = check_array(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1064, in check_array
    _assert_all_finite(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 123, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 172, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
GaussianNB does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155456cc0280> 
 Input X contains NaN.
GaussianNB does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/naive_bayes.py", line 263, in fit
    return self._partial_fit(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/naive_bayes.py", line 423, in _partial_fit
    X, y = self._validate_data(X, y, reset=first_call)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 650, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1301, in check_X_y
    X = check_array(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1064, in check_array
    _assert_all_finite(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 123, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 172, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
GaussianNB does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

WARNING AN INDIVIDUAL TIMED OUT: 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x15545f750340> 

Generation:  21
Best f1_score score: 0.9743137118079244
Generation:  84%|████████▍ | 21/25 [1:40:25<22:04, 331.03s/it]WARNING AN INDIVIDUAL TIMED OUT: 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x15543f1ecbe0> 

WARNING AN INDIVIDUAL TIMED OUT: 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155448f6d870> 

Generation:  22
Best f1_score score: 0.9743137118079244
Generation:  88%|████████▊ | 22/25 [1:50:32<20:42, 414.04s/it]Generation:  23
Best f1_score score: 0.9743137118079244
Generation:  92%|█████████▏| 23/25 [1:51:05<09:59, 299.67s/it]WARNING AN INDIVIDUAL TIMED OUT: 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x15545fa20640> 

Generation:  24
Best f1_score score: 0.9743137118079244
Generation:  96%|█████████▌| 24/25 [2:01:15<06:32, 392.78s/it]Generation:  25
Best f1_score score: 0.9743137118079244
Generation: 100%|██████████| 25/25 [2:01:46<00:00, 284.27s/it]Generation: 100%|██████████| 25/25 [2:01:46<00:00, 292.27s/it]
2024-11-13 13:14:37,033 - distributed.scheduler - ERROR - Removing worker 'tcp://127.0.0.1:34513' caused the cluster to lose scattered data, which can't be recovered: {'DataFrame-e238258f8a58714cfd6e6df811357512', 'ndarray-4cb56bbbe4ce60b80e8b59051bc5b8d8'} (stimulus_id='handle-worker-cleanup-1731532477.0330224')
Fitted
Pipeline(steps=[('knnimputer', KNNImputer(n_neighbors=60, weights='distance')),
                ('gaussiannb', GaussianNB())])
transform worked
try transform
transform worked
score start
train score: {'auroc': 0.9958667964727713, 'accuracy': 0.9746621621621622, 'balanced_accuracy': 0.9745670437915254, 'logloss': 0.07932816382793616, 'f1': 0.9746527628317249}
test score: {'auroc': 0.9946160266349618, 'accuracy': 0.975, 'balanced_accuracy': 0.9749018812859442, 'logloss': 0.08206528549198848, 'f1': 0.9749903976097469}
original test score: {'auroc': 0.9974358552901922, 'accuracy': 0.9777027027027027, 'balanced_accuracy': 0.9777454520218207, 'logloss': 0.06071401168925796, 'f1': 0.9777022038933486}
score end
1496
lvl
0.1
type
MCAR
num_run
3
class_full
finished
all finished
full run takes
7.633960063589944
hours
DONE
