Run: 28
/cm/local/apps/slurm/var/spool/job1024505/slurm_script: line 26: 
pip install -e tpot2
pip install -r tpot2/ImputerExperiments/requirements_.txt
: No such file or directory
RunStart
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
starting loops
../data/c/737/737.pkl
working on 
../data/c/737/class_full_MCAR_0.5_2
2.5605716705322266
running experiment 1/3 - Does large hyperparameter space improve reconstruction accuracy over simple
[I 2024-10-25 23:21:37,615] A new study created in memory with name: no-name-59382e99-2307-446c-aa97-7d577bf69213
running
running
running
running
running
running
running
running
running
running
running
running
running
[I 2024-10-25 23:21:37,727] Trial 2 finished with value: 0.41159037322130665 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'constant'}. Best is trial 2 with value: 0.41159037322130665.
running
running
running
running
[I 2024-10-25 23:21:37,977] Trial 11 finished with value: 0.21861930244766917 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'mean'}. Best is trial 11 with value: 0.21861930244766917.
running
[I 2024-10-25 23:21:38,212] Trial 9 finished with value: 0.21861930244766917 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'mean'}. Best is trial 11 with value: 0.21861930244766917.
running
[I 2024-10-25 23:21:38,396] Trial 14 finished with value: 0.41159037322130665 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'most_frequent'}. Best is trial 11 with value: 0.21861930244766917.
running
[I 2024-10-25 23:21:38,524] Trial 13 finished with value: 0.21861930244766917 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'mean'}. Best is trial 11 with value: 0.21861930244766917.
running
[I 2024-10-25 23:21:38,725] Trial 18 finished with value: 0.21861930244766917 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'mean'}. Best is trial 11 with value: 0.21861930244766917.
running
[I 2024-10-25 23:21:38,888] Trial 20 finished with value: 0.28606308559928995 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 11 with value: 0.21861930244766917.
[I 2024-10-25 23:21:39,011] Trial 1 finished with value: 0.21861930244766917 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 2242, 'weights': 'uniform'}. Best is trial 11 with value: 0.21861930244766917.
running
running
[I 2024-10-25 23:21:39,269] Trial 21 finished with value: 0.28606308559928995 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 11 with value: 0.21861930244766917.
running
[I 2024-10-25 23:21:39,606] Trial 6 finished with value: 0.2213113739426634 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 93, 'weights': 'uniform'}. Best is trial 11 with value: 0.21861930244766917.
running
[I 2024-10-25 23:21:39,974] Trial 17 finished with value: 0.23993503360270535 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 612, 'weights': 'distance'}. Best is trial 11 with value: 0.21861930244766917.
[I 2024-10-25 23:21:40,136] Trial 19 finished with value: 0.22238954255097862 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 495, 'weights': 'uniform'}. Best is trial 11 with value: 0.21861930244766917.
running
running
[I 2024-10-25 23:21:40,522] Trial 3 finished with value: 0.23909264303045008 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 1847, 'weights': 'distance'}. Best is trial 11 with value: 0.21861930244766917.
running
[I 2024-10-25 23:21:40,863] Trial 22 finished with value: 0.2390221870691165 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 1968, 'weights': 'distance'}. Best is trial 11 with value: 0.21861930244766917.
running
[I 2024-10-25 23:21:41,019] Trial 24 finished with value: 0.21979549304419138 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 1663, 'weights': 'uniform'}. Best is trial 11 with value: 0.21861930244766917.
running
[I 2024-10-25 23:21:43,383] Trial 12 finished with value: 0.21744562290142885 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Ridge', 'initial_strategy': 'median', 'n_nearest_features': 1, 'imputation_order': 'random'}. Best is trial 12 with value: 0.21744562290142885.
running
[I 2024-10-25 23:21:46,358] Trial 5 finished with value: 0.2310957229257118 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'most_frequent', 'n_nearest_features': 6, 'imputation_order': 'ascending'}. Best is trial 12 with value: 0.21744562290142885.
running
[I 2024-10-25 23:21:47,362] Trial 31 finished with value: 0.21744562290142885 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Ridge', 'initial_strategy': 'median', 'n_nearest_features': 1, 'imputation_order': 'random'}. Best is trial 12 with value: 0.21744562290142885.
running
[I 2024-10-25 23:21:47,838] Trial 30 finished with value: 0.2164815377852582 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Ridge', 'initial_strategy': 'mean', 'n_nearest_features': 3, 'imputation_order': 'arabic'}. Best is trial 30 with value: 0.2164815377852582.
running
[I 2024-10-25 23:21:48,880] Trial 16 finished with value: 0.3081737843225561 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Bayesian', 'initial_strategy': 'constant', 'n_nearest_features': 3, 'imputation_order': 'descending', 'sample_posterior': True}. Best is trial 30 with value: 0.2164815377852582.
running
[I 2024-10-25 23:21:49,355] Trial 33 finished with value: 0.21744562290142885 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Ridge', 'initial_strategy': 'median', 'n_nearest_features': 1, 'imputation_order': 'random'}. Best is trial 30 with value: 0.2164815377852582.
running
[I 2024-10-25 23:21:50,081] Trial 36 finished with value: 0.2174777471589759 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Ridge', 'initial_strategy': 'mean', 'n_nearest_features': 1, 'imputation_order': 'arabic'}. Best is trial 30 with value: 0.2164815377852582.
running
[I 2024-10-25 23:22:15,460] Trial 23 finished with value: inf and parameters: {'model_name': 'GAIN', 'batch_size': 1, 'hint_rate': 0.05276370505519005, 'alpha': 73, 'iterations': 1, 'learning_rate': 0.0021536050960221484, 'p_miss': 0.03562223581055061}. Best is trial 30 with value: 0.2164815377852582.
running
[I 2024-10-25 23:22:17,005] Trial 15 finished with value: inf and parameters: {'model_name': 'GAIN', 'batch_size': 5, 'hint_rate': 0.5655046134418659, 'alpha': 78, 'iterations': 1, 'learning_rate': 0.0034451582578730803, 'p_miss': 0.1644729705319861}. Best is trial 30 with value: 0.2164815377852582.
running
[I 2024-10-25 23:22:23,932] Trial 37 finished with value: 0.2215376668716637 and parameters: {'model_name': 'VAE', 'batch_size': 110, 'iterations': 1, 'learning_rate': 0.0655334243364177, 'p_miss': 0.285092023523163}. Best is trial 30 with value: 0.2164815377852582.
running
[I 2024-10-25 23:22:28,721] Trial 25 finished with value: 0.13619131363906808 and parameters: {'model_name': 'VAE', 'batch_size': 1, 'iterations': 4, 'learning_rate': 0.0025341473363404473, 'p_miss': 0.26269868853211353}. Best is trial 25 with value: 0.13619131363906808.
running
[I 2024-10-25 23:22:32,155] Trial 40 finished with value: 0.2178799371751127 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Ridge', 'initial_strategy': 'median', 'n_nearest_features': 2, 'imputation_order': 'random'}. Best is trial 25 with value: 0.13619131363906808.
running
[I 2024-10-25 23:22:35,895] Trial 4 finished with value: 0.3667127421958195 and parameters: {'model_name': 'GAIN', 'batch_size': 12, 'hint_rate': 0.9527789393985256, 'alpha': 71, 'iterations': 13, 'learning_rate': 0.09672585463916512, 'p_miss': 0.2456561198136313}. Best is trial 25 with value: 0.13619131363906808.
running
[I 2024-10-25 23:22:50,391] Trial 35 finished with value: 0.3711895596110657 and parameters: {'model_name': 'GAIN', 'batch_size': 3, 'hint_rate': 0.703665383247075, 'alpha': 17, 'iterations': 21, 'learning_rate': 0.06587806526966648, 'p_miss': 0.19399097696442175}. Best is trial 25 with value: 0.13619131363906808.
running
[I 2024-10-25 23:22:54,542] Trial 34 finished with value: 0.2412821019663439 and parameters: {'model_name': 'VAE', 'batch_size': 912, 'iterations': 7, 'learning_rate': 0.030521963707143634, 'p_miss': 0.268991448555734}. Best is trial 25 with value: 0.13619131363906808.
running
[I 2024-10-25 23:23:25,165] Trial 7 finished with value: 0.362610612885583 and parameters: {'model_name': 'GAIN', 'batch_size': 6, 'hint_rate': 0.12841946039335767, 'alpha': 94, 'iterations': 44, 'learning_rate': 0.005043376452327293, 'p_miss': 0.22432658122279858}. Best is trial 25 with value: 0.13619131363906808.
running
[I 2024-10-25 23:28:02,832] Trial 27 finished with value: 0.240966827922801 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'median', 'n_nearest_features': 1, 'imputation_order': 'arabic'}. Best is trial 25 with value: 0.13619131363906808.
running
[I 2024-10-25 23:30:20,711] Trial 8 finished with value: 0.22712895236368413 and parameters: {'model_name': 'VAE', 'batch_size': 14, 'iterations': 139, 'learning_rate': 0.034363568360123185, 'p_miss': 0.10946677320209018}. Best is trial 25 with value: 0.13619131363906808.
running
[I 2024-10-25 23:30:29,301] Trial 48 finished with value: 0.21641392229300718 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Ridge', 'initial_strategy': 'mean', 'n_nearest_features': 4, 'imputation_order': 'random'}. Best is trial 25 with value: 0.13619131363906808.
running
[I 2024-10-25 23:33:31,550] Trial 0 finished with value: 0.22898167742411574 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'most_frequent', 'n_nearest_features': 6, 'imputation_order': 'random'}. Best is trial 25 with value: 0.13619131363906808.
running
[I 2024-10-25 23:46:49,859] Trial 32 finished with value: 0.21407782210840148 and parameters: {'model_name': 'VAE', 'batch_size': 1, 'iterations': 430, 'learning_rate': 0.0014334906398256648, 'p_miss': 0.2838965613674684}. Best is trial 25 with value: 0.13619131363906808.
running
[I 2024-10-25 23:52:07,390] Trial 26 finished with value: inf and parameters: {'model_name': 'GAIN', 'batch_size': 3, 'hint_rate': 0.668064112425072, 'alpha': 72, 'iterations': 6019, 'learning_rate': 0.002036114084418951, 'p_miss': 0.14570624257193027}. Best is trial 25 with value: 0.13619131363906808.
running
[I 2024-10-26 00:12:21,026] Trial 52 finished with value: 0.12864610726422268 and parameters: {'model_name': 'VAE', 'batch_size': 1, 'iterations': 437, 'learning_rate': 0.00013808389108760686, 'p_miss': 0.29747367630319793}. Best is trial 52 with value: 0.12864610726422268.
running
[I 2024-10-26 00:25:29,297] Trial 46 finished with value: 0.18375257173722437 and parameters: {'model_name': 'VAE', 'batch_size': 49, 'iterations': 1309, 'learning_rate': 0.00010227777951348471, 'p_miss': 0.09617814300558938}. Best is trial 52 with value: 0.12864610726422268.
running
[I 2024-10-26 00:32:27,433] Trial 29 finished with value: 0.2208698804261969 and parameters: {'model_name': 'VAE', 'batch_size': 31, 'iterations': 1325, 'learning_rate': 0.00023796131863179854, 'p_miss': 0.16194300476491502}. Best is trial 52 with value: 0.12864610726422268.
running
[I 2024-10-26 00:35:18,132] Trial 42 finished with value: 0.1459402942852406 and parameters: {'model_name': 'VAE', 'batch_size': 1, 'iterations': 1375, 'learning_rate': 0.0001137655914772118, 'p_miss': 0.2874943825865338}. Best is trial 52 with value: 0.12864610726422268.
running
[I 2024-10-26 00:39:29,531] Trial 53 finished with value: 0.1370070040234776 and parameters: {'model_name': 'VAE', 'batch_size': 1, 'iterations': 562, 'learning_rate': 0.00018444079255048584, 'p_miss': 0.29895582414303457}. Best is trial 52 with value: 0.12864610726422268.
running
[I 2024-10-26 00:46:22,822] Trial 47 finished with value: 0.20744964930338647 and parameters: {'model_name': 'VAE', 'batch_size': 56, 'iterations': 1498, 'learning_rate': 0.00012955147808877234, 'p_miss': 0.08364749365901483}. Best is trial 52 with value: 0.12864610726422268.
running
[I 2024-10-26 00:53:16,437] Trial 55 finished with value: 0.13770626045154705 and parameters: {'model_name': 'VAE', 'batch_size': 1, 'iterations': 378, 'learning_rate': 0.00011486155807006273, 'p_miss': 0.2898955666446916}. Best is trial 52 with value: 0.12864610726422268.
running
[I 2024-10-26 01:00:58,317] Trial 56 finished with value: 0.1315313945207797 and parameters: {'model_name': 'VAE', 'batch_size': 1, 'iterations': 504, 'learning_rate': 0.00010005422799180847, 'p_miss': 0.298650189962037}. Best is trial 52 with value: 0.12864610726422268.
running
[I 2024-10-26 01:02:17,080] Trial 54 finished with value: 0.13066485343374795 and parameters: {'model_name': 'VAE', 'batch_size': 1, 'iterations': 690, 'learning_rate': 0.00010245977231692797, 'p_miss': 0.29798154964257706}. Best is trial 52 with value: 0.12864610726422268.
running
[I 2024-10-26 01:09:41,616] Trial 59 finished with value: 0.13586583637307553 and parameters: {'model_name': 'VAE', 'batch_size': 1, 'iterations': 312, 'learning_rate': 0.00036476515551778677, 'p_miss': 0.2896402297735708}. Best is trial 52 with value: 0.12864610726422268.
running
[I 2024-10-26 01:12:56,123] Trial 60 finished with value: 0.13276314014428067 and parameters: {'model_name': 'VAE', 'batch_size': 1, 'iterations': 207, 'learning_rate': 0.00037448989021342054, 'p_miss': 0.29783526680930744}. Best is trial 52 with value: 0.12864610726422268.
running
[I 2024-10-26 01:15:15,696] Trial 62 finished with value: 0.1344840323798647 and parameters: {'model_name': 'VAE', 'batch_size': 2, 'iterations': 122, 'learning_rate': 0.00042031955486122456, 'p_miss': 0.25213892454141723}. Best is trial 52 with value: 0.12864610726422268.
running
[I 2024-10-26 01:18:04,753] Trial 61 finished with value: 0.14521278621500947 and parameters: {'model_name': 'VAE', 'batch_size': 2, 'iterations': 304, 'learning_rate': 0.00036885394461651667, 'p_miss': 0.29996358306240983}. Best is trial 52 with value: 0.12864610726422268.
running
[I 2024-10-26 01:20:46,739] Trial 58 finished with value: 0.1372191889778592 and parameters: {'model_name': 'VAE', 'batch_size': 1, 'iterations': 697, 'learning_rate': 0.00010070556888089909, 'p_miss': 0.2980027498526009}. Best is trial 52 with value: 0.12864610726422268.
running
[I 2024-10-26 01:21:06,871] Trial 64 finished with value: 0.14056693739190412 and parameters: {'model_name': 'VAE', 'batch_size': 2, 'iterations': 126, 'learning_rate': 0.0005086014621958884, 'p_miss': 0.24127107381713686}. Best is trial 52 with value: 0.12864610726422268.
running
[I 2024-10-26 01:21:09,994] Trial 63 finished with value: 0.13679746870940676 and parameters: {'model_name': 'VAE', 'batch_size': 2, 'iterations': 145, 'learning_rate': 0.0004360010751267502, 'p_miss': 0.24878463877276152}. Best is trial 52 with value: 0.12864610726422268.
running
[I 2024-10-26 01:23:32,996] Trial 65 finished with value: 0.1404041027061269 and parameters: {'model_name': 'VAE', 'batch_size': 2, 'iterations': 92, 'learning_rate': 0.0007143969892351713, 'p_miss': 0.23688689194987222}. Best is trial 52 with value: 0.12864610726422268.
running
[I 2024-10-26 01:25:54,583] Trial 66 finished with value: 0.1339496162568506 and parameters: {'model_name': 'VAE', 'batch_size': 2, 'iterations': 108, 'learning_rate': 0.00048723145710297415, 'p_miss': 0.24840973211049083}. Best is trial 52 with value: 0.12864610726422268.
running
[I 2024-10-26 01:28:58,976] Trial 70 finished with value: 0.12835051593332927 and parameters: {'model_name': 'VAE', 'batch_size': 4, 'iterations': 49, 'learning_rate': 0.00022597190688551712, 'p_miss': 0.2633241701249276}. Best is trial 70 with value: 0.12835051593332927.
running
[I 2024-10-26 01:29:19,562] Trial 67 finished with value: 0.13857857143516084 and parameters: {'model_name': 'VAE', 'batch_size': 2, 'iterations': 148, 'learning_rate': 0.0006976352379272221, 'p_miss': 0.25967988527390395}. Best is trial 70 with value: 0.12835051593332927.
running
[I 2024-10-26 01:30:58,172] Trial 57 finished with value: 0.14587398583886885 and parameters: {'model_name': 'VAE', 'batch_size': 1, 'iterations': 955, 'learning_rate': 0.00011652836607559008, 'p_miss': 0.2945628176648038}. Best is trial 70 with value: 0.12835051593332927.
running
[I 2024-10-26 01:31:52,199] Trial 71 finished with value: 0.13408876428587183 and parameters: {'model_name': 'VAE', 'batch_size': 4, 'iterations': 43, 'learning_rate': 0.0002153440977364906, 'p_miss': 0.2681951506644651}. Best is trial 70 with value: 0.12835051593332927.
running
[I 2024-10-26 01:31:53,120] Trial 72 finished with value: 0.12750771715002113 and parameters: {'model_name': 'VAE', 'batch_size': 5, 'iterations': 49, 'learning_rate': 0.00021769423141428953, 'p_miss': 0.2716670612842878}. Best is trial 72 with value: 0.12750771715002113.
running
[I 2024-10-26 01:32:25,918] Trial 68 finished with value: 0.18044010105790234 and parameters: {'model_name': 'VAE', 'batch_size': 2, 'iterations': 199, 'learning_rate': 0.0008604649997110495, 'p_miss': 0.27021451553624476}. Best is trial 72 with value: 0.12750771715002113.
running
[I 2024-10-26 01:32:47,159] Trial 73 finished with value: 0.13034391159179054 and parameters: {'model_name': 'VAE', 'batch_size': 5, 'iterations': 31, 'learning_rate': 0.0002165042944046345, 'p_miss': 0.21869385984743778}. Best is trial 72 with value: 0.12750771715002113.
running
[I 2024-10-26 01:33:18,690] Trial 75 finished with value: 0.13411133763767294 and parameters: {'model_name': 'VAE', 'batch_size': 7, 'iterations': 28, 'learning_rate': 0.00020697582720089296, 'p_miss': 0.21390156699519583}. Best is trial 72 with value: 0.12750771715002113.
running
[I 2024-10-26 01:35:00,001] Trial 76 finished with value: 0.1333356484190415 and parameters: {'model_name': 'VAE', 'batch_size': 8, 'iterations': 55, 'learning_rate': 0.0002311346491880882, 'p_miss': 0.20852272955679335}. Best is trial 72 with value: 0.12750771715002113.
running
[I 2024-10-26 01:35:17,512] Trial 77 finished with value: 0.1329453867837771 and parameters: {'model_name': 'VAE', 'batch_size': 9, 'iterations': 46, 'learning_rate': 0.00024015110277234025, 'p_miss': 0.2009238002345594}. Best is trial 72 with value: 0.12750771715002113.
running
[I 2024-10-26 01:35:17,865] Trial 69 finished with value: 0.1299540021497337 and parameters: {'model_name': 'VAE', 'batch_size': 2, 'iterations': 245, 'learning_rate': 0.0002707946793604128, 'p_miss': 0.26771718711960824}. Best is trial 72 with value: 0.12750771715002113.
running
[I 2024-10-26 01:35:19,821] Trial 80 finished with value: 0.2395632331498832 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 1264, 'weights': 'distance'}. Best is trial 72 with value: 0.12750771715002113.
running
[I 2024-10-26 01:35:40,180] Trial 79 finished with value: 0.13939812047947495 and parameters: {'model_name': 'VAE', 'batch_size': 20, 'iterations': 12, 'learning_rate': 0.0001684960757916403, 'p_miss': 0.28338772300085924}. Best is trial 72 with value: 0.12750771715002113.
running
[I 2024-10-26 01:35:47,174] Trial 78 finished with value: 0.13555261004336233 and parameters: {'model_name': 'VAE', 'batch_size': 10, 'iterations': 56, 'learning_rate': 0.00026227894893249797, 'p_miss': 0.21392053765353533}. Best is trial 72 with value: 0.12750771715002113.
running
[I 2024-10-26 01:35:47,748] Trial 84 finished with value: 0.41159037322130665 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'most_frequent'}. Best is trial 72 with value: 0.12750771715002113.
running
[I 2024-10-26 01:36:16,334] Trial 83 finished with value: 0.36607728375249854 and parameters: {'model_name': 'GAIN', 'batch_size': 4, 'hint_rate': 0.32688288403432764, 'alpha': 16, 'iterations': 24, 'learning_rate': 0.007604386687769022, 'p_miss': 0.22394471058809892}. Best is trial 72 with value: 0.12750771715002113.
running
[I 2024-10-26 01:36:56,726] Trial 85 finished with value: 0.13322365966705493 and parameters: {'model_name': 'VAE', 'batch_size': 4, 'iterations': 19, 'learning_rate': 0.00015397566541672697, 'p_miss': 0.23190895395657363}. Best is trial 72 with value: 0.12750771715002113.
running
[I 2024-10-26 01:38:05,941] Trial 51 finished with value: 0.22450979123617004 and parameters: {'model_name': 'VAE', 'batch_size': 1, 'iterations': 2158, 'learning_rate': 0.0002200149687700132, 'p_miss': 0.28150963931942774}. Best is trial 72 with value: 0.12750771715002113.
running
[I 2024-10-26 01:39:53,290] Trial 45 finished with value: 0.22511494274462124 and parameters: {'model_name': 'VAE', 'batch_size': 65, 'iterations': 2943, 'learning_rate': 0.00013237573668946315, 'p_miss': 0.07626267450373164}. Best is trial 72 with value: 0.12750771715002113.
running
[I 2024-10-26 01:54:03,581] Trial 88 finished with value: 0.14396229435528285 and parameters: {'model_name': 'VAE', 'batch_size': 3, 'iterations': 244, 'learning_rate': 0.00032029292766459517, 'p_miss': 0.2719774899388846}. Best is trial 72 with value: 0.12750771715002113.
running
[I 2024-10-26 01:54:20,010] Trial 49 finished with value: 0.2434599549627757 and parameters: {'model_name': 'VAE', 'batch_size': 1, 'iterations': 2836, 'learning_rate': 0.00021132195986586693, 'p_miss': 0.11100989633222087}. Best is trial 72 with value: 0.12750771715002113.
running
[I 2024-10-26 01:54:23,222] Trial 89 finished with value: 0.14573511009116502 and parameters: {'model_name': 'VAE', 'batch_size': 3, 'iterations': 212, 'learning_rate': 0.00033549445189635235, 'p_miss': 0.27464259076500924}. Best is trial 72 with value: 0.12750771715002113.
running
[I 2024-10-26 01:54:24,708] Trial 92 finished with value: 0.23964010174491945 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 1110, 'weights': 'distance'}. Best is trial 72 with value: 0.12750771715002113.
running
[I 2024-10-26 02:23:13,177] Trial 91 finished with value: 0.15773841190046714 and parameters: {'model_name': 'VAE', 'batch_size': 5, 'iterations': 562, 'learning_rate': 0.0001490084221811936, 'p_miss': 0.2761646918716585}. Best is trial 72 with value: 0.12750771715002113.
running
[I 2024-10-26 02:23:13,565] Trial 94 finished with value: 0.41159037322130665 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'constant'}. Best is trial 72 with value: 0.12750771715002113.
running
[I 2024-10-26 02:25:22,406] Trial 95 finished with value: 0.36752800467846114 and parameters: {'model_name': 'GAIN', 'batch_size': 6, 'hint_rate': 0.9249614532520498, 'alpha': 40, 'iterations': 85, 'learning_rate': 0.00015751698766630756, 'p_miss': 0.2572538685550941}. Best is trial 72 with value: 0.12750771715002113.
running
[I 2024-10-26 02:29:04,382] Trial 96 finished with value: 0.129263402556002 and parameters: {'model_name': 'VAE', 'batch_size': 10, 'iterations': 68, 'learning_rate': 0.0002930510274318135, 'p_miss': 0.18118190116632987}. Best is trial 72 with value: 0.12750771715002113.
running
[I 2024-10-26 02:29:21,814] Trial 93 finished with value: 0.15532849531380452 and parameters: {'model_name': 'VAE', 'batch_size': 16, 'iterations': 604, 'learning_rate': 0.00015809132756391622, 'p_miss': 0.2604768682792383}. Best is trial 72 with value: 0.12750771715002113.
running
[I 2024-10-26 02:30:56,480] Trial 97 finished with value: 0.13188363248740723 and parameters: {'model_name': 'VAE', 'batch_size': 13, 'iterations': 34, 'learning_rate': 0.00030862194423656076, 'p_miss': 0.17074507972012004}. Best is trial 72 with value: 0.12750771715002113.
running
[I 2024-10-26 02:31:29,709] Trial 98 finished with value: 0.14186972943336174 and parameters: {'model_name': 'VAE', 'batch_size': 12, 'iterations': 40, 'learning_rate': 0.0002917436932801078, 'p_miss': 0.1859669965083054}. Best is trial 72 with value: 0.12750771715002113.
running
[I 2024-10-26 02:31:30,828] Trial 99 finished with value: 0.12971596543917027 and parameters: {'model_name': 'VAE', 'batch_size': 12, 'iterations': 13, 'learning_rate': 0.0002815326091693271, 'p_miss': 0.16019571012223022}. Best is trial 72 with value: 0.12750771715002113.
running
[I 2024-10-26 02:31:51,599] Trial 90 finished with value: 0.16194676432425595 and parameters: {'model_name': 'VAE', 'batch_size': 5, 'iterations': 595, 'learning_rate': 0.00015827732636358922, 'p_miss': 0.27636386428560195}. Best is trial 72 with value: 0.12750771715002113.
running
[I 2024-10-26 02:32:04,430] Trial 100 finished with value: 0.16963815265806312 and parameters: {'model_name': 'VAE', 'batch_size': 29, 'iterations': 9, 'learning_rate': 0.01439619206594126, 'p_miss': 0.16840480970127408}. Best is trial 72 with value: 0.12750771715002113.
running
[I 2024-10-26 02:32:08,039] Trial 101 finished with value: 0.1375231274550758 and parameters: {'model_name': 'VAE', 'batch_size': 6, 'iterations': 11, 'learning_rate': 0.00013416795093345373, 'p_miss': 0.17826532063773698}. Best is trial 72 with value: 0.12750771715002113.
running
[I 2024-10-26 02:32:24,944] Trial 102 finished with value: 0.13543444732391446 and parameters: {'model_name': 'VAE', 'batch_size': 21, 'iterations': 11, 'learning_rate': 0.005076105628605303, 'p_miss': 0.157938978589163}. Best is trial 72 with value: 0.12750771715002113.
running
[I 2024-10-26 02:33:09,185] Trial 104 finished with value: 0.1374336357267898 and parameters: {'model_name': 'VAE', 'batch_size': 3, 'iterations': 19, 'learning_rate': 0.00010601161856997637, 'p_miss': 0.14090568504089673}. Best is trial 72 with value: 0.12750771715002113.
running
[I 2024-10-26 02:33:25,646] Trial 106 finished with value: 0.12747655370891806 and parameters: {'model_name': 'VAE', 'batch_size': 14, 'iterations': 5, 'learning_rate': 0.00027295718887787563, 'p_miss': 0.14050570939247525}. Best is trial 106 with value: 0.12747655370891806.
running
[I 2024-10-26 02:33:37,051] Trial 107 finished with value: 0.1315555400571856 and parameters: {'model_name': 'VAE', 'batch_size': 9, 'iterations': 4, 'learning_rate': 0.00020311357622016822, 'p_miss': 0.14050571899844677}. Best is trial 106 with value: 0.12747655370891806.
running
[I 2024-10-26 02:33:56,045] Trial 108 finished with value: 0.13125508610204703 and parameters: {'model_name': 'VAE', 'batch_size': 14, 'iterations': 5, 'learning_rate': 0.000582615895760333, 'p_miss': 0.14961916583918844}. Best is trial 106 with value: 0.12747655370891806.
running
[I 2024-10-26 02:34:11,416] Trial 109 finished with value: 0.1271987467077546 and parameters: {'model_name': 'VAE', 'batch_size': 16, 'iterations': 5, 'learning_rate': 0.0015037124213744964, 'p_miss': 0.1259983237784046}. Best is trial 109 with value: 0.1271987467077546.
running
[I 2024-10-26 02:34:23,525] Trial 110 finished with value: 0.13570364207049626 and parameters: {'model_name': 'VAE', 'batch_size': 559, 'iterations': 2, 'learning_rate': 0.0013722196861798322, 'p_miss': 0.13474895563046713}. Best is trial 109 with value: 0.1271987467077546.
running
[I 2024-10-26 02:34:24,898] Trial 111 finished with value: 0.21861930244766917 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 2454, 'weights': 'uniform'}. Best is trial 109 with value: 0.1271987467077546.
running
[I 2024-10-26 02:34:34,422] Trial 112 finished with value: 0.13153050939119826 and parameters: {'model_name': 'VAE', 'batch_size': 18, 'iterations': 3, 'learning_rate': 0.0001870234221836002, 'p_miss': 0.13526616230784716}. Best is trial 109 with value: 0.1271987467077546.
running
[I 2024-10-26 02:34:58,616] Trial 113 finished with value: 0.13255573756045433 and parameters: {'model_name': 'VAE', 'batch_size': 26, 'iterations': 6, 'learning_rate': 0.0002756411505776168, 'p_miss': 0.11624771399363582}. Best is trial 109 with value: 0.1271987467077546.
running
[I 2024-10-26 02:36:42,384] Trial 38 finished with value: 0.23006568739359548 and parameters: {'model_name': 'VAE', 'batch_size': 732, 'iterations': 2807, 'learning_rate': 0.0801114231240505, 'p_miss': 0.29188226763638625}. Best is trial 109 with value: 0.1271987467077546.
running
[I 2024-10-26 02:36:43,050] Trial 115 finished with value: 0.41159037322130665 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'most_frequent'}. Best is trial 109 with value: 0.1271987467077546.
running
[I 2024-10-26 02:37:06,979] Trial 116 finished with value: 0.12831955471491985 and parameters: {'model_name': 'VAE', 'batch_size': 37, 'iterations': 6, 'learning_rate': 0.0014524250127351723, 'p_miss': 0.15058073448154752}. Best is trial 109 with value: 0.1271987467077546.
running
[I 2024-10-26 02:37:13,747] Trial 117 finished with value: 0.1349414386482965 and parameters: {'model_name': 'VAE', 'batch_size': 49, 'iterations': 2, 'learning_rate': 0.0010742217852108956, 'p_miss': 0.12290433339059502}. Best is trial 109 with value: 0.1271987467077546.
running
[I 2024-10-26 02:37:29,220] Trial 103 finished with value: 0.1293917233008756 and parameters: {'model_name': 'VAE', 'batch_size': 326, 'iterations': 68, 'learning_rate': 0.00011573672836283175, 'p_miss': 0.1454848886983653}. Best is trial 109 with value: 0.1271987467077546.
running
[I 2024-10-26 02:37:53,370] Trial 114 finished with value: 0.14647736589232285 and parameters: {'model_name': 'VAE', 'batch_size': 38, 'iterations': 63, 'learning_rate': 0.0014996331777979985, 'p_miss': 0.11529043331988142}. Best is trial 109 with value: 0.1271987467077546.
running
[I 2024-10-26 02:38:33,567] Trial 120 finished with value: 0.13109658257831017 and parameters: {'model_name': 'VAE', 'batch_size': 170, 'iterations': 8, 'learning_rate': 0.0021530585494389494, 'p_miss': 0.12670410776518934}. Best is trial 109 with value: 0.1271987467077546.
running
[I 2024-10-26 02:40:45,769] Trial 121 finished with value: 0.37046879300708446 and parameters: {'model_name': 'GAIN', 'batch_size': 288, 'hint_rate': 0.33405347131508983, 'alpha': 37, 'iterations': 82, 'learning_rate': 0.00024141538090485738, 'p_miss': 0.153388356331565}. Best is trial 109 with value: 0.1271987467077546.
running
[I 2024-10-26 02:40:52,526] Trial 118 finished with value: 0.1918092164373333 and parameters: {'model_name': 'VAE', 'batch_size': 70, 'iterations': 71, 'learning_rate': 0.001997602545086747, 'p_miss': 0.15244952816529286}. Best is trial 109 with value: 0.1271987467077546.
running
[I 2024-10-26 02:40:59,747] Trial 119 finished with value: 0.19433831855804473 and parameters: {'model_name': 'VAE', 'batch_size': 35, 'iterations': 69, 'learning_rate': 0.00242690372293922, 'p_miss': 0.15277194765310181}. Best is trial 109 with value: 0.1271987467077546.
running
[I 2024-10-26 02:41:06,164] Trial 122 finished with value: 0.13537378192395239 and parameters: {'model_name': 'VAE', 'batch_size': 11, 'iterations': 16, 'learning_rate': 0.0004094858642405767, 'p_miss': 0.0969011200631553}. Best is trial 109 with value: 0.1271987467077546.
running
[I 2024-10-26 02:41:08,840] Trial 124 finished with value: 0.21680449360319595 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Bayesian', 'initial_strategy': 'constant', 'n_nearest_features': 5, 'imputation_order': 'roman', 'sample_posterior': False}. Best is trial 109 with value: 0.1271987467077546.
running
[I 2024-10-26 02:41:18,082] Trial 125 finished with value: 0.2299115490203066 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'constant', 'n_nearest_features': 5, 'imputation_order': 'roman'}. Best is trial 109 with value: 0.1271987467077546.
running
[I 2024-10-26 02:41:57,581] Trial 123 finished with value: 0.16647942236572333 and parameters: {'model_name': 'VAE', 'batch_size': 11, 'iterations': 29, 'learning_rate': 0.0032638758239587526, 'p_miss': 0.10241516774992535}. Best is trial 109 with value: 0.1271987467077546.
running
[I 2024-10-26 02:42:07,692] Trial 128 finished with value: 0.14077464749585628 and parameters: {'model_name': 'VAE', 'batch_size': 7, 'iterations': 3, 'learning_rate': 0.00018293328183028354, 'p_miss': 0.16541822104395354}. Best is trial 109 with value: 0.1271987467077546.
running
[I 2024-10-26 02:53:15,145] Trial 50 finished with value: 0.22324974462169456 and parameters: {'model_name': 'VAE', 'batch_size': 1, 'iterations': 3655, 'learning_rate': 0.00010310007074885469, 'p_miss': 0.10841360416941681}. Best is trial 109 with value: 0.1271987467077546.
running
[I 2024-10-26 03:24:48,804] Trial 126 finished with value: 0.18650076650141384 and parameters: {'model_name': 'VAE', 'batch_size': 7, 'iterations': 936, 'learning_rate': 0.00018517433671247355, 'p_miss': 0.16074589398772204}. Best is trial 109 with value: 0.1271987467077546.
running
[I 2024-10-26 03:25:15,108] Trial 131 finished with value: 0.1358973974763755 and parameters: {'model_name': 'VAE', 'batch_size': 17, 'iterations': 6, 'learning_rate': 0.0001273498791670693, 'p_miss': 0.035664707262169}. Best is trial 109 with value: 0.1271987467077546.
running
[I 2024-10-26 03:27:54,179] Trial 127 finished with value: 0.15952944792468565 and parameters: {'model_name': 'VAE', 'batch_size': 7, 'iterations': 871, 'learning_rate': 0.00012774666508444746, 'p_miss': 0.17522850381073712}. Best is trial 109 with value: 0.1271987467077546.
running
[I 2024-10-26 03:32:54,880] Trial 129 finished with value: 0.15794182845546284 and parameters: {'model_name': 'VAE', 'batch_size': 16, 'iterations': 1072, 'learning_rate': 0.00012402709238366872, 'p_miss': 0.142471224186703}. Best is trial 109 with value: 0.1271987467077546.
running
[I 2024-10-26 03:33:53,976] Trial 105 finished with value: 0.16600794569528307 and parameters: {'model_name': 'VAE', 'batch_size': 373, 'iterations': 843, 'learning_rate': 0.0001042499763494114, 'p_miss': 0.15213971720389946}. Best is trial 109 with value: 0.1271987467077546.
running
[I 2024-10-26 03:34:56,158] Trial 135 finished with value: 0.12966648437829165 and parameters: {'model_name': 'VAE', 'batch_size': 24, 'iterations': 16, 'learning_rate': 0.0002749798968248782, 'p_miss': 0.1922486452539126}. Best is trial 109 with value: 0.1271987467077546.
running
[I 2024-10-26 03:35:13,755] Trial 134 finished with value: 0.13193225752642937 and parameters: {'model_name': 'VAE', 'batch_size': 138, 'iterations': 33, 'learning_rate': 0.0002798525422239959, 'p_miss': 0.18925910260450268}. Best is trial 109 with value: 0.1271987467077546.
running
[I 2024-10-26 03:35:42,339] Trial 136 finished with value: 0.1328518405475294 and parameters: {'model_name': 'VAE', 'batch_size': 24, 'iterations': 16, 'learning_rate': 0.00024410995074368382, 'p_miss': 0.18880670663492966}. Best is trial 109 with value: 0.1271987467077546.
running
[I 2024-10-26 03:35:58,839] Trial 137 finished with value: 0.13048368264782764 and parameters: {'model_name': 'VAE', 'batch_size': 23, 'iterations': 14, 'learning_rate': 0.0005341325008483733, 'p_miss': 0.2872274405300196}. Best is trial 109 with value: 0.1271987467077546.
running
[I 2024-10-26 03:36:55,134] Trial 139 finished with value: 0.13222201672824033 and parameters: {'model_name': 'VAE', 'batch_size': 14, 'iterations': 15, 'learning_rate': 0.0005469438169599239, 'p_miss': 0.2854222957415139}. Best is trial 109 with value: 0.1271987467077546.
running
[I 2024-10-26 03:38:04,360] Trial 138 finished with value: 0.13773007674328674 and parameters: {'model_name': 'VAE', 'batch_size': 4, 'iterations': 48, 'learning_rate': 0.0005123763793701539, 'p_miss': 0.1996779730317675}. Best is trial 109 with value: 0.1271987467077546.
running
[I 2024-10-26 03:38:17,756] Trial 140 finished with value: 0.13081657315692594 and parameters: {'model_name': 'VAE', 'batch_size': 4, 'iterations': 23, 'learning_rate': 0.00035196959295726087, 'p_miss': 0.2663193198826098}. Best is trial 109 with value: 0.1271987467077546.
running
[I 2024-10-26 03:38:19,054] Trial 142 finished with value: 0.22031853957041186 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 1210, 'weights': 'uniform'}. Best is trial 109 with value: 0.1271987467077546.
running
[I 2024-10-26 03:38:46,879] Trial 143 finished with value: 0.13926619669284274 and parameters: {'model_name': 'VAE', 'batch_size': 32, 'iterations': 8, 'learning_rate': 0.0006644792537231315, 'p_miss': 0.17783658397534233}. Best is trial 109 with value: 0.1271987467077546.
running
[I 2024-10-26 03:39:18,523] Trial 141 finished with value: 0.1302908279160138 and parameters: {'model_name': 'VAE', 'batch_size': 21, 'iterations': 22, 'learning_rate': 0.00036197263791892847, 'p_miss': 0.12862438265555498}. Best is trial 109 with value: 0.1271987467077546.
running
[I 2024-10-26 03:39:18,767] Trial 145 finished with value: 0.41159037322130665 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'constant'}. Best is trial 109 with value: 0.1271987467077546.
running
[I 2024-10-26 03:40:34,000] Trial 144 finished with value: 0.1377440926500504 and parameters: {'model_name': 'VAE', 'batch_size': 22, 'iterations': 37, 'learning_rate': 0.0008676696713852575, 'p_miss': 0.1321024674655009}. Best is trial 109 with value: 0.1271987467077546.
running
[I 2024-10-26 03:41:09,143] Trial 147 finished with value: 0.13238013564565843 and parameters: {'model_name': 'VAE', 'batch_size': 18, 'iterations': 10, 'learning_rate': 0.0003010542767407803, 'p_miss': 0.2813952555677859}. Best is trial 109 with value: 0.1271987467077546.
running
[I 2024-10-26 03:41:13,497] Trial 82 finished with value: 0.21719810441870804 and parameters: {'model_name': 'VAE', 'batch_size': 4, 'iterations': 2733, 'learning_rate': 0.00015551404724911734, 'p_miss': 0.2737680263094129}. Best is trial 109 with value: 0.1271987467077546.
running
[I 2024-10-26 03:41:23,411] Trial 146 finished with value: 0.137081901813012 and parameters: {'model_name': 'VAE', 'batch_size': 21, 'iterations': 37, 'learning_rate': 0.0003965560480867218, 'p_miss': 0.12700816691294828}. Best is trial 109 with value: 0.1271987467077546.
running
[I 2024-10-26 03:41:38,659] Trial 43 finished with value: 0.2272991460653509 and parameters: {'model_name': 'VAE', 'batch_size': 879, 'iterations': 3324, 'learning_rate': 0.00013241225142216728, 'p_miss': 0.18602140047798255}. Best is trial 109 with value: 0.1271987467077546.
running
[I 2024-10-26 03:41:51,280] Trial 81 finished with value: 0.21632313941058423 and parameters: {'model_name': 'VAE', 'batch_size': 4, 'iterations': 2561, 'learning_rate': 0.0001669773689021381, 'p_miss': 0.22951481062687873}. Best is trial 109 with value: 0.1271987467077546.
running
[I 2024-10-26 03:41:59,777] Trial 149 finished with value: 0.1317132088776483 and parameters: {'model_name': 'VAE', 'batch_size': 26, 'iterations': 14, 'learning_rate': 0.0004382559014937123, 'p_miss': 0.1245559650317663}. Best is trial 109 with value: 0.1271987467077546.
running
[I 2024-10-26 03:42:22,899] Trial 152 finished with value: 0.3531828677547684 and parameters: {'model_name': 'GAIN', 'batch_size': 27, 'hint_rate': 0.30575677459800266, 'alpha': 0, 'iterations': 21, 'learning_rate': 0.0004433586264817474, 'p_miss': 0.29155480928289795}. Best is trial 109 with value: 0.1271987467077546.
running
[I 2024-10-26 03:42:32,882] Trial 148 finished with value: 0.132792157895099 and parameters: {'model_name': 'VAE', 'batch_size': 9, 'iterations': 27, 'learning_rate': 0.0004276108142811218, 'p_miss': 0.12650009156385064}. Best is trial 109 with value: 0.1271987467077546.
running
[I 2024-10-26 03:42:35,343] Trial 154 finished with value: 0.13197728716336457 and parameters: {'model_name': 'VAE', 'batch_size': 14, 'iterations': 4, 'learning_rate': 0.00021385163343340795, 'p_miss': 0.2557541206036342}. Best is trial 109 with value: 0.1271987467077546.
running
[I 2024-10-26 03:42:38,126] Trial 153 finished with value: 0.3482288911879351 and parameters: {'model_name': 'GAIN', 'batch_size': 9, 'hint_rate': 0.3286264194564248, 'alpha': 6, 'iterations': 26, 'learning_rate': 0.0002218184557381436, 'p_miss': 0.29183037847969756}. Best is trial 109 with value: 0.1271987467077546.
running
[I 2024-10-26 03:42:42,464] Trial 151 finished with value: 0.1331561620909131 and parameters: {'model_name': 'VAE', 'batch_size': 26, 'iterations': 25, 'learning_rate': 0.00023273369763006092, 'p_miss': 0.2919681538432601}. Best is trial 109 with value: 0.1271987467077546.
running
[I 2024-10-26 03:42:52,760] Trial 157 finished with value: 0.14309164278480963 and parameters: {'model_name': 'VAE', 'batch_size': 5, 'iterations': 6, 'learning_rate': 0.00025921667065829354, 'p_miss': 0.27991778830520125}. Best is trial 109 with value: 0.1271987467077546.
running
[I 2024-10-26 03:43:52,064] Trial 130 finished with value: 0.17747587905819287 and parameters: {'model_name': 'VAE', 'batch_size': 239, 'iterations': 798, 'learning_rate': 0.00012679380535847033, 'p_miss': 0.12689535797359092}. Best is trial 109 with value: 0.1271987467077546.
running
[I 2024-10-26 03:44:08,590] Trial 150 finished with value: 0.13239140558608 and parameters: {'model_name': 'VAE', 'batch_size': 9, 'iterations': 53, 'learning_rate': 0.0002563638962864969, 'p_miss': 0.2553671242293359}. Best is trial 109 with value: 0.1271987467077546.
running
[I 2024-10-26 03:46:09,461] Trial 132 finished with value: 0.137429591889834 and parameters: {'model_name': 'VAE', 'batch_size': 4, 'iterations': 402, 'learning_rate': 0.00012566603246308775, 'p_miss': 0.18187036132488008}. Best is trial 109 with value: 0.1271987467077546.
running
[I 2024-10-26 03:46:21,918] Trial 162 finished with value: 0.12779930365734435 and parameters: {'model_name': 'VAE', 'batch_size': 41, 'iterations': 3, 'learning_rate': 0.00033745865182944313, 'p_miss': 0.1473348245494724}. Best is trial 109 with value: 0.1271987467077546.
running
[I 2024-10-26 03:46:28,659] Trial 163 finished with value: 0.13107697629934095 and parameters: {'model_name': 'VAE', 'batch_size': 38, 'iterations': 2, 'learning_rate': 0.00034200903459369303, 'p_miss': 0.15984594971364177}. Best is trial 109 with value: 0.1271987467077546.
running
[I 2024-10-26 03:48:04,548] Trial 155 finished with value: 0.13311441026893184 and parameters: {'model_name': 'VAE', 'batch_size': 45, 'iterations': 100, 'learning_rate': 0.00022037740840152593, 'p_miss': 0.1478856236242156}. Best is trial 109 with value: 0.1271987467077546.
running
[I 2024-10-26 03:48:36,360] Trial 133 finished with value: 0.2270911114936954 and parameters: {'model_name': 'VAE', 'batch_size': 126, 'iterations': 375, 'learning_rate': 0.003964873554681028, 'p_miss': 0.12779059393206052}. Best is trial 109 with value: 0.1271987467077546.
running
[I 2024-10-26 03:48:45,793] Trial 166 finished with value: 0.14021971223235333 and parameters: {'model_name': 'VAE', 'batch_size': 12, 'iterations': 3, 'learning_rate': 0.0003091815296785626, 'p_miss': 0.14528586395410756}. Best is trial 109 with value: 0.1271987467077546.
running
[I 2024-10-26 03:49:43,217] Trial 86 finished with value: 0.21953094536926102 and parameters: {'model_name': 'VAE', 'batch_size': 5, 'iterations': 2856, 'learning_rate': 0.00015233779248830472, 'p_miss': 0.27398326868402295}. Best is trial 109 with value: 0.1271987467077546.
running
[I 2024-10-26 03:50:00,570] Trial 167 finished with value: 0.13256205320779474 and parameters: {'model_name': 'VAE', 'batch_size': 73, 'iterations': 18, 'learning_rate': 0.0001894900939156636, 'p_miss': 0.1338075487297032}. Best is trial 109 with value: 0.1271987467077546.
running
[I 2024-10-26 03:50:18,512] Trial 161 finished with value: 0.22285503504404858 and parameters: {'model_name': 'VAE', 'batch_size': 12, 'iterations': 93, 'learning_rate': 0.004439510491938098, 'p_miss': 0.14399158508874374}. Best is trial 109 with value: 0.1271987467077546.
running
[I 2024-10-26 03:50:19,150] Trial 169 finished with value: 0.1326296404775537 and parameters: {'model_name': 'VAE', 'batch_size': 19, 'iterations': 5, 'learning_rate': 0.0003552581663057341, 'p_miss': 0.24232740966617863}. Best is trial 109 with value: 0.1271987467077546.
running
[I 2024-10-26 03:50:33,877] Trial 170 finished with value: 0.138569291117664 and parameters: {'model_name': 'VAE', 'batch_size': 20, 'iterations': 5, 'learning_rate': 0.00033292551676899037, 'p_miss': 0.2200761214287835}. Best is trial 109 with value: 0.1271987467077546.
running
[I 2024-10-26 03:51:38,773] Trial 164 finished with value: 0.13548416498438273 and parameters: {'model_name': 'VAE', 'batch_size': 86, 'iterations': 105, 'learning_rate': 0.00030732536545130545, 'p_miss': 0.14434080042119843}. Best is trial 109 with value: 0.1271987467077546.
running
[I 2024-10-26 03:51:39,943] Trial 173 finished with value: 0.23993212660081817 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 89, 'weights': 'distance'}. Best is trial 109 with value: 0.1271987467077546.
running
[I 2024-10-26 03:54:01,741] Trial 174 finished with value: 0.15638078074301923 and parameters: {'model_name': 'VAE', 'batch_size': 33, 'iterations': 45, 'learning_rate': 0.0017484182873351625, 'p_miss': 0.26619377550704987}. Best is trial 109 with value: 0.1271987467077546.
running
[I 2024-10-26 03:54:41,107] Trial 175 finished with value: 0.1343193948395476 and parameters: {'model_name': 'VAE', 'batch_size': 3, 'iterations': 13, 'learning_rate': 0.0012225917709451119, 'p_miss': 0.1373097001837114}. Best is trial 109 with value: 0.1271987467077546.
running
[I 2024-10-26 03:55:55,531] Trial 176 finished with value: 0.14359855165063484 and parameters: {'model_name': 'VAE', 'batch_size': 15, 'iterations': 22, 'learning_rate': 0.00035017635413349017, 'p_miss': 0.26279164139752564}. Best is trial 109 with value: 0.1271987467077546.
running
[I 2024-10-26 03:58:19,075] Trial 10 finished with value: 0.2584854722030358 and parameters: {'model_name': 'VAE', 'batch_size': 1, 'iterations': 4686, 'learning_rate': 0.00045484353815691695, 'p_miss': 0.10344424336589182}. Best is trial 109 with value: 0.1271987467077546.
running
[I 2024-10-26 03:58:21,951] Trial 165 finished with value: 0.2287264555148844 and parameters: {'model_name': 'VAE', 'batch_size': 92, 'iterations': 163, 'learning_rate': 0.004295538666140398, 'p_miss': 0.14306436425428345}. Best is trial 109 with value: 0.1271987467077546.
running
[I 2024-10-26 03:58:35,060] Trial 177 finished with value: 0.13084787292013483 and parameters: {'model_name': 'VAE', 'batch_size': 6, 'iterations': 59, 'learning_rate': 0.0002788990963707358, 'p_miss': 0.29844853098162777}. Best is trial 109 with value: 0.1271987467077546.
running
[I 2024-10-26 03:59:18,132] Trial 171 finished with value: 0.22386784763708928 and parameters: {'model_name': 'VAE', 'batch_size': 16, 'iterations': 152, 'learning_rate': 0.001783980909787896, 'p_miss': 0.26539475581598576}. Best is trial 109 with value: 0.1271987467077546.
running
[I 2024-10-26 03:59:34,172] Trial 181 finished with value: 0.13064877462714913 and parameters: {'model_name': 'VAE', 'batch_size': 57, 'iterations': 4, 'learning_rate': 0.0003862194510930468, 'p_miss': 0.2701956878338194}. Best is trial 109 with value: 0.1271987467077546.
running
[I 2024-10-26 03:59:37,127] Trial 172 finished with value: 0.2138868232076038 and parameters: {'model_name': 'VAE', 'batch_size': 15, 'iterations': 170, 'learning_rate': 0.0017552324270722164, 'p_miss': 0.2998098945764159}. Best is trial 109 with value: 0.1271987467077546.
running
[I 2024-10-26 03:59:37,555] Trial 183 finished with value: 0.28606308559928995 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 109 with value: 0.1271987467077546.
running
[I 2024-10-26 03:59:48,887] Trial 182 finished with value: 0.12919206557813862 and parameters: {'model_name': 'VAE', 'batch_size': 49, 'iterations': 4, 'learning_rate': 0.0006267388936489301, 'p_miss': 0.28701941680063775}. Best is trial 109 with value: 0.1271987467077546.
running
[I 2024-10-26 03:59:54,513] Trial 184 finished with value: 0.13814357638325359 and parameters: {'model_name': 'VAE', 'batch_size': 57, 'iterations': 4, 'learning_rate': 0.00017263921964241053, 'p_miss': 0.2035927363771541}. Best is trial 109 with value: 0.1271987467077546.
running
[I 2024-10-26 04:00:05,474] Trial 185 finished with value: 0.13197134492360346 and parameters: {'model_name': 'VAE', 'batch_size': 56, 'iterations': 4, 'learning_rate': 0.0008178126178973952, 'p_miss': 0.11880461630184626}. Best is trial 109 with value: 0.1271987467077546.
running
[I 2024-10-26 04:00:05,774] Trial 186 finished with value: 0.14309824939466656 and parameters: {'model_name': 'VAE', 'batch_size': 41, 'iterations': 3, 'learning_rate': 0.0006206842711657765, 'p_miss': 0.2862752223559769}. Best is trial 109 with value: 0.1271987467077546.
running
[I 2024-10-26 04:00:17,943] Trial 187 finished with value: 0.13066262891835534 and parameters: {'model_name': 'VAE', 'batch_size': 38, 'iterations': 3, 'learning_rate': 0.0005418118226728126, 'p_miss': 0.2791959767443905}. Best is trial 109 with value: 0.1271987467077546.
running
[I 2024-10-26 04:00:22,617] Trial 160 finished with value: 0.16079955291763606 and parameters: {'model_name': 'VAE', 'batch_size': 12, 'iterations': 348, 'learning_rate': 0.00030268717750528006, 'p_miss': 0.14757352378919059}. Best is trial 109 with value: 0.1271987467077546.
running
[I 2024-10-26 04:00:28,523] Trial 189 finished with value: 0.2309758498780373 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'most_frequent', 'n_nearest_features': 4, 'imputation_order': 'descending'}. Best is trial 109 with value: 0.1271987467077546.
running
[I 2024-10-26 04:00:32,954] Trial 190 finished with value: 0.2309758498780373 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'most_frequent', 'n_nearest_features': 4, 'imputation_order': 'descending'}. Best is trial 109 with value: 0.1271987467077546.
running
[I 2024-10-26 04:00:34,963] Trial 188 finished with value: 0.1348823979839449 and parameters: {'model_name': 'VAE', 'batch_size': 30, 'iterations': 7, 'learning_rate': 0.00047967126481349983, 'p_miss': 0.27939733132592}. Best is trial 109 with value: 0.1271987467077546.
running
[I 2024-10-26 04:00:41,989] Trial 193 finished with value: 0.12673567519344062 and parameters: {'model_name': 'VAE', 'batch_size': 46, 'iterations': 2, 'learning_rate': 0.0009814896328626786, 'p_miss': 0.16790966741577182}. Best is trial 193 with value: 0.12673567519344062.
running
[I 2024-10-26 04:00:52,476] Trial 156 finished with value: 0.15336466417171485 and parameters: {'model_name': 'VAE', 'batch_size': 5, 'iterations': 373, 'learning_rate': 0.0002563497441057632, 'p_miss': 0.29091270765144756}. Best is trial 193 with value: 0.12673567519344062.
running
[I 2024-10-26 04:00:57,059] Trial 195 finished with value: 0.1336204527139328 and parameters: {'model_name': 'VAE', 'batch_size': 44, 'iterations': 1, 'learning_rate': 0.0010948515059421317, 'p_miss': 0.17175689631216678}. Best is trial 193 with value: 0.12673567519344062.
running
[I 2024-10-26 04:01:05,415] Trial 196 finished with value: 0.13065351471927553 and parameters: {'model_name': 'VAE', 'batch_size': 55, 'iterations': 2, 'learning_rate': 0.0007883666826948384, 'p_miss': 0.2713924902524119}. Best is trial 193 with value: 0.12673567519344062.
running
[I 2024-10-26 04:01:06,533] Trial 192 finished with value: 0.1389189908390765 and parameters: {'model_name': 'VAE', 'batch_size': 29, 'iterations': 8, 'learning_rate': 0.0005055217094048932, 'p_miss': 0.2756924814754357}. Best is trial 193 with value: 0.12673567519344062.
running
[I 2024-10-26 04:01:14,049] Trial 197 finished with value: 0.13293862030928114 and parameters: {'model_name': 'VAE', 'batch_size': 46, 'iterations': 2, 'learning_rate': 0.0009022498325285415, 'p_miss': 0.16803608130255238}. Best is trial 193 with value: 0.12673567519344062.
running
[I 2024-10-26 04:01:15,084] Trial 198 finished with value: 0.1301774688824108 and parameters: {'model_name': 'VAE', 'batch_size': 64, 'iterations': 2, 'learning_rate': 0.0007161471793248344, 'p_miss': 0.16538033605736704}. Best is trial 193 with value: 0.12673567519344062.
[I 2024-10-26 04:01:17,209] Trial 194 finished with value: 0.12810393835927458 and parameters: {'model_name': 'VAE', 'batch_size': 56, 'iterations': 9, 'learning_rate': 0.0008761424704900012, 'p_miss': 0.172537221008076}. Best is trial 193 with value: 0.12673567519344062.
[I 2024-10-26 04:01:20,753] Trial 199 finished with value: 0.13878166047895218 and parameters: {'model_name': 'VAE', 'batch_size': 56, 'iterations': 2, 'learning_rate': 0.0008039286093994832, 'p_miss': 0.15663625217555366}. Best is trial 193 with value: 0.12673567519344062.
[I 2024-10-26 04:01:40,942] Trial 178 finished with value: 0.13248710726643914 and parameters: {'model_name': 'VAE', 'batch_size': 43, 'iterations': 63, 'learning_rate': 0.0002890138215952333, 'p_miss': 0.2972821033296392}. Best is trial 193 with value: 0.12673567519344062.
[I 2024-10-26 04:03:52,152] Trial 158 finished with value: 0.22069263547069068 and parameters: {'model_name': 'VAE', 'batch_size': 5, 'iterations': 423, 'learning_rate': 0.004085804043317652, 'p_miss': 0.2819051015773222}. Best is trial 193 with value: 0.12673567519344062.
[I 2024-10-26 04:05:17,193] Trial 87 finished with value: 0.21460608223910155 and parameters: {'model_name': 'VAE', 'batch_size': 3, 'iterations': 3060, 'learning_rate': 0.0001602492428456807, 'p_miss': 0.2735314957775607}. Best is trial 193 with value: 0.12673567519344062.
[I 2024-10-26 04:06:34,719] Trial 159 finished with value: 0.22223402472028128 and parameters: {'model_name': 'VAE', 'batch_size': 38, 'iterations': 442, 'learning_rate': 0.00389934133291655, 'p_miss': 0.14447323299632425}. Best is trial 193 with value: 0.12673567519344062.
[I 2024-10-26 04:24:08,222] Trial 74 finished with value: 0.22471861478449498 and parameters: {'model_name': 'VAE', 'batch_size': 9, 'iterations': 3433, 'learning_rate': 0.0002189317096100307, 'p_miss': 0.2738750766090644}. Best is trial 193 with value: 0.12673567519344062.
[I 2024-10-26 05:42:06,022] Trial 39 finished with value: 0.2244559131421227 and parameters: {'model_name': 'VAE', 'batch_size': 993, 'iterations': 6679, 'learning_rate': 0.00011174493772735178, 'p_miss': 0.2664159160300028}. Best is trial 193 with value: 0.12673567519344062.
[I 2024-10-26 06:10:53,296] Trial 44 finished with value: 0.22884222981958055 and parameters: {'model_name': 'VAE', 'batch_size': 684, 'iterations': 7880, 'learning_rate': 0.00013333407117427013, 'p_miss': 0.08328519325786074}. Best is trial 193 with value: 0.12673567519344062.
[I 2024-10-26 06:16:01,500] Trial 28 finished with value: 0.22916720932336054 and parameters: {'model_name': 'VAE', 'batch_size': 682, 'iterations': 8821, 'learning_rate': 0.0003235770420422622, 'p_miss': 0.16323980216056472}. Best is trial 193 with value: 0.12673567519344062.
[I 2024-10-26 06:17:28,658] Trial 179 finished with value: 0.2173022410383207 and parameters: {'model_name': 'VAE', 'batch_size': 6, 'iterations': 6981, 'learning_rate': 0.0001750544610843264, 'p_miss': 0.2977225604514659}. Best is trial 193 with value: 0.12673567519344062.
[I 2024-10-26 06:19:40,640] Trial 180 finished with value: 0.22651792069958515 and parameters: {'model_name': 'VAE', 'batch_size': 43, 'iterations': 7279, 'learning_rate': 0.00017972096621614813, 'p_miss': 0.2664133777787909}. Best is trial 193 with value: 0.12673567519344062.
[I 2024-10-26 06:20:26,609] Trial 191 finished with value: 0.22270780365902615 and parameters: {'model_name': 'VAE', 'batch_size': 48, 'iterations': 7972, 'learning_rate': 0.0005168204904930511, 'p_miss': 0.17120599796298322}. Best is trial 193 with value: 0.12673567519344062.
[I 2024-10-26 06:21:43,262] Trial 168 finished with value: 0.22820188460016988 and parameters: {'model_name': 'VAE', 'batch_size': 80, 'iterations': 8647, 'learning_rate': 0.00018626910805953867, 'p_miss': 0.1383028941606398}. Best is trial 193 with value: 0.12673567519344062.
[I 2024-10-26 07:17:47,266] Trial 41 finished with value: inf and parameters: {'model_name': 'VAE', 'batch_size': 1, 'iterations': 795, 'learning_rate': 0.00016228316801819554, 'p_miss': 0.2836428832333075}. Best is trial 193 with value: 0.12673567519344062.
fit
auto fit
auto transform
0    0
1    0
2    0
3    0
4    0
5    0
dtype: int64
0    0
1    0
2    0
3    0
4    0
5    0
dtype: int64
0.12673567519344062
{'model_name': 'VAE', 'batch_size': 46, 'iterations': 2, 'learning_rate': 0.0009814896328626786, 'p_miss': 0.16790966741577182}
running experiment 2/3 - Does reconstruction give good automl predictions
Start est fit
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
  0%|          | 0/25 [00:00<?, ?it/s]Generation:   0%|          | 0/25 [00:00<?, ?it/s]Generation:  1
Best f1_score score: 0.5058853118003013
Generation:   4%|▍         | 1/25 [00:11<04:44, 11.87s/it]Generation:  2
Best f1_score score: 0.5094834552191714
Generation:   8%|▊         | 2/25 [00:22<04:11, 10.92s/it]Generation:  3
Best f1_score score: 0.510362879084551
Generation:  12%|█▏        | 3/25 [00:35<04:25, 12.09s/it]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x1554746a11e0> 
 Negative values in data passed to MultinomialNB (input X) 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/naive_bayes.py", line 759, in fit
    self._count(X, Y)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/naive_bayes.py", line 881, in _count
    check_non_negative(X, "MultinomialNB (input X)")
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1689, in check_non_negative
    raise ValueError("Negative values in data passed to %s" % whom)
ValueError: Negative values in data passed to MultinomialNB (input X)

Generation:  4
Best f1_score score: 0.5129378993277545
Generation:  16%|█▌        | 4/25 [00:49<04:30, 12.88s/it]Generation:  5
Best f1_score score: 0.5206734799023973
Generation:  20%|██        | 5/25 [01:15<05:52, 17.62s/it]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155465cdac50> 
 Negative values in data passed to MultinomialNB (input X) 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/naive_bayes.py", line 759, in fit
    self._count(X, Y)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/naive_bayes.py", line 881, in _count
    check_non_negative(X, "MultinomialNB (input X)")
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1689, in check_non_negative
    raise ValueError("Negative values in data passed to %s" % whom)
ValueError: Negative values in data passed to MultinomialNB (input X)

Generation:  6
Best f1_score score: 0.5206734799023973
Generation:  24%|██▍       | 6/25 [01:30<05:19, 16.82s/it]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155467b8d3f0> 
 Negative values in data passed to MultinomialNB (input X) 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/naive_bayes.py", line 759, in fit
    self._count(X, Y)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/naive_bayes.py", line 881, in _count
    check_non_negative(X, "MultinomialNB (input X)")
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1689, in check_non_negative
    raise ValueError("Negative values in data passed to %s" % whom)
ValueError: Negative values in data passed to MultinomialNB (input X)

WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155474736d70> 
 Negative values in data passed to MultinomialNB (input X) 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/naive_bayes.py", line 759, in fit
    self._count(X, Y)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/naive_bayes.py", line 881, in _count
    check_non_negative(X, "MultinomialNB (input X)")
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1689, in check_non_negative
    raise ValueError("Negative values in data passed to %s" % whom)
ValueError: Negative values in data passed to MultinomialNB (input X)

Generation:  7
Best f1_score score: 0.5206734799023973
Generation:  28%|██▊       | 7/25 [02:41<10:19, 34.39s/it]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155467f26920> 
 Negative values in data passed to MultinomialNB (input X) 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/naive_bayes.py", line 759, in fit
    self._count(X, Y)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/naive_bayes.py", line 881, in _count
    check_non_negative(X, "MultinomialNB (input X)")
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1689, in check_non_negative
    raise ValueError("Negative values in data passed to %s" % whom)
ValueError: Negative values in data passed to MultinomialNB (input X)

Generation:  8
Best f1_score score: 0.5206734799023973
Generation:  32%|███▏      | 8/25 [03:17<09:52, 34.87s/it]Generation:  9
Best f1_score score: 0.5206734799023973
Generation:  36%|███▌      | 9/25 [03:47<08:55, 33.44s/it]Generation:  10
Best f1_score score: 0.5206734799023973
Generation:  40%|████      | 10/25 [04:23<08:33, 34.27s/it]Generation:  11
Best f1_score score: 0.5206734799023973
Generation:  44%|████▍     | 11/25 [05:02<08:19, 35.70s/it]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155465bf7220> 
 Negative values in data passed to MultinomialNB (input X) 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/naive_bayes.py", line 759, in fit
    self._count(X, Y)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/naive_bayes.py", line 881, in _count
    check_non_negative(X, "MultinomialNB (input X)")
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1689, in check_non_negative
    raise ValueError("Negative values in data passed to %s" % whom)
ValueError: Negative values in data passed to MultinomialNB (input X)

Generation:  12
Best f1_score score: 0.5206734799023973
Generation:  48%|████▊     | 12/25 [05:32<07:20, 33.91s/it]Generation:  13
Best f1_score score: 0.5206734799023973
Generation:  52%|█████▏    | 13/25 [06:04<06:38, 33.19s/it]Generation:  14
Best f1_score score: 0.5206734799023973
Generation:  56%|█████▌    | 14/25 [06:35<06:00, 32.77s/it]Generation:  15
Best f1_score score: 0.5206734799023973
Generation:  60%|██████    | 15/25 [07:02<05:07, 30.77s/it]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x15546589ba60> 
 Negative values in data passed to MultinomialNB (input X) 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/naive_bayes.py", line 759, in fit
    self._count(X, Y)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/naive_bayes.py", line 881, in _count
    check_non_negative(X, "MultinomialNB (input X)")
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1689, in check_non_negative
    raise ValueError("Negative values in data passed to %s" % whom)
ValueError: Negative values in data passed to MultinomialNB (input X)

Generation:  16
Best f1_score score: 0.5206734799023973
Generation:  64%|██████▍   | 16/25 [07:35<04:44, 31.57s/it]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155465c07430> 
 Negative values in data passed to MultinomialNB (input X) 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/naive_bayes.py", line 759, in fit
    self._count(X, Y)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/naive_bayes.py", line 881, in _count
    check_non_negative(X, "MultinomialNB (input X)")
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1689, in check_non_negative
    raise ValueError("Negative values in data passed to %s" % whom)
ValueError: Negative values in data passed to MultinomialNB (input X)

Generation:  17
Best f1_score score: 0.528223100021691
Generation:  68%|██████▊   | 17/25 [07:57<03:50, 28.81s/it]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x1554652fa3e0> 
 The 'min_samples_split' parameter of DecisionTreeClassifier must be an int in the range [2, inf) or a float in the range (0.0, 1.0]. Got 1 instead. 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1466, in wrapper
    estimator._validate_params()
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 666, in _validate_params
    validate_parameter_constraints(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/_param_validation.py", line 95, in validate_parameter_constraints
    raise InvalidParameterError(
sklearn.utils._param_validation.InvalidParameterError: The 'min_samples_split' parameter of DecisionTreeClassifier must be an int in the range [2, inf) or a float in the range (0.0, 1.0]. Got 1 instead.

Generation:  18
Best f1_score score: 0.528223100021691
Generation:  72%|███████▏  | 18/25 [08:25<03:18, 28.36s/it]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155465365990> 
 Negative values in data passed to MultinomialNB (input X) 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/naive_bayes.py", line 759, in fit
    self._count(X, Y)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/naive_bayes.py", line 881, in _count
    check_non_negative(X, "MultinomialNB (input X)")
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1689, in check_non_negative
    raise ValueError("Negative values in data passed to %s" % whom)
ValueError: Negative values in data passed to MultinomialNB (input X)

Generation:  19
Best f1_score score: 0.528223100021691
Generation:  76%|███████▌  | 19/25 [08:42<02:30, 25.03s/it]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x15546512c8b0> 
 Negative values in data passed to MultinomialNB (input X) 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/naive_bayes.py", line 759, in fit
    self._count(X, Y)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/naive_bayes.py", line 881, in _count
    check_non_negative(X, "MultinomialNB (input X)")
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1689, in check_non_negative
    raise ValueError("Negative values in data passed to %s" % whom)
ValueError: Negative values in data passed to MultinomialNB (input X)

Generation:  20
Best f1_score score: 0.528223100021691
Generation:  80%|████████  | 20/25 [08:57<01:50, 22.12s/it]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x15546521d720> 
 Negative values in data passed to MultinomialNB (input X) 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/naive_bayes.py", line 759, in fit
    self._count(X, Y)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/naive_bayes.py", line 881, in _count
    check_non_negative(X, "MultinomialNB (input X)")
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1689, in check_non_negative
    raise ValueError("Negative values in data passed to %s" % whom)
ValueError: Negative values in data passed to MultinomialNB (input X)

Generation:  21
Best f1_score score: 0.528223100021691
Generation:  84%|████████▍ | 21/25 [09:15<01:23, 20.89s/it]Generation:  22
Best f1_score score: 0.528223100021691
Generation:  88%|████████▊ | 22/25 [09:50<01:15, 25.06s/it]Generation:  23
Best f1_score score: 0.528223100021691
Generation:  92%|█████████▏| 23/25 [10:20<00:53, 26.64s/it]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x1554654c9300> 
 Negative values in data passed to MultinomialNB (input X) 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/naive_bayes.py", line 759, in fit
    self._count(X, Y)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/naive_bayes.py", line 881, in _count
    check_non_negative(X, "MultinomialNB (input X)")
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1689, in check_non_negative
    raise ValueError("Negative values in data passed to %s" % whom)
ValueError: Negative values in data passed to MultinomialNB (input X)

Generation:  24
Best f1_score score: 0.528223100021691
Generation:  96%|█████████▌| 24/25 [10:45<00:26, 26.10s/it]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x15548648b040> 
 Negative values in data passed to MultinomialNB (input X) 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/naive_bayes.py", line 759, in fit
    self._count(X, Y)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/naive_bayes.py", line 881, in _count
    check_non_negative(X, "MultinomialNB (input X)")
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1689, in check_non_negative
    raise ValueError("Negative values in data passed to %s" % whom)
ValueError: Negative values in data passed to MultinomialNB (input X)

WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155465a97e20> 
 Negative values in data passed to MultinomialNB (input X) 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/naive_bayes.py", line 759, in fit
    self._count(X, Y)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/naive_bayes.py", line 881, in _count
    check_non_negative(X, "MultinomialNB (input X)")
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1689, in check_non_negative
    raise ValueError("Negative values in data passed to %s" % whom)
ValueError: Negative values in data passed to MultinomialNB (input X)

Generation:  25
Best f1_score score: 0.528223100021691
Generation: 100%|██████████| 25/25 [11:17<00:00, 27.80s/it]Generation: 100%|██████████| 25/25 [11:26<00:00, 27.46s/it]
2024-10-26 07:29:27,050 - distributed.scheduler - ERROR - Removing worker 'tcp://127.0.0.1:33429' caused the cluster to lose scattered data, which can't be recovered: {'ndarray-f58a8e4d34d8837713e78d020ce8359e', 'ndarray-bc1ee22df90b340c13f4c4b70d48b351'} (stimulus_id='handle-worker-cleanup-1729952967.0506008')
2024-10-26 07:29:31,041 - distributed.nanny - WARNING - Worker process still alive after 4.0 seconds, killing
2024-10-26 07:29:31,041 - distributed.nanny - WARNING - Worker process still alive after 4.0 seconds, killing
2024-10-26 07:29:31,042 - distributed.nanny - WARNING - Worker process still alive after 4.0 seconds, killing
2024-10-26 07:29:31,042 - distributed.nanny - WARNING - Worker process still alive after 4.0 seconds, killing
2024-10-26 07:29:31,042 - distributed.nanny - WARNING - Worker process still alive after 4.0 seconds, killing
2024-10-26 07:29:31,042 - distributed.nanny - WARNING - Worker process still alive after 4.0 seconds, killing
2024-10-26 07:29:31,043 - distributed.nanny - WARNING - Worker process still alive after 4.0 seconds, killing
2024-10-26 07:29:31,043 - distributed.nanny - WARNING - Worker process still alive after 4.0 seconds, killing
2024-10-26 07:29:31,044 - distributed.nanny - WARNING - Worker process still alive after 4.0 seconds, killing
2024-10-26 07:29:31,045 - distributed.nanny - WARNING - Worker process still alive after 4.0 seconds, killing
2024-10-26 07:29:31,046 - distributed.nanny - WARNING - Worker process still alive after 4.0 seconds, killing
2024-10-26 07:29:31,046 - distributed.nanny - WARNING - Worker process still alive after 4.0 seconds, killing
2024-10-26 07:29:31,046 - distributed.nanny - WARNING - Worker process still alive after 4.0 seconds, killing
2024-10-26 07:29:31,046 - distributed.nanny - WARNING - Worker process still alive after 4.0 seconds, killing
2024-10-26 07:29:31,046 - distributed.nanny - WARNING - Worker process still alive after 4.0 seconds, killing
2024-10-26 07:29:31,046 - distributed.nanny - WARNING - Worker process still alive after 4.0 seconds, killing
Fitted
Pipeline(steps=[('lgbmclassifier',
                 LGBMClassifier(boosting_type='goss', max_depth=6,
                                n_estimators=31, n_jobs=1, num_leaves=51,
                                verbose=-1))])
score start
train score: {'auroc': 0.7446745385809307, 'accuracy': 0.670020120724346, 'balanced_accuracy': 0.6699577512962229, 'logloss': 0.621972352273386, 'f1': 0.6699619185583214}
original test score: {'auroc': 0.32544048308379514, 'accuracy': 0.45819935691318325, 'balanced_accuracy': 0.4546281743733973, 'logloss': 0.7648050561989131, 'f1': 0.3697620228806807}
imputed test score: {'auroc': 0.4939821325171644, 'accuracy': 0.5064308681672026, 'balanced_accuracy': 0.5064935064935066, 'logloss': 0.7195812370539626, 'f1': 0.5064295924090746}
score end
check intended
EXP2 Finished
running experiment 3/3 - What is the best automl settings?
<tpot2.search_spaces.pipelines.sequential.SequentialPipeline object at 0x1554350145e0>
Start tpot fit
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
  0%|          | 0/25 [00:00<?, ?it/s]Generation:   0%|          | 0/25 [00:00<?, ?it/s]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155474cd49d0> 
 Negative values in data passed to MultinomialNB (input X) 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/naive_bayes.py", line 759, in fit
    self._count(X, Y)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/naive_bayes.py", line 881, in _count
    check_non_negative(X, "MultinomialNB (input X)")
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1689, in check_non_negative
    raise ValueError("Negative values in data passed to %s" % whom)
ValueError: Negative values in data passed to MultinomialNB (input X)

WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155474cd11b0> 
 Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/neighbors/_classification.py", line 238, in fit
    return self._fit(X, y)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/neighbors/_base.py", line 475, in _fit
    X, y = self._validate_data(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 650, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1301, in check_X_y
    X = check_array(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1064, in check_array
    _assert_all_finite(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 123, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 172, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
KNeighborsClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Generation:  1
Best f1_score score: 0.7281343805725093
Generation:   4%|▍         | 1/25 [07:41<3:04:41, 461.72s/it]Generation:  2
Best f1_score score: 0.7281343805725093
Generation:   8%|▊         | 2/25 [09:45<1:40:41, 262.69s/it]Generation:  3
Best f1_score score: 0.7281343805725093
Generation:  12%|█▏        | 3/25 [11:43<1:12:06, 196.68s/it]Generation:  4
Best f1_score score: 0.7281343805725093
Generation:  16%|█▌        | 4/25 [13:46<58:38, 167.53s/it]  Generation:  5
Best f1_score score: 0.7294914946258604
Generation:  20%|██        | 5/25 [17:29<1:02:31, 187.59s/it]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x15545308d660> 
 Input X contains NaN.
LogisticRegression does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 31, in cross_val_score_objective
    this_fold_scores = [sklearn.metrics.get_scorer(scorer)(this_fold_pipeline, X_test, y_test) for scorer in scorers]
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 31, in <listcomp>
    this_fold_scores = [sklearn.metrics.get_scorer(scorer)(this_fold_pipeline, X_test, y_test) for scorer in scorers]
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/metrics/_scorer.py", line 279, in __call__
    return self._score(partial(_cached_call, None), estimator, X, y_true, **_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/metrics/_scorer.py", line 371, in _score
    y_pred = method_caller(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/metrics/_scorer.py", line 89, in _cached_call
    result, _ = _get_response_values(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/_response.py", line 211, in _get_response_values
    y_pred = prediction_method(X)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 601, in predict
    return self.steps[-1][1].predict(Xt, **params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/linear_model/_base.py", line 382, in predict
    scores = self.decision_function(X)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/linear_model/_base.py", line 363, in decision_function
    X = self._validate_data(X, accept_sparse="csr", reset=False)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 633, in _validate_data
    out = check_array(X, input_name="X", **check_params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1064, in check_array
    _assert_all_finite(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 123, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 172, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
LogisticRegression does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Generation:  6
Best f1_score score: 0.7294914946258604
Generation:  24%|██▍       | 6/25 [19:27<51:56, 164.02s/it]  WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155456516bf0> 
 Input X contains NaN.
LogisticRegression does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 31, in cross_val_score_objective
    this_fold_scores = [sklearn.metrics.get_scorer(scorer)(this_fold_pipeline, X_test, y_test) for scorer in scorers]
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 31, in <listcomp>
    this_fold_scores = [sklearn.metrics.get_scorer(scorer)(this_fold_pipeline, X_test, y_test) for scorer in scorers]
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/metrics/_scorer.py", line 279, in __call__
    return self._score(partial(_cached_call, None), estimator, X, y_true, **_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/metrics/_scorer.py", line 371, in _score
    y_pred = method_caller(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/metrics/_scorer.py", line 89, in _cached_call
    result, _ = _get_response_values(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/_response.py", line 211, in _get_response_values
    y_pred = prediction_method(X)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 601, in predict
    return self.steps[-1][1].predict(Xt, **params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/linear_model/_base.py", line 382, in predict
    scores = self.decision_function(X)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/linear_model/_base.py", line 363, in decision_function
    X = self._validate_data(X, accept_sparse="csr", reset=False)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 633, in _validate_data
    out = check_array(X, input_name="X", **check_params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1064, in check_array
    _assert_all_finite(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 123, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 172, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
LogisticRegression does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Generation:  7
Best f1_score score: 0.7294914946258604
Generation:  28%|██▊       | 7/25 [21:27<44:50, 149.49s/it]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x1554532a5bd0> 
 Input X contains NaN.
LogisticRegression does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 31, in cross_val_score_objective
    this_fold_scores = [sklearn.metrics.get_scorer(scorer)(this_fold_pipeline, X_test, y_test) for scorer in scorers]
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 31, in <listcomp>
    this_fold_scores = [sklearn.metrics.get_scorer(scorer)(this_fold_pipeline, X_test, y_test) for scorer in scorers]
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/metrics/_scorer.py", line 279, in __call__
    return self._score(partial(_cached_call, None), estimator, X, y_true, **_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/metrics/_scorer.py", line 371, in _score
    y_pred = method_caller(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/metrics/_scorer.py", line 89, in _cached_call
    result, _ = _get_response_values(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/_response.py", line 211, in _get_response_values
    y_pred = prediction_method(X)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 601, in predict
    return self.steps[-1][1].predict(Xt, **params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/linear_model/_base.py", line 382, in predict
    scores = self.decision_function(X)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/linear_model/_base.py", line 363, in decision_function
    X = self._validate_data(X, accept_sparse="csr", reset=False)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 633, in _validate_data
    out = check_array(X, input_name="X", **check_params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1064, in check_array
    _assert_all_finite(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 123, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 172, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
LogisticRegression does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Generation:  8
Best f1_score score: 0.7299673627234484
Generation:  32%|███▏      | 8/25 [24:38<46:06, 162.74s/it]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x1554741c7d30> 
 Input X contains NaN.
LogisticRegression does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 31, in cross_val_score_objective
    this_fold_scores = [sklearn.metrics.get_scorer(scorer)(this_fold_pipeline, X_test, y_test) for scorer in scorers]
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 31, in <listcomp>
    this_fold_scores = [sklearn.metrics.get_scorer(scorer)(this_fold_pipeline, X_test, y_test) for scorer in scorers]
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/metrics/_scorer.py", line 279, in __call__
    return self._score(partial(_cached_call, None), estimator, X, y_true, **_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/metrics/_scorer.py", line 371, in _score
    y_pred = method_caller(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/metrics/_scorer.py", line 89, in _cached_call
    result, _ = _get_response_values(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/_response.py", line 211, in _get_response_values
    y_pred = prediction_method(X)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 601, in predict
    return self.steps[-1][1].predict(Xt, **params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/linear_model/_base.py", line 382, in predict
    scores = self.decision_function(X)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/linear_model/_base.py", line 363, in decision_function
    X = self._validate_data(X, accept_sparse="csr", reset=False)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 633, in _validate_data
    out = check_array(X, input_name="X", **check_params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1064, in check_array
    _assert_all_finite(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 123, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 172, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
LogisticRegression does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155452e6e530> 
 Input X contains NaN.
LogisticRegression does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py", line 1223, in fit
    X, y = self._validate_data(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 650, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1301, in check_X_y
    X = check_array(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1064, in check_array
    _assert_all_finite(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 123, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 172, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
LogisticRegression does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Generation:  9
Best f1_score score: 0.7299673627234484
Generation:  36%|███▌      | 9/25 [26:38<39:49, 149.37s/it]Generation:  10
Best f1_score score: 0.7299695224766147
Generation:  40%|████      | 10/25 [28:37<34:59, 139.97s/it]Generation:  11
Best f1_score score: 0.7306663491574764
Generation:  44%|████▍     | 11/25 [30:36<31:10, 133.59s/it]Generation:  12
Best f1_score score: 0.7306663491574764
Generation:  48%|████▊     | 12/25 [32:36<28:03, 129.50s/it]Generation:  13
Best f1_score score: 0.7306663491574764
Generation:  52%|█████▏    | 13/25 [34:38<25:28, 127.37s/it]Generation:  14
Best f1_score score: 0.7306663491574764
Generation:  56%|█████▌    | 14/25 [36:39<22:59, 125.39s/it]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x1554530cc160> 
 The 'min_samples_split' parameter of DecisionTreeClassifier must be an int in the range [2, inf) or a float in the range (0.0, 1.0]. Got 1 instead. 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1466, in wrapper
    estimator._validate_params()
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 666, in _validate_params
    validate_parameter_constraints(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/_param_validation.py", line 95, in validate_parameter_constraints
    raise InvalidParameterError(
sklearn.utils._param_validation.InvalidParameterError: The 'min_samples_split' parameter of DecisionTreeClassifier must be an int in the range [2, inf) or a float in the range (0.0, 1.0]. Got 1 instead.

Generation:  15
Best f1_score score: 0.7306663491574764
Generation:  60%|██████    | 15/25 [38:41<20:42, 124.20s/it]Generation:  16
Best f1_score score: 0.7306663491574764
Generation:  64%|██████▍   | 16/25 [40:37<18:17, 121.91s/it]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x15545fa08670> 
 Input X contains NaN.
LogisticRegression does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 31, in cross_val_score_objective
    this_fold_scores = [sklearn.metrics.get_scorer(scorer)(this_fold_pipeline, X_test, y_test) for scorer in scorers]
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 31, in <listcomp>
    this_fold_scores = [sklearn.metrics.get_scorer(scorer)(this_fold_pipeline, X_test, y_test) for scorer in scorers]
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/metrics/_scorer.py", line 279, in __call__
    return self._score(partial(_cached_call, None), estimator, X, y_true, **_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/metrics/_scorer.py", line 371, in _score
    y_pred = method_caller(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/metrics/_scorer.py", line 89, in _cached_call
    result, _ = _get_response_values(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/_response.py", line 211, in _get_response_values
    y_pred = prediction_method(X)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 601, in predict
    return self.steps[-1][1].predict(Xt, **params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/linear_model/_base.py", line 382, in predict
    scores = self.decision_function(X)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/linear_model/_base.py", line 363, in decision_function
    X = self._validate_data(X, accept_sparse="csr", reset=False)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 633, in _validate_data
    out = check_array(X, input_name="X", **check_params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1064, in check_array
    _assert_all_finite(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 123, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 172, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
LogisticRegression does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155474d3a470> 
 Input X contains NaN.
LogisticRegression does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py", line 1223, in fit
    X, y = self._validate_data(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 650, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1301, in check_X_y
    X = check_array(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1064, in check_array
    _assert_all_finite(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 123, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 172, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
LogisticRegression does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Generation:  17
Best f1_score score: 0.7306663491574764
Generation:  68%|██████▊   | 17/25 [42:37<16:10, 121.31s/it]Generation:  18
Best f1_score score: 0.7306663491574764
Generation:  72%|███████▏  | 18/25 [44:36<14:04, 120.67s/it]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x15545fa65d50> 
 Input X contains NaN.
LogisticRegression does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 31, in cross_val_score_objective
    this_fold_scores = [sklearn.metrics.get_scorer(scorer)(this_fold_pipeline, X_test, y_test) for scorer in scorers]
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 31, in <listcomp>
    this_fold_scores = [sklearn.metrics.get_scorer(scorer)(this_fold_pipeline, X_test, y_test) for scorer in scorers]
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/metrics/_scorer.py", line 279, in __call__
    return self._score(partial(_cached_call, None), estimator, X, y_true, **_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/metrics/_scorer.py", line 371, in _score
    y_pred = method_caller(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/metrics/_scorer.py", line 89, in _cached_call
    result, _ = _get_response_values(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/_response.py", line 211, in _get_response_values
    y_pred = prediction_method(X)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 601, in predict
    return self.steps[-1][1].predict(Xt, **params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/linear_model/_base.py", line 382, in predict
    scores = self.decision_function(X)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/linear_model/_base.py", line 363, in decision_function
    X = self._validate_data(X, accept_sparse="csr", reset=False)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 633, in _validate_data
    out = check_array(X, input_name="X", **check_params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1064, in check_array
    _assert_all_finite(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 123, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 172, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
LogisticRegression does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x15544d19bee0> 
 Input X contains NaN.
LinearDiscriminantAnalysis does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 31, in cross_val_score_objective
    this_fold_scores = [sklearn.metrics.get_scorer(scorer)(this_fold_pipeline, X_test, y_test) for scorer in scorers]
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 31, in <listcomp>
    this_fold_scores = [sklearn.metrics.get_scorer(scorer)(this_fold_pipeline, X_test, y_test) for scorer in scorers]
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/metrics/_scorer.py", line 279, in __call__
    return self._score(partial(_cached_call, None), estimator, X, y_true, **_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/metrics/_scorer.py", line 371, in _score
    y_pred = method_caller(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/metrics/_scorer.py", line 89, in _cached_call
    result, _ = _get_response_values(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/_response.py", line 211, in _get_response_values
    y_pred = prediction_method(X)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 601, in predict
    return self.steps[-1][1].predict(Xt, **params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/linear_model/_base.py", line 382, in predict
    scores = self.decision_function(X)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/discriminant_analysis.py", line 760, in decision_function
    return super().decision_function(X)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/linear_model/_base.py", line 363, in decision_function
    X = self._validate_data(X, accept_sparse="csr", reset=False)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 633, in _validate_data
    out = check_array(X, input_name="X", **check_params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1064, in check_array
    _assert_all_finite(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 123, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 172, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
LinearDiscriminantAnalysis does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Generation:  19
Best f1_score score: 0.7306663491574764
Generation:  76%|███████▌  | 19/25 [46:34<11:58, 119.83s/it]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155452762710> 
 Input X contains NaN.
LinearDiscriminantAnalysis does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 31, in cross_val_score_objective
    this_fold_scores = [sklearn.metrics.get_scorer(scorer)(this_fold_pipeline, X_test, y_test) for scorer in scorers]
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 31, in <listcomp>
    this_fold_scores = [sklearn.metrics.get_scorer(scorer)(this_fold_pipeline, X_test, y_test) for scorer in scorers]
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/metrics/_scorer.py", line 279, in __call__
    return self._score(partial(_cached_call, None), estimator, X, y_true, **_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/metrics/_scorer.py", line 371, in _score
    y_pred = method_caller(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/metrics/_scorer.py", line 89, in _cached_call
    result, _ = _get_response_values(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/_response.py", line 211, in _get_response_values
    y_pred = prediction_method(X)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 601, in predict
    return self.steps[-1][1].predict(Xt, **params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/linear_model/_base.py", line 382, in predict
    scores = self.decision_function(X)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/discriminant_analysis.py", line 760, in decision_function
    return super().decision_function(X)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/linear_model/_base.py", line 363, in decision_function
    X = self._validate_data(X, accept_sparse="csr", reset=False)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 633, in _validate_data
    out = check_array(X, input_name="X", **check_params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1064, in check_array
    _assert_all_finite(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 123, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 172, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
LinearDiscriminantAnalysis does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Generation:  20
Best f1_score score: 0.7306663491574764
Generation:  80%|████████  | 20/25 [48:35<10:00, 120.04s/it]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155452716410> 
 Input X contains NaN.
LinearDiscriminantAnalysis does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/discriminant_analysis.py", line 589, in fit
    X, y = self._validate_data(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 650, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1301, in check_X_y
    X = check_array(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1064, in check_array
    _assert_all_finite(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 123, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 172, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
LinearDiscriminantAnalysis does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155474592fb0> 
 Input X contains NaN.
LinearDiscriminantAnalysis does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 31, in cross_val_score_objective
    this_fold_scores = [sklearn.metrics.get_scorer(scorer)(this_fold_pipeline, X_test, y_test) for scorer in scorers]
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 31, in <listcomp>
    this_fold_scores = [sklearn.metrics.get_scorer(scorer)(this_fold_pipeline, X_test, y_test) for scorer in scorers]
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/metrics/_scorer.py", line 279, in __call__
    return self._score(partial(_cached_call, None), estimator, X, y_true, **_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/metrics/_scorer.py", line 371, in _score
    y_pred = method_caller(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/metrics/_scorer.py", line 89, in _cached_call
    result, _ = _get_response_values(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/_response.py", line 211, in _get_response_values
    y_pred = prediction_method(X)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 601, in predict
    return self.steps[-1][1].predict(Xt, **params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/linear_model/_base.py", line 382, in predict
    scores = self.decision_function(X)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/discriminant_analysis.py", line 760, in decision_function
    return super().decision_function(X)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/linear_model/_base.py", line 363, in decision_function
    X = self._validate_data(X, accept_sparse="csr", reset=False)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 633, in _validate_data
    out = check_array(X, input_name="X", **check_params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1064, in check_array
    _assert_all_finite(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 123, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 172, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
LinearDiscriminantAnalysis does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

WARNING AN INDIVIDUAL TIMED OUT: 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x1554745c8640> 

Generation:  21
Best f1_score score: 0.7308628424231446
Generation:  84%|████████▍ | 21/25 [58:41<17:44, 266.12s/it]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x15545e53f340> 
 Input X contains NaN.
LinearDiscriminantAnalysis does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 31, in cross_val_score_objective
    this_fold_scores = [sklearn.metrics.get_scorer(scorer)(this_fold_pipeline, X_test, y_test) for scorer in scorers]
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 31, in <listcomp>
    this_fold_scores = [sklearn.metrics.get_scorer(scorer)(this_fold_pipeline, X_test, y_test) for scorer in scorers]
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/metrics/_scorer.py", line 279, in __call__
    return self._score(partial(_cached_call, None), estimator, X, y_true, **_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/metrics/_scorer.py", line 371, in _score
    y_pred = method_caller(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/metrics/_scorer.py", line 89, in _cached_call
    result, _ = _get_response_values(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/_response.py", line 211, in _get_response_values
    y_pred = prediction_method(X)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 601, in predict
    return self.steps[-1][1].predict(Xt, **params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/linear_model/_base.py", line 382, in predict
    scores = self.decision_function(X)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/discriminant_analysis.py", line 760, in decision_function
    return super().decision_function(X)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/linear_model/_base.py", line 363, in decision_function
    X = self._validate_data(X, accept_sparse="csr", reset=False)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 633, in _validate_data
    out = check_array(X, input_name="X", **check_params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1064, in check_array
    _assert_all_finite(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 123, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 172, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
LinearDiscriminantAnalysis does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Generation:  22
Best f1_score score: 0.7308628424231446
Generation:  88%|████████▊ | 22/25 [1:00:43<11:08, 222.75s/it]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x1554575970a0> 
 Input X contains NaN.
LinearDiscriminantAnalysis does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/discriminant_analysis.py", line 589, in fit
    X, y = self._validate_data(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 650, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1301, in check_X_y
    X = check_array(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1064, in check_array
    _assert_all_finite(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 123, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 172, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
LinearDiscriminantAnalysis does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x15543ed7a200> 
 Input X contains NaN.
LinearDiscriminantAnalysis does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/discriminant_analysis.py", line 589, in fit
    X, y = self._validate_data(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 650, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1301, in check_X_y
    X = check_array(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1064, in check_array
    _assert_all_finite(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 123, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 172, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
LinearDiscriminantAnalysis does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Generation:  23
Best f1_score score: 0.7308628424231446
Generation:  92%|█████████▏| 23/25 [1:02:42<06:23, 191.72s/it]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x1554530b0430> 
 Input X contains NaN.
LinearDiscriminantAnalysis does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 31, in cross_val_score_objective
    this_fold_scores = [sklearn.metrics.get_scorer(scorer)(this_fold_pipeline, X_test, y_test) for scorer in scorers]
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 31, in <listcomp>
    this_fold_scores = [sklearn.metrics.get_scorer(scorer)(this_fold_pipeline, X_test, y_test) for scorer in scorers]
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/metrics/_scorer.py", line 279, in __call__
    return self._score(partial(_cached_call, None), estimator, X, y_true, **_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/metrics/_scorer.py", line 371, in _score
    y_pred = method_caller(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/metrics/_scorer.py", line 89, in _cached_call
    result, _ = _get_response_values(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/_response.py", line 211, in _get_response_values
    y_pred = prediction_method(X)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 601, in predict
    return self.steps[-1][1].predict(Xt, **params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/linear_model/_base.py", line 382, in predict
    scores = self.decision_function(X)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/discriminant_analysis.py", line 760, in decision_function
    return super().decision_function(X)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/linear_model/_base.py", line 363, in decision_function
    X = self._validate_data(X, accept_sparse="csr", reset=False)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 633, in _validate_data
    out = check_array(X, input_name="X", **check_params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1064, in check_array
    _assert_all_finite(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 123, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 172, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
LinearDiscriminantAnalysis does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x1554743a2c20> 
 Input X contains NaN.
LinearDiscriminantAnalysis does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 31, in cross_val_score_objective
    this_fold_scores = [sklearn.metrics.get_scorer(scorer)(this_fold_pipeline, X_test, y_test) for scorer in scorers]
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 31, in <listcomp>
    this_fold_scores = [sklearn.metrics.get_scorer(scorer)(this_fold_pipeline, X_test, y_test) for scorer in scorers]
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/metrics/_scorer.py", line 279, in __call__
    return self._score(partial(_cached_call, None), estimator, X, y_true, **_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/metrics/_scorer.py", line 371, in _score
    y_pred = method_caller(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/metrics/_scorer.py", line 89, in _cached_call
    result, _ = _get_response_values(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/_response.py", line 211, in _get_response_values
    y_pred = prediction_method(X)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 601, in predict
    return self.steps[-1][1].predict(Xt, **params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/linear_model/_base.py", line 382, in predict
    scores = self.decision_function(X)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/discriminant_analysis.py", line 760, in decision_function
    return super().decision_function(X)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/linear_model/_base.py", line 363, in decision_function
    X = self._validate_data(X, accept_sparse="csr", reset=False)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 633, in _validate_data
    out = check_array(X, input_name="X", **check_params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1064, in check_array
    _assert_all_finite(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 123, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 172, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
LinearDiscriminantAnalysis does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x15545bf88910> 
 Input X contains NaN.
LinearDiscriminantAnalysis does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 31, in cross_val_score_objective
    this_fold_scores = [sklearn.metrics.get_scorer(scorer)(this_fold_pipeline, X_test, y_test) for scorer in scorers]
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 31, in <listcomp>
    this_fold_scores = [sklearn.metrics.get_scorer(scorer)(this_fold_pipeline, X_test, y_test) for scorer in scorers]
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/metrics/_scorer.py", line 279, in __call__
    return self._score(partial(_cached_call, None), estimator, X, y_true, **_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/metrics/_scorer.py", line 371, in _score
    y_pred = method_caller(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/metrics/_scorer.py", line 89, in _cached_call
    result, _ = _get_response_values(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/_response.py", line 211, in _get_response_values
    y_pred = prediction_method(X)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 601, in predict
    return self.steps[-1][1].predict(Xt, **params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/linear_model/_base.py", line 382, in predict
    scores = self.decision_function(X)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/discriminant_analysis.py", line 760, in decision_function
    return super().decision_function(X)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/linear_model/_base.py", line 363, in decision_function
    X = self._validate_data(X, accept_sparse="csr", reset=False)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 633, in _validate_data
    out = check_array(X, input_name="X", **check_params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1064, in check_array
    _assert_all_finite(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 123, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 172, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
LinearDiscriminantAnalysis does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Generation:  24
Best f1_score score: 0.7308628424231446
Generation:  96%|█████████▌| 24/25 [1:04:41<02:49, 169.87s/it]Generation:  25
Best f1_score score: 0.7308628424231446
Generation: 100%|██████████| 25/25 [1:06:41<00:00, 154.76s/it]Generation: 100%|██████████| 25/25 [1:06:41<00:00, 160.05s/it]
2024-10-26 08:36:47,963 - distributed.scheduler - ERROR - Removing worker 'tcp://127.0.0.1:39759' caused the cluster to lose scattered data, which can't be recovered: {'DataFrame-131390693118f6dc645a71419717ef34', 'ndarray-bc1ee22df90b340c13f4c4b70d48b351'} (stimulus_id='handle-worker-cleanup-1729957007.963749')
2024-10-26 08:36:51,894 - distributed.nanny - WARNING - Worker process still alive after 4.0 seconds, killing
2024-10-26 08:36:51,894 - distributed.nanny - WARNING - Worker process still alive after 4.0 seconds, killing
2024-10-26 08:36:51,894 - distributed.nanny - WARNING - Worker process still alive after 4.0 seconds, killing
2024-10-26 08:36:51,894 - distributed.nanny - WARNING - Worker process still alive after 4.0 seconds, killing
2024-10-26 08:36:51,896 - distributed.nanny - WARNING - Worker process still alive after 4.0 seconds, killing
2024-10-26 08:36:51,896 - distributed.nanny - WARNING - Worker process still alive after 4.0 seconds, killing
2024-10-26 08:36:51,896 - distributed.nanny - WARNING - Worker process still alive after 4.0 seconds, killing
2024-10-26 08:36:51,898 - distributed.nanny - WARNING - Worker process still alive after 4.0 seconds, killing
2024-10-26 08:36:51,898 - distributed.nanny - WARNING - Worker process still alive after 4.0 seconds, killing
2024-10-26 08:36:51,898 - distributed.nanny - WARNING - Worker process still alive after 4.0 seconds, killing
2024-10-26 08:36:51,899 - distributed.nanny - WARNING - Worker process still alive after 4.0 seconds, killing
2024-10-26 08:36:51,900 - distributed.nanny - WARNING - Worker process still alive after 4.0 seconds, killing
2024-10-26 08:36:51,900 - distributed.nanny - WARNING - Worker process still alive after 4.0 seconds, killing
2024-10-26 08:36:51,903 - distributed.nanny - WARNING - Worker process still alive after 4.0 seconds, killing
2024-10-26 08:36:51,903 - distributed.nanny - WARNING - Worker process still alive after 4.0 seconds, killing
2024-10-26 08:36:51,903 - distributed.nanny - WARNING - Worker process still alive after 4.0 seconds, killing
Fitted
Pipeline(steps=[('iterativeimputer',
                 IterativeImputer(estimator=RandomForestRegressor(),
                                  imputation_order='random',
                                  initial_strategy='constant',
                                  n_nearest_features=48)),
                ('lineardiscriminantanalysis', LinearDiscriminantAnalysis())])
transform worked
try transform
transform worked
score start
train score: {'auroc': 0.7755539231309385, 'accuracy': 0.7287726358148894, 'balanced_accuracy': 0.7282644605613986, 'logloss': 0.5744502013693381, 'f1': 0.727357995462939}
test score: {'auroc': 0.8043676069153776, 'accuracy': 0.7347266881028939, 'balanced_accuracy': 0.7340971130780047, 'logloss': 0.5374498934515879, 'f1': 0.7333309082027444}
original test score: {'auroc': 0.8999503681032343, 'accuracy': 0.8295819935691319, 'balanced_accuracy': 0.8290387955993052, 'logloss': 0.43623017989676105, 'f1': 0.828874284943055}
score end
737
lvl
0.5
type
MCAR
num_run
2
class_full
finished
all finished
full run takes
9.276195350488027
hours
DONE
