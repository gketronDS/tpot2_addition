Run: 2
/cm/local/apps/slurm/var/spool/job1011611/slurm_script: line 26: 
pip install -e tpot2
pip install -r tpot2/ImputerExperiments/requirements_.txt
: No such file or directory
RunStart
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
starting loops
../data/c/725/725.pkl
          a1cx      a1cy       b2x       b2y     a2pop      a3pop      temp  \
0    -0.102111 -0.193977 -0.385334  0.257042  7.188886  15.128160  0.671618   
1     0.373578 -0.425602  0.289500  0.234217  2.028584   2.856180  0.569577   
2     0.385361  0.108340 -0.048971 -0.147634  4.073232   3.616225  0.126882   
3     0.316211 -0.134321  0.080048  0.036333  0.360257   1.069743  0.807717   
4     0.007116  0.295712  0.007483 -0.456627  0.072030   0.968635  0.188453   
...        ...       ...       ...       ...       ...        ...       ...   
8187  0.245639 -0.293471  0.309908 -0.245607  1.952971   4.179991  0.293681   
8188  0.349099  0.081337 -0.051716 -0.173486  2.480138  23.766096  0.471465   
8189  0.042387  0.224919 -0.103630  0.406960  0.586521   2.438944  0.592006   
8190 -0.307960  0.319882 -0.273656  0.327141  1.214616   0.249459  0.363759   
8191  0.237322 -0.105772 -0.119344  0.183375  1.177541   1.858192  0.562540   

      mxql  
0        8  
1        5  
2        6  
3        8  
4        7  
...    ...  
8187     8  
8188     7  
8189     6  
8190     5  
8191     7  

[8192 rows x 8 columns]
<class 'pandas.core.frame.DataFrame'>
          a1cx      a1cy       b2x       b2y     a2pop     a3pop      temp  \
7094 -0.010574  0.050377  0.391177  0.475114  2.226879  0.955785  0.750939   
4487  0.300199 -0.202658 -0.055147  0.002555  7.083688  1.809555  0.488854   
1692 -0.296144 -0.352622 -0.356833  0.261217  2.107543  3.231294  0.650478   
3982  0.282158 -0.194823  0.073848  0.338039  1.104935  1.612479  0.748309   
7250  0.447576  0.307982 -0.181197  0.170541  1.445238  2.924152  0.545519   
...        ...       ...       ...       ...       ...       ...       ...   
408  -0.435150  0.191326  0.071933  0.067130  1.942407  1.750298  0.606787   
1280  0.405790  0.323990 -0.404095 -0.472949  2.328723  0.201641  0.498202   
900   0.498521 -0.137201  0.091599  0.019980  0.577879  6.183767  0.852558   
4379 -0.493182  0.446614  0.363133 -0.257181  9.136542  5.232222  0.463646   
5902  0.307598  0.178132  0.423481 -0.483123  6.843211  0.230573  0.780260   

      mxql  
7094     5  
4487     7  
1692     8  
3982     8  
7250     7  
...    ...  
408      8  
1280     7  
900      5  
4379     5  
5902     7  

[6553 rows x 8 columns]
<class 'pandas.core.frame.DataFrame'>
             0         1         2         3         4         5         6  \
0     0.489465  0.550497  0.891181  0.975461  0.074956  0.032161  0.754157   
1     0.800264  0.297393  0.444662  0.502578  0.238439  0.060927  0.476769   
2     0.203872  0.147388  0.142844  0.761418  0.070939  0.108830  0.647830   
3     0.782221  0.305230  0.573713  0.838292  0.037191  0.054287  0.751374   
4     0.947653  0.808173  0.318557  0.670679  0.048646  0.098481  0.536743   
...        ...       ...       ...       ...       ...       ...       ...   
6548  0.064854  0.691485  0.571797  0.567198  0.065381  0.058931  0.601588   
6549  0.905863  0.824186  0.095561  0.026748  0.078384  0.006752  0.486663   
6550  0.998602  0.362868  0.591472  0.520015  0.019450  0.208307  0.861710   
6551  0.006818  0.946843  0.863125  0.242664  0.307540  0.176247  0.450089   
6552  0.807663  0.678288  0.923499  0.016567  0.230345  0.007727  0.785190   

             7  
0     0.000000  
1     0.666667  
2     1.000000  
3     1.000000  
4     0.666667  
...        ...  
6548  1.000000  
6549  0.666667  
6550  0.000000  
6551  0.000000  
6552  0.666667  

[6553 rows x 8 columns]
<class 'numpy.ndarray'>
             0         1         2         3         4         5         6  \
0     0.806885  0.980702  0.453991  0.613596  0.020773  0.077417  0.746311   
1     0.804453  0.156650  0.442842  0.450180  0.067616  0.040940  0.887064   
2     0.342680  0.540493  0.854956  0.133422  0.061289  0.083159  0.763520   
3     0.649332  0.935345  0.102999  0.356157  0.010412  0.143710  0.768866   
4     0.376587  0.211120  0.602705  0.232790  0.109388  0.058531  0.599113   
...        ...       ...       ...       ...       ...       ...       ...   
1634  0.016935  0.802398  0.807005  0.749703  0.036414  0.093289  0.739269   
1635  0.039545  0.723532  0.497344  0.320949  0.068180  0.009092  0.797361   
1636  0.607867  0.059936  0.004684  0.759596  0.087485  0.194915  0.502947   
1637  0.017563  0.041775  0.312758  0.234025  0.257072  0.001474  0.483924   
1638  0.144504  0.550587  0.922963  0.787603  0.025525  0.016671  0.888907   

             7  
0     1.000000  
1     1.000000  
2     0.000000  
3     0.333333  
4     0.666667  
...        ...  
1634  1.000000  
1635  0.000000  
1636  1.000000  
1637  1.000000  
1638  0.000000  

[1639 rows x 8 columns]
<class 'numpy.ndarray'>
working on 
../data/c/725/class_full_MCAR_0.1_1
4.928647041320801
running experiment 1/3 - Does large hyperparameter space improve reconstruction accuracy over simple
[I 2024-10-23 11:58:09,277] A new study created in memory with name: no-name-095c82a1-148a-4c6d-ad9e-b6281ea30757
running
running
running
running
running
running
running
running
running
running
running
running
running
running
running
running
[I 2024-10-23 11:58:09,433] Trial 5 finished with value: 0.4957157837515906 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'constant'}. Best is trial 5 with value: 0.4957157837515906.
running
[I 2024-10-23 11:58:09,687] Trial 0 finished with value: 0.4957157837515906 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'constant'}. Best is trial 5 with value: 0.4957157837515906.
[I 2024-10-23 11:58:09,807] Trial 14 finished with value: 0.4957157837515906 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'constant'}. Best is trial 5 with value: 0.4957157837515906.
running
running
[I 2024-10-23 11:58:10,059] Trial 10 finished with value: 0.2560154324342349 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 10 with value: 0.2560154324342349.
running
[I 2024-10-23 11:58:10,205] Trial 9 finished with value: 0.2560154324342349 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 10 with value: 0.2560154324342349.
running
[I 2024-10-23 11:58:10,464] Trial 7 finished with value: 0.4957157837515906 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'most_frequent'}. Best is trial 10 with value: 0.2560154324342349.
running
[I 2024-10-23 11:58:10,646] Trial 12 finished with value: 0.4957157837515906 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'most_frequent'}. Best is trial 10 with value: 0.2560154324342349.
running
[I 2024-10-23 11:58:10,785] Trial 18 finished with value: 0.4957157837515906 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'most_frequent'}. Best is trial 10 with value: 0.2560154324342349.
running
[I 2024-10-23 11:58:12,841] Trial 16 finished with value: 0.25077894133780304 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 248, 'weights': 'distance'}. Best is trial 16 with value: 0.25077894133780304.
running
[I 2024-10-23 11:58:13,239] Trial 11 finished with value: 0.2503340862841282 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Ridge', 'initial_strategy': 'most_frequent', 'n_nearest_features': 8, 'imputation_order': 'random'}. Best is trial 11 with value: 0.2503340862841282.
running
[I 2024-10-23 11:58:13,455] Trial 3 finished with value: 0.2502686192833879 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3405, 'weights': 'uniform'}. Best is trial 3 with value: 0.2502686192833879.
running
[I 2024-10-23 11:58:13,757] Trial 20 finished with value: 0.25031529958427057 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 1891, 'weights': 'uniform'}. Best is trial 3 with value: 0.2502686192833879.
running
[I 2024-10-23 11:58:14,461] Trial 4 finished with value: 0.2503536583237373 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Ridge', 'initial_strategy': 'constant', 'n_nearest_features': 1, 'imputation_order': 'random'}. Best is trial 3 with value: 0.2502686192833879.
running
[I 2024-10-23 11:58:15,543] Trial 26 finished with value: 0.2503340862841282 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Ridge', 'initial_strategy': 'most_frequent', 'n_nearest_features': 8, 'imputation_order': 'random'}. Best is trial 3 with value: 0.2502686192833879.
running
[I 2024-10-23 11:58:16,043] Trial 25 finished with value: 0.2503340862841282 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Ridge', 'initial_strategy': 'most_frequent', 'n_nearest_features': 8, 'imputation_order': 'random'}. Best is trial 3 with value: 0.2502686192833879.
running
[I 2024-10-23 11:58:17,822] Trial 8 finished with value: 0.48531826195121985 and parameters: {'model_name': 'GAIN', 'batch_size': 66, 'hint_rate': 0.7191313182745654, 'alpha': 50, 'iterations': 2, 'learning_rate': 0.00010635632472763174, 'p_miss': 0.03519937803530322}. Best is trial 3 with value: 0.2502686192833879.
running
[I 2024-10-23 11:58:18,142] Trial 13 finished with value: 0.25036518652763196 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Ridge', 'initial_strategy': 'constant', 'n_nearest_features': 6, 'imputation_order': 'ascending'}. Best is trial 3 with value: 0.2502686192833879.
running
[I 2024-10-23 11:58:18,381] Trial 27 finished with value: 0.2502729772225381 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3325, 'weights': 'uniform'}. Best is trial 3 with value: 0.2502686192833879.
running
[I 2024-10-23 11:58:18,870] Trial 22 finished with value: 0.46432245855759835 and parameters: {'model_name': 'GAIN', 'batch_size': 9, 'hint_rate': 0.9055855074061006, 'alpha': 66, 'iterations': 4, 'learning_rate': 0.0006636040262209733, 'p_miss': 0.24557456888628942}. Best is trial 3 with value: 0.2502686192833879.
running
[I 2024-10-23 11:58:19,123] Trial 28 finished with value: 0.25027212392051046 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3388, 'weights': 'uniform'}. Best is trial 3 with value: 0.2502686192833879.
running
[I 2024-10-23 11:58:19,768] Trial 24 finished with value: 0.46686940927590265 and parameters: {'model_name': 'GAIN', 'batch_size': 785, 'hint_rate': 0.43851496931914963, 'alpha': 24, 'iterations': 4, 'learning_rate': 0.061069486281668015, 'p_miss': 0.2514187288002137}. Best is trial 3 with value: 0.2502686192833879.
running
[I 2024-10-23 11:58:20,081] Trial 29 finished with value: 0.25027343256185586 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3338, 'weights': 'uniform'}. Best is trial 3 with value: 0.2502686192833879.
running
[I 2024-10-23 11:58:21,333] Trial 30 finished with value: 0.25026613766464095 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3414, 'weights': 'uniform'}. Best is trial 30 with value: 0.25026613766464095.
running
[I 2024-10-23 11:58:23,499] Trial 31 finished with value: 0.2502659039532192 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3398, 'weights': 'uniform'}. Best is trial 31 with value: 0.2502659039532192.
running
[I 2024-10-23 11:58:23,736] Trial 32 finished with value: 0.25026351055136487 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3281, 'weights': 'uniform'}. Best is trial 32 with value: 0.25026351055136487.
running
[I 2024-10-23 11:58:24,176] Trial 34 finished with value: 0.2502903700184861 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 4782, 'weights': 'uniform'}. Best is trial 32 with value: 0.25026351055136487.
running
[I 2024-10-23 11:58:24,317] Trial 17 finished with value: 0.3149205018480593 and parameters: {'model_name': 'VAE', 'batch_size': 1, 'iterations': 7, 'learning_rate': 0.00031528612966667395, 'p_miss': 0.12966144981469271}. Best is trial 32 with value: 0.25026351055136487.
running
[I 2024-10-23 11:58:25,187] Trial 36 finished with value: 0.2502391583838514 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 4152, 'weights': 'uniform'}. Best is trial 36 with value: 0.2502391583838514.
running
[I 2024-10-23 11:58:25,746] Trial 37 finished with value: 0.2502680821419121 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 4332, 'weights': 'uniform'}. Best is trial 36 with value: 0.2502391583838514.
running
[I 2024-10-23 11:58:29,635] Trial 21 finished with value: 0.3125125903847904 and parameters: {'model_name': 'VAE', 'batch_size': 355, 'iterations': 5, 'learning_rate': 0.0014695072143107103, 'p_miss': 0.2876897963467471}. Best is trial 36 with value: 0.2502391583838514.
running
[I 2024-10-23 11:58:34,390] Trial 45 finished with value: 0.25027339528028003 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 6109, 'weights': 'distance'}. Best is trial 36 with value: 0.2502391583838514.
running
[I 2024-10-23 11:58:38,494] Trial 46 finished with value: 0.2503122716890764 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 1886, 'weights': 'uniform'}. Best is trial 36 with value: 0.2502391583838514.
running
[I 2024-10-23 11:58:42,917] Trial 47 finished with value: 0.2502799371225094 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 4652, 'weights': 'uniform'}. Best is trial 36 with value: 0.2502391583838514.
running
[I 2024-10-23 11:58:46,798] Trial 48 finished with value: 0.25026261421439083 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 2248, 'weights': 'uniform'}. Best is trial 36 with value: 0.2502391583838514.
running
[I 2024-10-23 11:58:48,410] Trial 19 finished with value: 0.37111603533853404 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Bayesian', 'initial_strategy': 'median', 'n_nearest_features': 3, 'imputation_order': 'roman', 'sample_posterior': True}. Best is trial 36 with value: 0.2502391583838514.
running
[I 2024-10-23 11:58:49,118] Trial 15 finished with value: 0.4733712718911045 and parameters: {'model_name': 'GAIN', 'batch_size': 972, 'hint_rate': 0.6929667048408354, 'alpha': 71, 'iterations': 48, 'learning_rate': 0.00386409839147733, 'p_miss': 0.15922432295522898}. Best is trial 36 with value: 0.2502391583838514.
running
[I 2024-10-23 11:58:52,082] Trial 49 finished with value: 0.2502646737471295 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 2041, 'weights': 'uniform'}. Best is trial 36 with value: 0.2502391583838514.
running
[I 2024-10-23 11:58:53,236] Trial 50 finished with value: 0.250290391327875 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 2127, 'weights': 'uniform'}. Best is trial 36 with value: 0.2502391583838514.
running
[I 2024-10-23 11:58:53,745] Trial 51 finished with value: 0.2502920245849926 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 2165, 'weights': 'uniform'}. Best is trial 36 with value: 0.2502391583838514.
running
[I 2024-10-23 11:58:57,232] Trial 52 finished with value: 0.2502934987907592 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 1931, 'weights': 'uniform'}. Best is trial 36 with value: 0.2502391583838514.
running
[I 2024-10-23 11:59:01,836] Trial 55 finished with value: 0.250398278539887 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 919, 'weights': 'distance'}. Best is trial 36 with value: 0.2502391583838514.
running
[I 2024-10-23 12:03:50,863] Trial 2 finished with value: 0.3225148302754068 and parameters: {'model_name': 'VAE', 'batch_size': 1, 'iterations': 151, 'learning_rate': 0.013074800120053387, 'p_miss': 0.28964441687829034}. Best is trial 36 with value: 0.2502391583838514.
running
[I 2024-10-23 12:03:55,873] Trial 57 finished with value: 0.2502813801748106 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 2753, 'weights': 'uniform'}. Best is trial 36 with value: 0.2502391583838514.
running
[I 2024-10-23 12:06:56,786] Trial 23 finished with value: 0.3155530962275504 and parameters: {'model_name': 'VAE', 'batch_size': 1, 'iterations': 218, 'learning_rate': 0.0001467907708605367, 'p_miss': 0.2768003580321118}. Best is trial 36 with value: 0.2502391583838514.
running
[I 2024-10-23 12:07:01,540] Trial 59 finished with value: 0.25028050483431497 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 2660, 'weights': 'uniform'}. Best is trial 36 with value: 0.2502391583838514.
running
[I 2024-10-23 12:07:07,401] Trial 60 finished with value: 0.25023346971785043 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 4089, 'weights': 'uniform'}. Best is trial 60 with value: 0.25023346971785043.
running
[I 2024-10-23 12:07:12,120] Trial 61 finished with value: 0.25023712496719364 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 4120, 'weights': 'uniform'}. Best is trial 60 with value: 0.25023346971785043.
running
[I 2024-10-23 12:07:17,197] Trial 62 finished with value: 0.2502632263948342 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 4234, 'weights': 'uniform'}. Best is trial 60 with value: 0.25023346971785043.
running
[I 2024-10-23 12:39:19,268] Trial 6 finished with value: 0.25463085355879234 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'median', 'n_nearest_features': 7, 'imputation_order': 'ascending'}. Best is trial 60 with value: 0.25023346971785043.
running
[I 2024-10-23 12:52:50,697] Trial 1 finished with value: 0.2565869788861265 and parameters: {'model_name': 'VAE', 'batch_size': 64, 'iterations': 1253, 'learning_rate': 0.026794710879839156, 'p_miss': 0.11498475550026242}. Best is trial 60 with value: 0.25023346971785043.
running
[I 2024-10-23 12:52:57,396] Trial 65 finished with value: 0.2502410962171706 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 4116, 'weights': 'distance'}. Best is trial 60 with value: 0.25023346971785043.
running
[I 2024-10-23 12:53:05,031] Trial 66 finished with value: 0.2502516798102129 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 4182, 'weights': 'distance'}. Best is trial 60 with value: 0.25023346971785043.
running
[I 2024-10-23 12:53:11,587] Trial 67 finished with value: 0.25024073414641396 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 4084, 'weights': 'distance'}. Best is trial 60 with value: 0.25023346971785043.
running
[I 2024-10-23 12:53:18,640] Trial 68 finished with value: 0.250237378828792 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 4090, 'weights': 'distance'}. Best is trial 60 with value: 0.25023346971785043.
running
[I 2024-10-23 13:36:53,266] Trial 56 finished with value: 0.30279413275676614 and parameters: {'model_name': 'VAE', 'batch_size': 1, 'iterations': 2105, 'learning_rate': 0.07737499678566899, 'p_miss': 0.017424983430022883}. Best is trial 60 with value: 0.25023346971785043.
running
[I 2024-10-23 16:05:07,109] Trial 43 finished with value: 0.25430140435126214 and parameters: {'model_name': 'VAE', 'batch_size': 934, 'iterations': 3412, 'learning_rate': 0.020215527631225246, 'p_miss': 0.016206051851281267}. Best is trial 60 with value: 0.25023346971785043.
running
[I 2024-10-23 16:05:46,679] Trial 71 finished with value: 0.46480442283474827 and parameters: {'model_name': 'GAIN', 'batch_size': 5, 'hint_rate': 0.025896864013764564, 'alpha': 99, 'iterations': 26, 'learning_rate': 0.0035156227159501424, 'p_miss': 0.1903650555044918}. Best is trial 60 with value: 0.25023346971785043.
running
[I 2024-10-23 16:05:52,965] Trial 72 finished with value: 0.25027339528028003 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 5098, 'weights': 'distance'}. Best is trial 60 with value: 0.25023346971785043.
running
[I 2024-10-23 16:05:53,517] Trial 73 finished with value: 0.2502954590863873 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'mean'}. Best is trial 60 with value: 0.25023346971785043.
running
[I 2024-10-23 16:05:59,558] Trial 74 finished with value: 0.2502437499164526 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3835, 'weights': 'distance'}. Best is trial 60 with value: 0.25023346971785043.
running
[I 2024-10-23 16:06:05,808] Trial 75 finished with value: 0.25023493806343766 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3901, 'weights': 'distance'}. Best is trial 60 with value: 0.25023346971785043.
running
[I 2024-10-23 16:06:12,204] Trial 76 finished with value: 0.25023692780265744 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3997, 'weights': 'distance'}. Best is trial 60 with value: 0.25023346971785043.
running
[I 2024-10-23 16:06:18,301] Trial 77 finished with value: 0.25025430612069455 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3809, 'weights': 'distance'}. Best is trial 60 with value: 0.25023346971785043.
running
[I 2024-10-23 16:06:25,037] Trial 78 finished with value: 0.25027339528028003 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 5413, 'weights': 'distance'}. Best is trial 60 with value: 0.25023346971785043.
running
[I 2024-10-23 16:06:31,417] Trial 79 finished with value: 0.2502508539780847 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3806, 'weights': 'distance'}. Best is trial 60 with value: 0.25023346971785043.
running
[I 2024-10-23 16:07:35,579] Trial 63 finished with value: 0.2583745480661292 and parameters: {'model_name': 'VAE', 'batch_size': 10, 'iterations': 4246, 'learning_rate': 0.06856316721341955, 'p_miss': 0.016256244669601905}. Best is trial 60 with value: 0.25023346971785043.
running
[I 2024-10-23 16:21:55,923] Trial 81 finished with value: 0.49463866393976047 and parameters: {'model_name': 'GAIN', 'batch_size': 78, 'hint_rate': 0.02726724431824462, 'alpha': 5, 'iterations': 596, 'learning_rate': 0.005967346328037547, 'p_miss': 0.07821349837348443}. Best is trial 60 with value: 0.25023346971785043.
running
[I 2024-10-23 16:22:14,574] Trial 82 finished with value: 0.2800406361132061 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'mean', 'n_nearest_features': 4, 'imputation_order': 'arabic'}. Best is trial 60 with value: 0.25023346971785043.
running
[I 2024-10-23 16:22:21,354] Trial 83 finished with value: 0.25026657703593025 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 4562, 'weights': 'distance'}. Best is trial 60 with value: 0.25023346971785043.
running
[I 2024-10-23 16:22:27,424] Trial 84 finished with value: 0.25023516051137656 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3918, 'weights': 'distance'}. Best is trial 60 with value: 0.25023346971785043.
running
[I 2024-10-23 16:22:27,982] Trial 85 finished with value: 0.2502954590863873 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'mean'}. Best is trial 60 with value: 0.25023346971785043.
running
[I 2024-10-23 16:22:34,173] Trial 86 finished with value: 0.250236634199827 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3922, 'weights': 'distance'}. Best is trial 60 with value: 0.25023346971785043.
running
[I 2024-10-23 16:22:40,405] Trial 87 finished with value: 0.250254450090741 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3764, 'weights': 'distance'}. Best is trial 60 with value: 0.25023346971785043.
running
[I 2024-10-23 16:22:46,596] Trial 88 finished with value: 0.25027025451023877 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 4969, 'weights': 'distance'}. Best is trial 60 with value: 0.25023346971785043.
running
[I 2024-10-23 16:22:52,543] Trial 89 finished with value: 0.2502469257876775 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3654, 'weights': 'distance'}. Best is trial 60 with value: 0.25023346971785043.
running
[I 2024-10-23 16:22:59,209] Trial 90 finished with value: 0.25026416441869437 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 4501, 'weights': 'distance'}. Best is trial 60 with value: 0.25023346971785043.
running
[I 2024-10-23 16:23:04,606] Trial 91 finished with value: 0.2502332130206675 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3048, 'weights': 'distance'}. Best is trial 91 with value: 0.2502332130206675.
running
[I 2024-10-23 16:23:09,935] Trial 92 finished with value: 0.2502539412595423 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 2975, 'weights': 'distance'}. Best is trial 91 with value: 0.2502332130206675.
running
[I 2024-10-23 16:23:15,676] Trial 93 finished with value: 0.2502491661458234 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3200, 'weights': 'distance'}. Best is trial 91 with value: 0.2502332130206675.
running
[I 2024-10-23 16:23:25,817] Trial 33 finished with value: 0.33767169694148 and parameters: {'model_name': 'VAE', 'batch_size': 1, 'iterations': 6970, 'learning_rate': 0.06932282109587824, 'p_miss': 0.2890251927355134}. Best is trial 91 with value: 0.2502332130206675.
running
[I 2024-10-23 16:42:43,628] Trial 95 finished with value: 0.30272938242851744 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'mean', 'n_nearest_features': 1, 'imputation_order': 'descending'}. Best is trial 91 with value: 0.2502332130206675.
running
[I 2024-10-23 16:42:50,033] Trial 96 finished with value: 0.2502371117431774 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 4026, 'weights': 'distance'}. Best is trial 91 with value: 0.2502332130206675.
running
[I 2024-10-23 16:42:56,576] Trial 97 finished with value: 0.25026223090533933 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3521, 'weights': 'distance'}. Best is trial 91 with value: 0.2502332130206675.
running
[I 2024-10-23 16:43:02,675] Trial 98 finished with value: 0.25024622604965135 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3957, 'weights': 'distance'}. Best is trial 91 with value: 0.2502332130206675.
running
[I 2024-10-23 16:43:09,202] Trial 99 finished with value: 0.25026531307528327 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 4392, 'weights': 'distance'}. Best is trial 91 with value: 0.2502332130206675.
running
[I 2024-10-23 16:43:14,262] Trial 94 finished with value: 0.3053057256421043 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'RFR', 'initial_strategy': 'mean', 'n_nearest_features': 1, 'imputation_order': 'descending'}. Best is trial 91 with value: 0.2502332130206675.
running
[I 2024-10-23 16:43:15,743] Trial 100 finished with value: 0.25026263728980797 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3547, 'weights': 'distance'}. Best is trial 91 with value: 0.2502332130206675.
running
[I 2024-10-23 16:43:20,444] Trial 101 finished with value: 0.2502556439804915 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3586, 'weights': 'distance'}. Best is trial 91 with value: 0.2502332130206675.
running
[I 2024-10-23 16:43:21,540] Trial 102 finished with value: 0.25023278528038184 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3044, 'weights': 'distance'}. Best is trial 102 with value: 0.25023278528038184.
running
[I 2024-10-23 16:43:25,096] Trial 103 finished with value: 0.4644734824686568 and parameters: {'model_name': 'GAIN', 'batch_size': 213, 'hint_rate': 0.36926814463006663, 'alpha': 100, 'iterations': 1, 'learning_rate': 0.0013012521643110723, 'p_miss': 0.2016232223754769}. Best is trial 102 with value: 0.25023278528038184.
running
[I 2024-10-23 16:43:25,543] Trial 105 finished with value: 0.2502954590863873 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'mean'}. Best is trial 102 with value: 0.25023278528038184.
running
[I 2024-10-23 16:43:25,933] Trial 104 finished with value: 0.4647753776078159 and parameters: {'model_name': 'GAIN', 'batch_size': 3, 'hint_rate': 0.3088618456442388, 'alpha': 100, 'iterations': 1, 'learning_rate': 0.0010915322804889063, 'p_miss': 0.21168970795737538}. Best is trial 102 with value: 0.25023278528038184.
running
[I 2024-10-23 16:43:31,729] Trial 107 finished with value: 0.25025245995787426 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 2981, 'weights': 'distance'}. Best is trial 102 with value: 0.25023278528038184.
running
[I 2024-10-23 16:43:31,881] Trial 106 finished with value: 0.2502455917107943 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3006, 'weights': 'distance'}. Best is trial 102 with value: 0.25023278528038184.
running
[I 2024-10-23 16:43:36,924] Trial 108 finished with value: 0.2502354372432588 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3028, 'weights': 'distance'}. Best is trial 102 with value: 0.25023278528038184.
running
[I 2024-10-23 16:43:37,721] Trial 109 finished with value: 0.2502366064555758 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 4025, 'weights': 'distance'}. Best is trial 102 with value: 0.25023278528038184.
running
[I 2024-10-23 16:43:42,130] Trial 110 finished with value: 0.25029281789923086 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 2607, 'weights': 'distance'}. Best is trial 102 with value: 0.25023278528038184.
running
[I 2024-10-23 16:43:43,007] Trial 111 finished with value: 0.2502766586646518 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 2452, 'weights': 'distance'}. Best is trial 102 with value: 0.25023278528038184.
running
[I 2024-10-23 16:43:47,639] Trial 112 finished with value: 0.25024150487349434 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3163, 'weights': 'distance'}. Best is trial 102 with value: 0.25023278528038184.
running
[I 2024-10-23 16:43:49,136] Trial 113 finished with value: 0.25024055553010494 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3189, 'weights': 'distance'}. Best is trial 102 with value: 0.25023278528038184.
running
[I 2024-10-23 16:43:52,915] Trial 114 finished with value: 0.25027315395228517 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3374, 'weights': 'distance'}. Best is trial 102 with value: 0.25023278528038184.
running
[I 2024-10-23 16:43:54,905] Trial 115 finished with value: 0.2502732937662651 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3381, 'weights': 'distance'}. Best is trial 102 with value: 0.25023278528038184.
running
[I 2024-10-23 16:43:58,577] Trial 116 finished with value: 0.2502613853608976 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 4314, 'weights': 'distance'}. Best is trial 102 with value: 0.25023278528038184.
running
[I 2024-10-23 16:44:01,410] Trial 117 finished with value: 0.2502628610994764 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 4326, 'weights': 'distance'}. Best is trial 102 with value: 0.25023278528038184.
running
[I 2024-10-23 16:44:02,944] Trial 118 finished with value: 0.25023095420331776 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3974, 'weights': 'uniform'}. Best is trial 118 with value: 0.25023095420331776.
running
[I 2024-10-23 16:44:05,757] Trial 119 finished with value: 0.25022763142421556 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3913, 'weights': 'uniform'}. Best is trial 119 with value: 0.25022763142421556.
running
[I 2024-10-23 16:44:07,798] Trial 120 finished with value: 0.25022644408504513 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3915, 'weights': 'uniform'}. Best is trial 120 with value: 0.25022644408504513.
running
[I 2024-10-23 16:45:04,830] Trial 122 finished with value: 0.3194907688985523 and parameters: {'model_name': 'VAE', 'batch_size': 23, 'iterations': 20, 'learning_rate': 0.00033909754817342593, 'p_miss': 0.06876637565121306}. Best is trial 120 with value: 0.25022644408504513.
running
[I 2024-10-23 16:45:09,796] Trial 123 finished with value: 0.2502929060054674 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 4834, 'weights': 'uniform'}. Best is trial 120 with value: 0.25022644408504513.
running
[I 2024-10-23 16:45:14,832] Trial 124 finished with value: 0.2502525868958705 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3710, 'weights': 'uniform'}. Best is trial 120 with value: 0.25022644408504513.
running
[I 2024-10-23 16:45:16,177] Trial 121 finished with value: 0.3147515653177354 and parameters: {'model_name': 'VAE', 'batch_size': 28, 'iterations': 21, 'learning_rate': 0.00034323487290505216, 'p_miss': 0.07028712769382739}. Best is trial 120 with value: 0.25022644408504513.
running
[I 2024-10-23 16:45:19,017] Trial 125 finished with value: 0.25027691340468944 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 2758, 'weights': 'uniform'}. Best is trial 120 with value: 0.25022644408504513.
running
[I 2024-10-23 16:45:20,630] Trial 126 finished with value: 0.2502324705163309 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3976, 'weights': 'uniform'}. Best is trial 120 with value: 0.25022644408504513.
running
[I 2024-10-23 16:45:23,485] Trial 127 finished with value: 0.25023125859592316 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3932, 'weights': 'uniform'}. Best is trial 120 with value: 0.25022644408504513.
running
[I 2024-10-23 16:45:25,655] Trial 128 finished with value: 0.2502490591808811 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3811, 'weights': 'uniform'}. Best is trial 120 with value: 0.25022644408504513.
running
[I 2024-10-23 16:45:28,172] Trial 129 finished with value: 0.2502565304730696 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3572, 'weights': 'uniform'}. Best is trial 120 with value: 0.25022644408504513.
running
[I 2024-10-23 16:45:30,492] Trial 130 finished with value: 0.25026829586651866 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3536, 'weights': 'uniform'}. Best is trial 120 with value: 0.25022644408504513.
running
[I 2024-10-23 16:45:32,691] Trial 131 finished with value: 0.2502833983141646 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 4670, 'weights': 'uniform'}. Best is trial 120 with value: 0.25022644408504513.
running
[I 2024-10-23 16:45:33,130] Trial 133 finished with value: 0.2560154324342349 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'median'}. Best is trial 120 with value: 0.25022644408504513.
running
[I 2024-10-23 16:45:34,899] Trial 132 finished with value: 0.25028081796124224 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 4640, 'weights': 'uniform'}. Best is trial 120 with value: 0.25022644408504513.
running
[I 2024-10-23 16:45:36,905] Trial 134 finished with value: 0.25023780893243835 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3951, 'weights': 'uniform'}. Best is trial 120 with value: 0.25022644408504513.
running
[I 2024-10-23 16:45:39,008] Trial 135 finished with value: 0.250249100002473 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 4170, 'weights': 'uniform'}. Best is trial 120 with value: 0.25022644408504513.
running
[I 2024-10-23 16:45:41,443] Trial 136 finished with value: 0.2502572018022159 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 4188, 'weights': 'uniform'}. Best is trial 120 with value: 0.25022644408504513.
running
[I 2024-10-23 16:45:43,651] Trial 137 finished with value: 0.2502294618448924 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3899, 'weights': 'uniform'}. Best is trial 120 with value: 0.25022644408504513.
running
[I 2024-10-23 16:45:45,849] Trial 138 finished with value: 0.250229665305128 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3906, 'weights': 'uniform'}. Best is trial 120 with value: 0.25022644408504513.
running
[I 2024-10-23 16:45:48,496] Trial 139 finished with value: 0.25023067548013683 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3919, 'weights': 'uniform'}. Best is trial 120 with value: 0.25022644408504513.
running
[I 2024-10-23 16:45:50,300] Trial 140 finished with value: 0.2502576250710427 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3721, 'weights': 'uniform'}. Best is trial 120 with value: 0.25022644408504513.
running
[I 2024-10-23 16:45:53,023] Trial 141 finished with value: 0.2502611054536708 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3731, 'weights': 'uniform'}. Best is trial 120 with value: 0.25022644408504513.
running
[I 2024-10-23 16:46:19,904] Trial 143 finished with value: 0.2763835998443105 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'KNN', 'initial_strategy': 'median', 'n_nearest_features': 5, 'imputation_order': 'roman'}. Best is trial 120 with value: 0.25022644408504513.
running
[I 2024-10-23 16:46:21,615] Trial 142 finished with value: 0.2502735120324003 and parameters: {'model_name': 'IterativeImputer', 'estimator': 'Bayesian', 'initial_strategy': 'constant', 'n_nearest_features': 5, 'imputation_order': 'roman', 'sample_posterior': False}. Best is trial 120 with value: 0.25022644408504513.
running
[I 2024-10-23 16:46:24,386] Trial 144 finished with value: 0.2502765917109274 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 4448, 'weights': 'uniform'}. Best is trial 120 with value: 0.25022644408504513.
running
[I 2024-10-23 16:46:25,880] Trial 145 finished with value: 0.25027941023617345 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 4408, 'weights': 'uniform'}. Best is trial 120 with value: 0.25022644408504513.
running
[I 2024-10-23 16:46:28,343] Trial 146 finished with value: 0.25022763142421556 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3913, 'weights': 'uniform'}. Best is trial 120 with value: 0.25022644408504513.
running
[I 2024-10-23 16:46:29,879] Trial 147 finished with value: 0.2502414516761785 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3884, 'weights': 'uniform'}. Best is trial 120 with value: 0.25022644408504513.
running
[I 2024-10-23 16:46:32,547] Trial 148 finished with value: 0.2502249804317776 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3868, 'weights': 'uniform'}. Best is trial 148 with value: 0.2502249804317776.
running
[I 2024-10-23 16:46:33,762] Trial 149 finished with value: 0.25023763976936253 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3890, 'weights': 'uniform'}. Best is trial 148 with value: 0.2502249804317776.
running
[I 2024-10-23 16:46:36,622] Trial 150 finished with value: 0.2502486530931722 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 4201, 'weights': 'uniform'}. Best is trial 148 with value: 0.2502249804317776.
running
[I 2024-10-23 16:46:37,681] Trial 151 finished with value: 0.2502513640006291 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 4181, 'weights': 'uniform'}. Best is trial 148 with value: 0.2502249804317776.
running
[I 2024-10-23 16:46:39,397] Trial 152 finished with value: 0.2522743252507018 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 74, 'weights': 'uniform'}. Best is trial 148 with value: 0.2502249804317776.
running
[I 2024-10-23 16:48:23,834] Trial 153 finished with value: inf and parameters: {'model_name': 'GAIN', 'batch_size': 3, 'hint_rate': 0.9701369680051931, 'alpha': 39, 'iterations': 401, 'learning_rate': 0.014940422497953255, 'p_miss': 0.15443114100119848}. Best is trial 148 with value: 0.2502249804317776.
running
[I 2024-10-23 16:48:28,278] Trial 155 finished with value: 0.2502749979716441 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3448, 'weights': 'uniform'}. Best is trial 148 with value: 0.2502249804317776.
running
[I 2024-10-23 16:48:32,530] Trial 156 finished with value: 0.25023952221177753 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 4009, 'weights': 'uniform'}. Best is trial 148 with value: 0.2502249804317776.
running
[I 2024-10-23 16:48:37,754] Trial 157 finished with value: 0.25023607324962005 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3881, 'weights': 'uniform'}. Best is trial 148 with value: 0.2502249804317776.
running
[I 2024-10-23 16:48:42,616] Trial 154 finished with value: inf and parameters: {'model_name': 'GAIN', 'batch_size': 3, 'hint_rate': 0.9717986043182485, 'alpha': 34, 'iterations': 457, 'learning_rate': 0.010101342691063334, 'p_miss': 0.16988147217070854}. Best is trial 148 with value: 0.2502249804317776.
running
[I 2024-10-23 16:48:42,863] Trial 158 finished with value: 0.25024327814108777 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3637, 'weights': 'uniform'}. Best is trial 148 with value: 0.2502249804317776.
running
[I 2024-10-23 16:48:46,791] Trial 159 finished with value: 0.2502498728039407 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3699, 'weights': 'uniform'}. Best is trial 148 with value: 0.2502249804317776.
running
[I 2024-10-23 16:48:47,384] Trial 160 finished with value: 0.25023135882346004 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 4058, 'weights': 'uniform'}. Best is trial 148 with value: 0.2502249804317776.
running
[I 2024-10-23 16:48:50,683] Trial 161 finished with value: 0.25022753560272715 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 4028, 'weights': 'uniform'}. Best is trial 148 with value: 0.2502249804317776.
running
[I 2024-10-23 16:48:50,969] Trial 162 finished with value: 0.2502340448890379 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 4111, 'weights': 'uniform'}. Best is trial 148 with value: 0.2502249804317776.
running
[I 2024-10-23 16:48:51,281] Trial 164 finished with value: 0.2502954590863873 and parameters: {'model_name': 'SimpleImputer', 'strategy': 'mean'}. Best is trial 148 with value: 0.2502249804317776.
running
[I 2024-10-23 16:48:54,896] Trial 163 finished with value: 0.25023353112250557 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 4086, 'weights': 'uniform'}. Best is trial 148 with value: 0.2502249804317776.
running
[I 2024-10-23 16:48:55,492] Trial 165 finished with value: 0.2502696381683409 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 4304, 'weights': 'uniform'}. Best is trial 148 with value: 0.2502249804317776.
running
[I 2024-10-23 16:48:58,622] Trial 167 finished with value: 0.250375416387307 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 1640, 'weights': 'uniform'}. Best is trial 148 with value: 0.2502249804317776.
running
[I 2024-10-23 16:48:58,963] Trial 166 finished with value: 0.25027539284277883 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 4279, 'weights': 'uniform'}. Best is trial 148 with value: 0.2502249804317776.
running
[I 2024-10-23 16:49:02,593] Trial 168 finished with value: 0.25023323924744767 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 4077, 'weights': 'uniform'}. Best is trial 148 with value: 0.2502249804317776.
running
[I 2024-10-23 16:49:03,113] Trial 169 finished with value: 0.25023820628116333 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 4043, 'weights': 'uniform'}. Best is trial 148 with value: 0.2502249804317776.
running
[I 2024-10-23 16:49:06,544] Trial 170 finished with value: 0.25023283334900137 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3994, 'weights': 'uniform'}. Best is trial 148 with value: 0.2502249804317776.
running
[I 2024-10-23 16:49:07,225] Trial 171 finished with value: 0.25027628088078246 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3327, 'weights': 'uniform'}. Best is trial 148 with value: 0.2502249804317776.
running
[I 2024-10-23 16:49:10,751] Trial 172 finished with value: 0.25025065373931943 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3784, 'weights': 'uniform'}. Best is trial 148 with value: 0.2502249804317776.
running
[I 2024-10-23 16:49:11,730] Trial 173 finished with value: 0.2502460125607292 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3775, 'weights': 'uniform'}. Best is trial 148 with value: 0.2502249804317776.
running
[I 2024-10-23 16:51:00,602] Trial 64 finished with value: 0.25825553743619306 and parameters: {'model_name': 'VAE', 'batch_size': 16, 'iterations': 3789, 'learning_rate': 0.0503300362078277, 'p_miss': 0.010061597134984196}. Best is trial 148 with value: 0.2502249804317776.
running
[I 2024-10-23 16:51:04,769] Trial 176 finished with value: 0.2502447015351199 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 2868, 'weights': 'uniform'}. Best is trial 148 with value: 0.2502249804317776.
running
[I 2024-10-23 16:51:09,828] Trial 177 finished with value: 0.25023284959513226 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3987, 'weights': 'uniform'}. Best is trial 148 with value: 0.2502249804317776.
running
[I 2024-10-23 16:51:14,104] Trial 178 finished with value: 0.25023086210261963 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3995, 'weights': 'uniform'}. Best is trial 148 with value: 0.2502249804317776.
running
[I 2024-10-23 16:51:18,712] Trial 179 finished with value: 0.250240571573053 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3953, 'weights': 'uniform'}. Best is trial 148 with value: 0.2502249804317776.
running
[I 2024-10-23 16:51:22,770] Trial 180 finished with value: 0.25027968573811143 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3455, 'weights': 'uniform'}. Best is trial 148 with value: 0.2502249804317776.
running
[I 2024-10-23 16:51:27,030] Trial 181 finished with value: 0.2502432749743491 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3654, 'weights': 'uniform'}. Best is trial 148 with value: 0.2502249804317776.
running
[I 2024-10-23 16:51:31,464] Trial 182 finished with value: 0.2502794159856826 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 4487, 'weights': 'uniform'}. Best is trial 148 with value: 0.2502249804317776.
running
[I 2024-10-23 16:51:35,513] Trial 183 finished with value: 0.25022542703336537 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3871, 'weights': 'uniform'}. Best is trial 148 with value: 0.2502249804317776.
running
[I 2024-10-23 16:51:39,856] Trial 184 finished with value: 0.2502307826017907 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3858, 'weights': 'uniform'}. Best is trial 148 with value: 0.2502249804317776.
running
[I 2024-10-23 16:51:43,075] Trial 39 finished with value: 0.2834376438073122 and parameters: {'model_name': 'VAE', 'batch_size': 2, 'iterations': 6658, 'learning_rate': 0.0648140384133207, 'p_miss': 0.038194615174232005}. Best is trial 148 with value: 0.2502249804317776.
running
[I 2024-10-23 16:51:44,537] Trial 185 finished with value: 0.25022614561433404 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3869, 'weights': 'uniform'}. Best is trial 148 with value: 0.2502249804317776.
running
[I 2024-10-23 16:51:47,448] Trial 186 finished with value: 0.2502219924732429 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3876, 'weights': 'uniform'}. Best is trial 186 with value: 0.2502219924732429.
running
[I 2024-10-23 16:51:48,914] Trial 187 finished with value: 0.25023198650455547 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3856, 'weights': 'uniform'}. Best is trial 186 with value: 0.2502219924732429.
running
[I 2024-10-23 16:51:51,490] Trial 188 finished with value: 0.2502389728374542 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3837, 'weights': 'uniform'}. Best is trial 186 with value: 0.2502219924732429.
running
[I 2024-10-23 16:51:52,731] Trial 189 finished with value: 0.25023837705133717 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3848, 'weights': 'uniform'}. Best is trial 186 with value: 0.2502219924732429.
running
[I 2024-10-23 16:51:55,860] Trial 190 finished with value: 0.25023765789135494 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3647, 'weights': 'uniform'}. Best is trial 186 with value: 0.2502219924732429.
running
[I 2024-10-23 16:51:57,358] Trial 191 finished with value: 0.2502574884477678 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3576, 'weights': 'uniform'}. Best is trial 186 with value: 0.2502219924732429.
running
[I 2024-10-23 16:52:00,390] Trial 192 finished with value: 0.2502529419166512 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 4179, 'weights': 'uniform'}. Best is trial 186 with value: 0.2502219924732429.
running
[I 2024-10-23 16:52:01,596] Trial 193 finished with value: 0.2502519756583909 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 4210, 'weights': 'uniform'}. Best is trial 186 with value: 0.2502219924732429.
running
[I 2024-10-23 16:52:04,577] Trial 194 finished with value: 0.25027035594056024 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 4295, 'weights': 'uniform'}. Best is trial 186 with value: 0.2502219924732429.
running
[I 2024-10-23 16:52:08,553] Trial 196 finished with value: 0.25023675069110063 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3889, 'weights': 'uniform'}. Best is trial 186 with value: 0.2502219924732429.
running
[I 2024-10-23 16:52:12,783] Trial 197 finished with value: 0.2502531471887578 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 3759, 'weights': 'uniform'}. Best is trial 186 with value: 0.2502219924732429.
running
[I 2024-10-23 16:52:16,953] Trial 198 finished with value: 0.2502331466956392 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 4033, 'weights': 'uniform'}. Best is trial 186 with value: 0.2502219924732429.
running
[I 2024-10-23 16:52:21,278] Trial 199 finished with value: 0.2502954590863873 and parameters: {'model_name': 'KNNImputer', 'n_neighbors': 6435, 'weights': 'uniform'}. Best is trial 186 with value: 0.2502219924732429.
[I 2024-10-23 16:52:52,089] Trial 174 finished with value: 0.2545089401579227 and parameters: {'model_name': 'VAE', 'batch_size': 167, 'iterations': 65, 'learning_rate': 0.029681270134192417, 'p_miss': 0.10495740830208405}. Best is trial 186 with value: 0.2502219924732429.
[I 2024-10-23 16:53:19,765] Trial 175 finished with value: 0.25540306616367936 and parameters: {'model_name': 'VAE', 'batch_size': 129, 'iterations': 73, 'learning_rate': 0.007218690041575224, 'p_miss': 0.11137134653361469}. Best is trial 186 with value: 0.2502219924732429.
[I 2024-10-23 16:55:46,168] Trial 195 finished with value: 0.26011815045213066 and parameters: {'model_name': 'VAE', 'batch_size': 202, 'iterations': 71, 'learning_rate': 0.002102380186415869, 'p_miss': 0.10100270727244047}. Best is trial 186 with value: 0.2502219924732429.
[I 2024-10-23 16:57:12,140] Trial 53 finished with value: 0.31224707503421895 and parameters: {'model_name': 'VAE', 'batch_size': 1, 'iterations': 6766, 'learning_rate': 0.05212953679672095, 'p_miss': 0.02111484250313997}. Best is trial 186 with value: 0.2502219924732429.
[I 2024-10-23 17:04:51,783] Trial 54 finished with value: 0.305139372333656 and parameters: {'model_name': 'VAE', 'batch_size': 1, 'iterations': 6751, 'learning_rate': 0.06168510386751409, 'p_miss': 0.02361600327931046}. Best is trial 186 with value: 0.2502219924732429.
[I 2024-10-23 17:18:42,106] Trial 70 finished with value: 0.5087571011267519 and parameters: {'model_name': 'GAIN', 'batch_size': 12, 'hint_rate': 0.0232353390938011, 'alpha': 0, 'iterations': 9582, 'learning_rate': 0.0053702446270047065, 'p_miss': 0.18963707722255949}. Best is trial 186 with value: 0.2502219924732429.
[I 2024-10-23 17:37:50,225] Trial 35 finished with value: 0.25460411043921216 and parameters: {'model_name': 'VAE', 'batch_size': 751, 'iterations': 5996, 'learning_rate': 0.06118834293090444, 'p_miss': 0.0274462312363844}. Best is trial 186 with value: 0.2502219924732429.
[I 2024-10-23 17:38:22,772] Trial 38 finished with value: 0.3052629063409912 and parameters: {'model_name': 'VAE', 'batch_size': 1, 'iterations': 8866, 'learning_rate': 0.04577057564677699, 'p_miss': 0.01820574065916214}. Best is trial 186 with value: 0.2502219924732429.
[I 2024-10-23 17:46:24,273] Trial 40 finished with value: 0.3104087697736423 and parameters: {'model_name': 'VAE', 'batch_size': 1, 'iterations': 8911, 'learning_rate': 0.09288202373675186, 'p_miss': 0.013436275779253354}. Best is trial 186 with value: 0.2502219924732429.
[I 2024-10-23 18:01:23,358] Trial 41 finished with value: 0.2994011793344341 and parameters: {'model_name': 'VAE', 'batch_size': 1, 'iterations': 9375, 'learning_rate': 0.09183156926278505, 'p_miss': 0.01426689639807116}. Best is trial 186 with value: 0.2502219924732429.
[I 2024-10-23 18:02:22,174] Trial 80 finished with value: 0.4949946266965289 and parameters: {'model_name': 'GAIN', 'batch_size': 90, 'hint_rate': 0.04930745694762767, 'alpha': 0, 'iterations': 8466, 'learning_rate': 0.008024350101632835, 'p_miss': 0.07199598611130763}. Best is trial 186 with value: 0.2502219924732429.
[I 2024-10-23 18:07:25,352] Trial 69 finished with value: 0.2577986012578083 and parameters: {'model_name': 'VAE', 'batch_size': 9, 'iterations': 9632, 'learning_rate': 0.003704263812743648, 'p_miss': 0.0254921161937329}. Best is trial 186 with value: 0.2502219924732429.
[I 2024-10-23 18:09:10,860] Trial 58 finished with value: 0.25780258936438366 and parameters: {'model_name': 'VAE', 'batch_size': 10, 'iterations': 9933, 'learning_rate': 0.09973407903490127, 'p_miss': 0.018847639140411904}. Best is trial 186 with value: 0.2502219924732429.
[I 2024-10-23 18:19:31,825] Trial 44 finished with value: 0.2544582623774448 and parameters: {'model_name': 'VAE', 'batch_size': 718, 'iterations': 9782, 'learning_rate': 0.019811785576585826, 'p_miss': 0.025038592208147276}. Best is trial 186 with value: 0.2502219924732429.
[I 2024-10-23 18:20:16,209] Trial 42 finished with value: 0.25445787276337695 and parameters: {'model_name': 'VAE', 'batch_size': 836, 'iterations': 8733, 'learning_rate': 0.01817587849916516, 'p_miss': 0.024356750333002997}. Best is trial 186 with value: 0.2502219924732429.
fit
auto fit
auto transform
0    0
1    0
2    0
3    0
4    0
5    0
6    0
7    0
dtype: int64
0    0
1    0
2    0
3    0
4    0
5    0
6    0
7    0
dtype: int64
0.2502219924732429
{'model_name': 'KNNImputer', 'n_neighbors': 3876, 'weights': 'uniform'}
running experiment 2/3 - Does reconstruction give good automl predictions
Start est fit
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
  0%|          | 0/25 [00:00<?, ?it/s]Generation:   0%|          | 0/25 [00:00<?, ?it/s]Generation:  1
Best f1_score score: 0.8969755983396113
Generation:   4%|▍         | 1/25 [00:15<06:00, 15.03s/it]Generation:  2
Best f1_score score: 0.8969755983396113
Generation:   8%|▊         | 2/25 [00:33<06:26, 16.79s/it]Generation:  3
Best f1_score score: 0.8969755983396113
Generation:  12%|█▏        | 3/25 [06:09<59:37, 162.60s/it]Generation:  4
Best f1_score score: 0.8969755983396113
Generation:  16%|█▌        | 4/25 [06:35<38:06, 108.86s/it]Generation:  5
Best f1_score score: 0.8969755983396113
Generation:  20%|██        | 5/25 [07:07<27:04, 81.24s/it] Generation:  6
Best f1_score score: 0.8969755983396113
Generation:  24%|██▍       | 6/25 [07:31<19:30, 61.61s/it]Generation:  7
Best f1_score score: 0.8969755983396113
Generation:  28%|██▊       | 7/25 [07:54<14:43, 49.11s/it]Generation:  8
Best f1_score score: 0.8969755983396113
Generation:  32%|███▏      | 8/25 [08:15<11:22, 40.16s/it]Generation:  9
Best f1_score score: 0.8969755983396113
Generation:  36%|███▌      | 9/25 [08:37<09:10, 34.38s/it]Generation:  10
Best f1_score score: 0.8969755983396113
Generation:  40%|████      | 10/25 [08:55<07:21, 29.45s/it]Generation:  11
Best f1_score score: 0.8969755983396113
Generation:  44%|████▍     | 11/25 [10:45<12:34, 53.86s/it]Generation:  12
Best f1_score score: 0.8969755983396113
Generation:  48%|████▊     | 12/25 [10:55<08:50, 40.78s/it]Generation:  13
Best f1_score score: 0.8969755983396113
Generation:  52%|█████▏    | 13/25 [11:20<07:10, 35.87s/it]Generation:  14
Best f1_score score: 0.8969755983396113
Generation:  56%|█████▌    | 14/25 [11:45<06:00, 32.73s/it]Generation:  15
Best f1_score score: 0.8969755983396113
Generation:  60%|██████    | 15/25 [12:16<05:20, 32.02s/it]Generation:  16
Best f1_score score: 0.8971143804716315
Generation:  64%|██████▍   | 16/25 [12:31<04:02, 26.93s/it]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x1554653bdc00> 
 Unsupported set of arguments: The combination of penalty='l1' and loss='hinge' is not supported, Parameters: penalty='l1', loss='hinge', dual=True 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/svm/_classes.py", line 317, in fit
    self.coef_, self.intercept_, n_iter_ = _fit_liblinear(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/svm/_base.py", line 1214, in _fit_liblinear
    solver_type = _get_liblinear_solver_type(multi_class, penalty, loss, dual)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/svm/_base.py", line 1046, in _get_liblinear_solver_type
    raise ValueError(
ValueError: Unsupported set of arguments: The combination of penalty='l1' and loss='hinge' is not supported, Parameters: penalty='l1', loss='hinge', dual=True

WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155467ef15a0> 
 The 'min_samples_split' parameter of DecisionTreeClassifier must be an int in the range [2, inf) or a float in the range (0.0, 1.0]. Got 1 instead. 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1466, in wrapper
    estimator._validate_params()
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 666, in _validate_params
    validate_parameter_constraints(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/_param_validation.py", line 95, in validate_parameter_constraints
    raise InvalidParameterError(
sklearn.utils._param_validation.InvalidParameterError: The 'min_samples_split' parameter of DecisionTreeClassifier must be an int in the range [2, inf) or a float in the range (0.0, 1.0]. Got 1 instead.

Generation:  17
Best f1_score score: 0.8971143804716315
Generation:  68%|██████▊   | 17/25 [12:59<03:37, 27.19s/it]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x1554652be410> 
 Unsupported set of arguments: The combination of penalty='l1' and loss='hinge' is not supported, Parameters: penalty='l1', loss='hinge', dual=True 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/svm/_classes.py", line 317, in fit
    self.coef_, self.intercept_, n_iter_ = _fit_liblinear(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/svm/_base.py", line 1214, in _fit_liblinear
    solver_type = _get_liblinear_solver_type(multi_class, penalty, loss, dual)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/svm/_base.py", line 1046, in _get_liblinear_solver_type
    raise ValueError(
ValueError: Unsupported set of arguments: The combination of penalty='l1' and loss='hinge' is not supported, Parameters: penalty='l1', loss='hinge', dual=True

Generation:  18
Best f1_score score: 0.8971143804716315
Generation:  72%|███████▏  | 18/25 [13:22<03:01, 25.96s/it]Generation:  19
Best f1_score score: 0.8971143804716315
Generation:  76%|███████▌  | 19/25 [13:37<02:16, 22.68s/it]Generation:  20
Best f1_score score: 0.8971143804716315
Generation:  80%|████████  | 20/25 [14:01<01:55, 23.06s/it]Generation:  21
Best f1_score score: 0.8971143804716315
Generation:  84%|████████▍ | 21/25 [14:27<01:36, 24.02s/it]Generation:  22
Best f1_score score: 0.8971143804716315
Generation:  88%|████████▊ | 22/25 [14:54<01:14, 24.94s/it]Generation:  23
Best f1_score score: 0.8971143804716315
Generation:  92%|█████████▏| 23/25 [15:27<00:54, 27.34s/it]Generation:  24
Best f1_score score: 0.8971143804716315
Generation:  96%|█████████▌| 24/25 [17:20<00:53, 53.02s/it]Generation:  25
Best f1_score score: 0.8975529453217745
Generation: 100%|██████████| 25/25 [17:42<00:00, 43.62s/it]Generation: 100%|██████████| 25/25 [17:46<00:00, 42.65s/it]
2024-10-23 18:38:13,569 - distributed.scheduler - ERROR - Removing worker 'tcp://127.0.0.1:44201' caused the cluster to lose scattered data, which can't be recovered: {'ndarray-baa96659b9aae0a6a46f50f80f0902c5', 'ndarray-422b2c53f5e51e71a00dd009dc06b86a'} (stimulus_id='handle-worker-cleanup-1729733893.5689497')
Fitted
Pipeline(steps=[('svc',
                 SVC(C=7.4254199087341, class_weight='balanced',
                     coef0=0.7325821844904, degree=4, gamma=0.0518970251796,
                     kernel='poly', max_iter=3000, probability=True))])
score start
train score: {'auroc': 0.963665874663576, 'accuracy': 0.9049290401342897, 'balanced_accuracy': 0.9004975011270565, 'logloss': 0.23349516642970447, 'f1': 0.9011086318742655}
original test score: {'auroc': 0.9912380522408136, 'accuracy': 0.9481391092129348, 'balanced_accuracy': 0.9484634509117559, 'logloss': 0.13582065728778223, 'f1': 0.9463906060903411}
imputed test score: {'auroc': 0.9611324821344086, 'accuracy': 0.8987187309334961, 'balanced_accuracy': 0.8965388219068793, 'logloss': 0.24299292857785654, 'f1': 0.8951836099425208}
score end
check intended
EXP2 Finished
running experiment 3/3 - What is the best automl settings?
<tpot2.search_spaces.pipelines.sequential.SequentialPipeline object at 0x1554350145b0>
Start tpot fit
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
Version 0.1.7a0 of tpot2 is outdated. Version 0.1.8a0 was released Tuesday September 17, 2024.
  0%|          | 0/25 [00:00<?, ?it/s]Generation:   0%|          | 0/25 [00:00<?, ?it/s]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155474cd5390> 
 Input X contains NaN.
BernoulliNB does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/naive_bayes.py", line 732, in fit
    X, y = self._check_X_y(X, y)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/naive_bayes.py", line 1184, in _check_X_y
    X, y = super()._check_X_y(X, y, reset=reset)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/naive_bayes.py", line 578, in _check_X_y
    return self._validate_data(X, y, accept_sparse="csr", reset=reset)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 650, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1301, in check_X_y
    X = check_array(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1064, in check_array
    _assert_all_finite(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 123, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 172, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
BernoulliNB does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155474cd4c10> 
 Input X contains NaN.
GaussianNB does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/naive_bayes.py", line 263, in fit
    return self._partial_fit(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/naive_bayes.py", line 423, in _partial_fit
    X, y = self._validate_data(X, y, reset=first_call)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 650, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1301, in check_X_y
    X = check_array(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1064, in check_array
    _assert_all_finite(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 123, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 172, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
GaussianNB does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155474cd4bb0> 
 Input X contains NaN.
ExtraTreesClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/ensemble/_forest.py", line 377, in fit
    estimator._compute_missing_values_in_feature_mask(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/tree/_classes.py", line 214, in _compute_missing_values_in_feature_mask
    assert_all_finite(X, **common_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 213, in assert_all_finite
    _assert_all_finite(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 123, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 172, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
ExtraTreesClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Generation:  1
Best f1_score score: 0.8957088939508326
Generation:   4%|▍         | 1/25 [05:10<2:04:07, 310.32s/it]Generation:  2
Best f1_score score: 0.8957088939508326
Generation:   8%|▊         | 2/25 [07:20<1:18:18, 204.28s/it]Generation:  3
Best f1_score score: 0.8957088939508326
Generation:  12%|█▏        | 3/25 [08:09<48:59, 133.61s/it]  Generation:  4
Best f1_score score: 0.8957088939508326
Generation:  16%|█▌        | 4/25 [10:04<44:08, 126.13s/it]Generation:  5
Best f1_score score: 0.8957088939508326
Generation:  20%|██        | 5/25 [11:26<36:40, 110.03s/it]Generation:  6
Best f1_score score: 0.8957088939508326
Generation:  24%|██▍       | 6/25 [11:53<25:55, 81.88s/it] WARNING AN INDIVIDUAL TIMED OUT: 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x1554745ca980> 

Generation:  7
Best f1_score score: 0.8986078436367675
Generation:  28%|██▊       | 7/25 [21:57<1:15:47, 252.64s/it]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155474cd6770> 
 Input X contains NaN.
LinearSVC does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/svm/_classes.py", line 302, in fit
    X, y = self._validate_data(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 650, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1301, in check_X_y
    X = check_array(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1064, in check_array
    _assert_all_finite(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 123, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 172, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
LinearSVC does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

WARNING AN INDIVIDUAL TIMED OUT: 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x15547407c760> 

Generation:  8
Best f1_score score: 0.8986078436367675
Generation:  32%|███▏      | 8/25 [32:02<1:43:23, 364.93s/it]WARNING AN INDIVIDUAL TIMED OUT: 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155457437dc0> 

WARNING AN INDIVIDUAL TIMED OUT: 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x15545505d660> 

WARNING AN INDIVIDUAL TIMED OUT: 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155474109270> 

Generation:  9
Best f1_score score: 0.8986078436367675
Generation:  36%|███▌      | 9/25 [42:08<1:57:24, 440.25s/it]WARNING AN INDIVIDUAL TIMED OUT: 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x1554742d2920> 

Generation:  10
Best f1_score score: 0.8986078436367675
Generation:  40%|████      | 10/25 [52:12<2:02:42, 490.80s/it]WARNING AN INDIVIDUAL TIMED OUT: 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x15545716e410> 

WARNING AN INDIVIDUAL TIMED OUT: 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155454d7e7a0> 

Generation:  11
Best f1_score score: 0.8986078436367675
Generation:  44%|████▍     | 11/25 [1:02:17<2:02:37, 525.56s/it]WARNING AN INDIVIDUAL TIMED OUT: 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155474d1f760> 

Generation:  12
Best f1_score score: 0.8986078436367675
Generation:  48%|████▊     | 12/25 [1:12:21<1:59:03, 549.49s/it]WARNING AN INDIVIDUAL TIMED OUT: 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155454c42d40> 

Generation:  13
Best f1_score score: 0.8986078436367675
Generation:  52%|█████▏    | 13/25 [1:22:26<1:53:16, 566.34s/it]WARNING AN INDIVIDUAL TIMED OUT: 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x1554547d8730> 

Generation:  14
Best f1_score score: 0.8986078436367675
Generation:  56%|█████▌    | 14/25 [1:32:30<1:45:54, 577.69s/it]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x15545da10d30> 
 Input X contains NaN.
LinearSVC does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/svm/_classes.py", line 302, in fit
    X, y = self._validate_data(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 650, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1301, in check_X_y
    X = check_array(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1064, in check_array
    _assert_all_finite(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 123, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 172, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
LinearSVC does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

WARNING AN INDIVIDUAL TIMED OUT: 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x15545bb72830> 

Generation:  15
Best f1_score score: 0.8986078436367675
Generation:  60%|██████    | 15/25 [1:42:34<1:37:36, 585.67s/it]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155457394dc0> 
 Input X contains NaN.
LinearSVC does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/svm/_classes.py", line 302, in fit
    X, y = self._validate_data(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 650, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1301, in check_X_y
    X = check_array(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1064, in check_array
    _assert_all_finite(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 123, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 172, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
LinearSVC does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

WARNING AN INDIVIDUAL TIMED OUT: 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155452bfd9f0> 

Generation:  16
Best f1_score score: 0.8986078436367675
Generation:  64%|██████▍   | 16/25 [1:52:37<1:28:37, 590.80s/it]WARNING AN INDIVIDUAL TIMED OUT: 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155474307be0> 

Generation:  17
Best f1_score score: 0.8986078436367675
Generation:  68%|██████▊   | 17/25 [2:02:41<1:19:19, 594.99s/it]Generation:  18
Best f1_score score: 0.8986078436367675
Generation:  72%|███████▏  | 18/25 [2:03:35<50:26, 432.39s/it]  Generation:  19
Best f1_score score: 0.8986078436367675
Generation:  76%|███████▌  | 19/25 [2:04:43<32:17, 322.87s/it]WARNING AN INDIVIDUAL TIMED OUT: 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155474cd5c00> 

Generation:  20
Best f1_score score: 0.8986078436367675
Generation:  80%|████████  | 20/25 [2:14:46<33:55, 407.08s/it]Generation:  21
Best f1_score score: 0.8986078436367675
Generation:  84%|████████▍ | 21/25 [2:19:28<24:37, 369.46s/it]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x1553a3095ab0> 
 Input X contains NaN.
LinearSVC does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/svm/_classes.py", line 302, in fit
    X, y = self._validate_data(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 650, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1301, in check_X_y
    X = check_array(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1064, in check_array
    _assert_all_finite(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 123, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 172, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
LinearSVC does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

Generation:  22
Best f1_score score: 0.8986078436367675
Generation:  88%|████████▊ | 22/25 [2:27:55<20:32, 410.76s/it]WARNING THIS INDIVIDUAL CAUSED AND EXCEPTION 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x1554017ca650> 
 Input X contains NaN.
MLPClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values 
 Traceback (most recent call last):
  File "/common/ketrong/tpotexp/tpot2/tpot2/utils/eval_utils.py", line 53, in objective_nan_wrapper
    value = func_timeout.func_timeout(timeout, objective_function, args=[individual], kwargs=objective_kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/dafunc.py", line 108, in func_timeout
    raise_exception(exception)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/func_timeout/py3_raise.py", line 7, in raise_exception
    raise exception[0] from None
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator.py", line 623, in objective_function
    return objective_function_generator(
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/estimator_utils.py", line 55, in objective_function_generator
    cv_obj_scores = cross_val_score_objective(sklearn.base.clone(pipeline),x,y,scorers=scorers, cv=cv , fold=step)
  File "/common/ketrong/tpotexp/tpot2/tpot2/tpot_estimator/cross_val_utils.py", line 28, in cross_val_score_objective
    this_fold_pipeline.fit(X_train,y_train)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/pipeline.py", line 473, in fit
    self._final_estimator.fit(Xt, y, **last_step_params["fit"])
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 1473, in wrapper
    return fit_method(estimator, *args, **kwargs)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/neural_network/_multilayer_perceptron.py", line 751, in fit
    return self._fit(X, y, incremental=False)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/neural_network/_multilayer_perceptron.py", line 441, in _fit
    X, y = self._validate_input(X, y, incremental, reset=first_pass)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/neural_network/_multilayer_perceptron.py", line 1096, in _validate_input
    X, y = self._validate_data(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/base.py", line 650, in _validate_data
    X, y = check_X_y(X, y, **check_params)
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1301, in check_X_y
    X = check_array(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 1064, in check_array
    _assert_all_finite(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 123, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "/common/ketrong/tpotexp/env/lib/python3.10/site-packages/sklearn/utils/validation.py", line 172, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input X contains NaN.
MLPClassifier does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

WARNING AN INDIVIDUAL TIMED OUT: 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155454a66d70> 

Generation:  23
Best f1_score score: 0.8986078436367675
Generation:  92%|█████████▏| 23/25 [2:38:00<15:37, 468.85s/it]Generation:  24
Best f1_score score: 0.8986078436367675
Generation:  96%|█████████▌| 24/25 [2:42:35<06:50, 410.87s/it]WARNING AN INDIVIDUAL TIMED OUT: 
 <tpot2.search_spaces.pipelines.sequential.SequentialPipelineIndividual object at 0x155454b63b20> 

Generation:  25
Best f1_score score: 0.8986078436367675
Generation: 100%|██████████| 25/25 [2:52:39<00:00, 468.84s/it]Generation: 100%|██████████| 25/25 [2:52:39<00:00, 414.39s/it]
2024-10-23 21:31:04,210 - distributed.scheduler - ERROR - Removing worker 'tcp://127.0.0.1:41849' caused the cluster to lose scattered data, which can't be recovered: {'DataFrame-276db3354a526bcd35f874436e5d2113', 'ndarray-422b2c53f5e51e71a00dd009dc06b86a'} (stimulus_id='handle-worker-cleanup-1729744264.210735')
Fitted
Pipeline(steps=[('iterativeimputer',
                 IterativeImputer(estimator=Ridge(),
                                  imputation_order='descending',
                                  initial_strategy='constant',
                                  n_nearest_features=74)),
                ('mlpclassifier',
                 MLPClassifier(alpha=0.0614566939231, early_stopping=True,
                               hidden_layer_sizes=[108, 108],
                               learning_rate='invscaling',
                               learning_rate_init=0.0002409033671,
                               n_iter_no_change=32))])
transform worked
try transform
transform worked
score start
train score: {'auroc': 0.9621234518693659, 'accuracy': 0.9008087898672363, 'balanced_accuracy': 0.8871459446281487, 'logloss': 0.2590166331689343, 'f1': 0.894645218214464}
test score: {'auroc': 0.9595886662110722, 'accuracy': 0.9011592434411226, 'balanced_accuracy': 0.8905498674962197, 'logloss': 0.26446948915305046, 'f1': 0.8958213663543482}
original test score: {'auroc': 0.9902191491927629, 'accuracy': 0.9402074435631482, 'balanced_accuracy': 0.9330438452999039, 'logloss': 0.19085959624336352, 'f1': 0.9372642850670392}
score end
725
lvl
0.1
type
MCAR
num_run
1
class_full
finished
all finished
full run takes
9.552895765768158
hours
DONE
